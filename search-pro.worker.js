const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:n})=>n),bt=et(V(JSON.parse("{\"/\":{\"documentCount\":635,\"nextId\":635,\"documentIds\":{\"0\":\"0\",\"1\":\"1\",\"2\":\"2\",\"3\":\"2#开发常用\",\"4\":\"3\",\"5\":\"3@0\",\"6\":\"4\",\"7\":\"4@0\",\"8\":\"4@1\",\"9\":\"5\",\"10\":\"5@0\",\"11\":\"5@1\",\"12\":\"6\",\"13\":\"6#markdown-介绍\",\"14\":\"6#markdown-配置\",\"15\":\"6#markdown-扩展\",\"16\":\"6#vuepress-扩展\",\"17\":\"6#主题扩展\",\"18\":\"6#提示容器\",\"19\":\"6#代码块\",\"20\":\"6#上下角标\",\"21\":\"6#自定义对齐\",\"22\":\"6#attrs\",\"23\":\"6#脚注\",\"24\":\"6#标记\",\"25\":\"6#任务列表\",\"26\":\"6#图片增强\",\"27\":\"6#组件\",\"28\":\"6@0\",\"29\":\"6@1\",\"30\":\"7\",\"31\":\"7#页面标题\",\"32\":\"7#页面信息\",\"33\":\"7#页面内容\",\"34\":\"7#组件\",\"35\":\"7@0\",\"36\":\"7@1\",\"37\":\"8\",\"38\":\"8#标题-2\",\"39\":\"8#标题-3\",\"40\":\"8@0\",\"41\":\"8@1\",\"42\":\"9\",\"43\":\"9#标题-2\",\"44\":\"9#标题-3\",\"45\":\"9@0\",\"46\":\"9@1\",\"47\":\"10\",\"48\":\"10#标题-2\",\"49\":\"10#标题-3\",\"50\":\"10@0\",\"51\":\"10@1\",\"52\":\"11\",\"53\":\"11#标题-2\",\"54\":\"11#标题-3\",\"55\":\"11@0\",\"56\":\"11@1\",\"57\":\"12\",\"58\":\"12#_1-人机交互\",\"59\":\"12#_1-1-什么是cmd\",\"60\":\"12#_1-2-如何打开cmd窗口\",\"61\":\"12#_1-3-常用cmd命令\",\"62\":\"12#_1-4-cmd练习\",\"63\":\"12#_1-5-环境变量\",\"64\":\"12#_2-java概述\",\"65\":\"12#_1-1-java是什么\",\"66\":\"12#_1-2下载和安装\",\"67\":\"12#_1-2-1-下载\",\"68\":\"12#_1-2-2-安装\",\"69\":\"12#_1-2-3-jdk的安装目录介绍\",\"70\":\"12#_1-3-helloworld小案例\",\"71\":\"12#_2-3-1-java程序开发运行流程\",\"72\":\"12#_2-3-2-helloworld案例的编写\",\"73\":\"12#_1-4-helloworld案例常见问题\",\"74\":\"12#_1-4-1-bug\",\"75\":\"12#_1-4-2-bug的解决\",\"76\":\"12#_1-4-3-helloworld常见问题\",\"77\":\"12#常见错误代码1\",\"78\":\"12#常见错误代码2\",\"79\":\"12#常见错误代码3\",\"80\":\"12#常见错误代码4\",\"81\":\"12#_1-5-环境变量-1\",\"82\":\"12#_1-5-1-为什么配置环境变量\",\"83\":\"12#_1-5-2配置方式\",\"84\":\"12#_1-5-3win10的bug\",\"85\":\"12#_1-6-notepad\",\"86\":\"12#_1-6-1下载\",\"87\":\"12#_1-6-2-安装\",\"88\":\"12#_1-6-3-设置\",\"89\":\"12#_1-6-4-练习\",\"90\":\"12#_1-7-java语言的发展\",\"91\":\"12#_1-8-java的三大平台\",\"92\":\"12#_1-8-1-javase\",\"93\":\"12#_1-8-2-javame\",\"94\":\"12#_1-8-3-javaee\",\"95\":\"12#_1-9-java的主要特性\",\"96\":\"12#_1-9-1-java语言跨平台的原理\",\"97\":\"12#_1-10-jre和jdk\",\"98\":\"13\",\"99\":\"13#_1-注释\",\"100\":\"13#使用的技巧\",\"101\":\"13#注意点\",\"102\":\"13#_2-关键字\",\"103\":\"13#_2-1-概念\",\"104\":\"13#_2-2-第一个关键字class\",\"105\":\"13#_3-字面量\",\"106\":\"13#区分技巧\",\"107\":\"13#_4-变量\",\"108\":\"13#_4-1-什么是变量\",\"109\":\"13#_4-2-变量的定义格式\",\"110\":\"13#_4-2-1-格式详解\",\"111\":\"13#_4-2-2-常用的数据类型\",\"112\":\"13#_4-2-3-变量的注意事项\",\"113\":\"13#_4-3-变量的练习\",\"114\":\"13#_5-数据类型\",\"115\":\"13#_5-1-java语言数据类型的分类\",\"116\":\"13#_5-2-基本数据类型的四类八种\",\"117\":\"13#说明\",\"118\":\"13#需要记忆以下几点\",\"119\":\"13#_5-3-定义8种基本数据类型变量\",\"120\":\"13#注意点-1\",\"121\":\"13#_5-4-练习1\",\"122\":\"13#_5-5-练习2\",\"123\":\"13#_5-6-练习3\",\"124\":\"13#_6-标识符\",\"125\":\"13#_6-1-硬性要求\",\"126\":\"13#_6-2-软性建议\",\"127\":\"13#_6-2-1-小驼峰命名法\",\"128\":\"13#_6-2-2-大驼峰命名法\",\"129\":\"13#阿里巴巴命名规范细节\",\"130\":\"13#_7-键盘录入\",\"131\":\"13#_8-idea\",\"132\":\"13#_8-1-idea概述\",\"133\":\"13#_8-2-idea的下载和安装\",\"134\":\"13#_8-2-1-下载\",\"135\":\"13#_8-2-2-安装\",\"136\":\"13#_8-3-idea中层级结构介绍\",\"137\":\"13#_8-3-1-结构分类\",\"138\":\"13#_8-3-2-结构介绍\",\"139\":\"13#project-项目、工程\",\"140\":\"13#module-模块\",\"141\":\"13#package-包\",\"142\":\"13#class-类\",\"143\":\"13#_8-3-3-小结\",\"144\":\"13#_8-4-idea中的第一个代码\",\"145\":\"13#_8-4-1-操作步骤\",\"146\":\"13#_8-4-2-分步图解\",\"147\":\"13#_8-5-idea中类的相关操作\",\"148\":\"13#_8-5-1-类的相关操作\",\"149\":\"13#_8-5-2-新建类文件\",\"150\":\"13#_8-5-3-修改类名\",\"151\":\"13#_8-5-4-删除类文件\",\"152\":\"13#_8-6-idea中模块的相关操作\",\"153\":\"13#_8-6-1-模块的相关操作\",\"154\":\"13#_8-6-2-新建模块\",\"155\":\"13#_8-6-3-删除模块\",\"156\":\"13#_8-6-4-修改模块\",\"157\":\"13#_8-6-5-导入模块\",\"158\":\"13#_8-7-idea中项目的相关操作\",\"159\":\"13#_8-7-1-项目的相关操作\",\"160\":\"13#_8-7-2-关闭项目\",\"161\":\"13#_8-7-3-打开项目\",\"162\":\"13#_8-7-4-修改项目\",\"163\":\"13#_8-7-5-新建项目\",\"164\":\"14\",\"165\":\"14#运算符\",\"166\":\"14#表达式\",\"167\":\"14#练习-数值拆分\",\"168\":\"14#概念\",\"169\":\"14#简单记忆\",\"170\":\"14#两种提升规则\",\"171\":\"14#取值范围从小到大的关系\",\"172\":\"14#案例一\",\"173\":\"14#案例二\",\"174\":\"14#案例三\",\"175\":\"14#案例四\",\"176\":\"14#案例五\",\"177\":\"14#案例六\",\"178\":\"14#概念-1\",\"179\":\"14#书写格式\",\"180\":\"14#核心技巧\",\"181\":\"14#规则\",\"182\":\"14#案例\",\"183\":\"14#分类\",\"184\":\"14#使用方式\",\"185\":\"14#注意点\",\"186\":\"14#案例-1\",\"187\":\"14#自增自减运算符的应用场景\",\"188\":\"14#分类-1\",\"189\":\"14#运算规则\",\"190\":\"14#案例-2\",\"191\":\"14#注意点-1\",\"192\":\"14#分类-2\",\"193\":\"14#注意点-2\",\"194\":\"14#和-的使用\",\"195\":\"14#使用场景\",\"196\":\"14#异或-的使用\",\"197\":\"14#取反-的使用\",\"198\":\"14#-1\",\"199\":\"14#逻辑核心\",\"200\":\"14#举例\",\"201\":\"14#总结\",\"202\":\"14#建议\",\"203\":\"14#格式\",\"204\":\"14#计算规则\",\"205\":\"14#注意点-3\",\"206\":\"14#案例-3\",\"207\":\"14#原码、反码、补码\",\"208\":\"14#计算机使用原码计算存在的问题\",\"209\":\"14#计算机使用反码计算存在的问题\",\"210\":\"14#基本数据类型占位分析\",\"211\":\"14#隐式转换和强制类型转换的底层实现\",\"212\":\"14#隐式转换\",\"213\":\"14#强制转换\",\"214\":\"14#其他的运算符\",\"215\":\"14#与或运算符\",\"216\":\"14#左移运算符\",\"217\":\"14#右移运算符\",\"218\":\"14#无符号右移\",\"219\":\"15\",\"220\":\"15#第一章-流程控制语句\",\"221\":\"15#_1-1-流程控制语句分类\",\"222\":\"15#_1-2-顺序结构\",\"223\":\"15#第二章-判断语句-if语句\",\"224\":\"15#_2-1-if语句格式1\",\"225\":\"15#练习1-老丈人选女婿\",\"226\":\"15#练习2-考试奖励\",\"227\":\"15#第一种格式的细节\",\"228\":\"15#_2-2-if语句格式2\",\"229\":\"15#练习1-吃饭\",\"230\":\"15#练习2-影院选座\",\"231\":\"15#_2-3-if语句格式3\",\"232\":\"15#练习1-考试奖励\",\"233\":\"15#第三章-switch语句\",\"234\":\"15#_3-1-格式\",\"235\":\"15#_3-2-执行流程\",\"236\":\"15#练习-运动计划\",\"237\":\"15#_3-3-switch的扩展知识\",\"238\":\"15#练习-休息日和工作日\",\"239\":\"15#第四章-循环结构\",\"240\":\"15#_4-1-for循环结构-掌握\",\"241\":\"15#_4-1-1-for循环格式\",\"242\":\"15#for循环练习-输出数据\",\"243\":\"15#for循环练习-求和\",\"244\":\"15#for循环练习-求偶数和\",\"245\":\"15#for循环练习-统计次数\",\"246\":\"15#_4-2-while循环\",\"247\":\"15#_4-2-1-格式\",\"248\":\"15#练习1-打印5次helloworld\",\"249\":\"15#练习2-珠穆朗玛峰\",\"250\":\"15#_4-3-do-while循环\",\"251\":\"15#_4-4-三种格式的区别\",\"252\":\"15#循环高级\",\"253\":\"15#_1-无限循环\",\"254\":\"15#概念\",\"255\":\"15#for格式\",\"256\":\"15#while格式\",\"257\":\"15#do-while格式\",\"258\":\"15#无限循环的注意事项\",\"259\":\"15#_2-条件控制语句\",\"260\":\"15#break\",\"261\":\"15#continue\",\"262\":\"15#_3-random\",\"263\":\"15#使用步骤\",\"264\":\"15#_4-逢七过\",\"265\":\"15#_5-平方根\",\"266\":\"15#_6-判断是否为质数\",\"267\":\"15#_7-猜数字小游戏\",\"268\":\"16\",\"269\":\"16#概念\",\"270\":\"16#格式一\",\"271\":\"16#格式二\",\"272\":\"16#详解\",\"273\":\"16#注意点\",\"274\":\"16#完整格式\",\"275\":\"16#格式详解\",\"276\":\"16#注意点-1\",\"277\":\"16#简化格式\",\"278\":\"16#练习1\",\"279\":\"16#练习2\",\"280\":\"16#练习3\",\"281\":\"16#格式\",\"282\":\"16#作用\",\"283\":\"16#代码示例\",\"284\":\"16#索引的特点\",\"285\":\"16#格式-1\",\"286\":\"16#举例\",\"287\":\"16#数组的默认初始化值\",\"288\":\"16#使用场景\",\"289\":\"16#举例-1\",\"290\":\"16#练习1-求和\",\"291\":\"16#练习2-统计个数\",\"292\":\"16#练习3-变化数据\",\"293\":\"16#练习4-求最值\",\"294\":\"16#练习5-统计个数\",\"295\":\"16#练习6-交换数据\",\"296\":\"16#练习7-打乱数据\",\"297\":\"17\",\"298\":\"17#_1-方法概述\",\"299\":\"17#_1-1-方法的概念\",\"300\":\"17#_2-方法的定义和调用\",\"301\":\"17#_2-1-无参数方法定义和调用\",\"302\":\"17#_2-3-无参数方法的练习\",\"303\":\"17#_3-带参数方法定义和调用\",\"304\":\"17#_3-1-带参数方法定义和调用\",\"305\":\"17#_3-2-形参和实参\",\"306\":\"17#_3-3-带参数方法练习\",\"307\":\"17#_4-带返回值方法的定义和调用\",\"308\":\"17#_4-1-带返回值方法定义和调用\",\"309\":\"17#_4-2-带返回值方法练习1\",\"310\":\"17#_4-3-带返回值方法练习2\",\"311\":\"17#_4-4-带返回值方法练习3\",\"312\":\"17#_5-方法的注意事项\",\"313\":\"17#_5-1-方法的注意事项\",\"314\":\"17#_5-2-方法的通用格式\",\"315\":\"17#_6-方法重载\",\"316\":\"17#_6-1-方法重载\",\"317\":\"17#_6-2-方法重载练习\",\"318\":\"17#_7-3-数组遍历\",\"319\":\"17#_7-4-数组最大值\",\"320\":\"17#_7-6-获取索引\",\"321\":\"18\",\"322\":\"18#java为什么要使用面向对象的方式来编程\",\"323\":\"18#在java中面向对象到底学什么\",\"324\":\"18#_1-类和对象\",\"325\":\"18#_1-1-类和对象的理解\",\"326\":\"18#_1-2-类的定义\",\"327\":\"18#_1-3-对象的使用\",\"328\":\"18#_1-4-学生对象-练习\",\"329\":\"18#_2-对象内存图\",\"330\":\"18#_2-1-单个对象内存图\",\"331\":\"18#_2-2-多个对象内存图\",\"332\":\"18#_3-成员变量和局部变量\",\"333\":\"18#_3-1-成员变量和局部变量的区别\",\"334\":\"18#_4-封装\",\"335\":\"18#_4-1-封装思想\",\"336\":\"18#_4-2-private关键字\",\"337\":\"18#_4-3-private的使用\",\"338\":\"18#_4-4-this关键字\",\"339\":\"18#_5-构造方法\",\"340\":\"18#_5-1-构造方法概述\",\"341\":\"18#_5-2-构造方法的注意事项\",\"342\":\"18#_5-3-构造方法的特点\",\"343\":\"18#_5-4-重要-构造方法的执行时机\",\"344\":\"18#_5-3-标准类制作\",\"345\":\"18#_5-4-练习1\",\"346\":\"18#_5-4-练习2\",\"347\":\"19\",\"348\":\"19#_1-api\",\"349\":\"19#_1-1api概述\",\"350\":\"19#_1-2如何使用api帮助文档\",\"351\":\"19#_2-string类\",\"352\":\"19#_2-1string类概述\",\"353\":\"19#_2-2string类的特点\",\"354\":\"19#_2-3string类的构造方法\",\"355\":\"19#_2-4创建字符串对象两种方式的区别\",\"356\":\"19#_2-5字符串的比较\",\"357\":\"19#_2-5-1-号的作用\",\"358\":\"19#_2-5-2-equals方法的作用\",\"359\":\"19#_2-6用户登录案例\",\"360\":\"19#_2-6-1案例需求\",\"361\":\"19#_2-6-2代码实现\",\"362\":\"19#_2-7遍历字符串案例\",\"363\":\"19#_2-7-1案例需求\",\"364\":\"19#_2-7-2直接遍历字符串\",\"365\":\"19#_2-8统计字符次数案例\",\"366\":\"19#_2-8-1案例需求\",\"367\":\"19#_2-8-2代码实现\",\"368\":\"19#_2-9字符串拼接案例\",\"369\":\"19#_2-9-1案例需求\",\"370\":\"19#_2-9-2代码实现\",\"371\":\"19#_2-10字符串反转案例\",\"372\":\"19#_2-10-1案例需求\",\"373\":\"19#_2-10-2代码实现\",\"374\":\"19#_2-11-金额转换\",\"375\":\"19#_2-11-1-案例需求\",\"376\":\"19#_2-11-2-代码实现\",\"377\":\"19#_2-12-手机号屏蔽\",\"378\":\"19#_2-13-敏感词替换\",\"379\":\"19#_2-14-身份证信息查看\",\"380\":\"19#_3-stringbuilder\",\"381\":\"19#_3-1-基本使用\",\"382\":\"19#_3-2-链式编程\",\"383\":\"19#_3-3-练习1-对称字符串\",\"384\":\"19#_3-4-练习2-拼接字符串\",\"385\":\"19#_4-stringjoiner\",\"386\":\"19#关于字符串的小扩展\",\"387\":\"20\",\"388\":\"20#_1-arraylist\",\"389\":\"20#集合和数组的优势对比\",\"390\":\"20#_1-1-arraylist类概述\",\"391\":\"20#_1-2-arraylist类常用方法\",\"392\":\"20#_1-2-1-构造方法\",\"393\":\"20#_1-2-2-成员方法\",\"394\":\"20#_1-2-3-示例代码\",\"395\":\"20#_1-3-arraylist存储字符串并遍历\",\"396\":\"20#_1-3-1-案例需求\",\"397\":\"20#_1-3-2-代码实现\",\"398\":\"20#_1-4-arraylist存储学生对象并遍历\",\"399\":\"20#_1-4-1-案例需求\",\"400\":\"20#_1-4-2-代码实现\",\"401\":\"20#_1-5-查找用户的索引\",\"402\":\"20#_1-6-判断用户的是否存在\",\"403\":\"21\",\"404\":\"21#_1-1-如何定义类\",\"405\":\"21#_1-2-如何通过类创建对象\",\"406\":\"21#_1-3-封装\",\"407\":\"21#_1-3-1-封装的步骤\",\"408\":\"21#_1-3-2-封装的步骤实现\",\"409\":\"21#_1-4-构造方法\",\"410\":\"21#_1-4-1-构造方法的作用\",\"411\":\"21#_1-4-2-构造方法的格式\",\"412\":\"21#_1-4-3-构造方法的应用\",\"413\":\"21#_1-5-this关键字的作用\",\"414\":\"21#_1-5-1-this关键字的作用\",\"415\":\"21#_1-5-2-this关键字的应用\",\"416\":\"21#_1-5-2-1-用于普通的gettter与setter方法\",\"417\":\"21#_1-5-2-2-用于构造方法中\",\"418\":\"21#_2-1-概述\",\"419\":\"21#_2-2-定义格式和使用\",\"420\":\"21#_2-2-1-静态变量及其访问\",\"421\":\"21#_2-2-2-实例变量及其访问\",\"422\":\"21#_2-2-3-静态方法及其访问\",\"423\":\"21#_2-2-4-实例方法及其访问\",\"424\":\"21#_2-3-小结\",\"425\":\"21#_2-4-static-的注意事项\",\"426\":\"21#重新认识一下main方法\",\"427\":\"21#_3-1-概述\",\"428\":\"21#_3-1-1-引入\",\"429\":\"21#_3-1-2-继承的含义\",\"430\":\"21#_3-1-3-继承的好处\",\"431\":\"21#_3-2-继承的格式\",\"432\":\"21#_3-3-继承案例\",\"433\":\"21#_3-3-1-案例\",\"434\":\"21#_3-3-2-案例图解分析\",\"435\":\"21#_3-3-3-案例代码实现\",\"436\":\"21#_3-3-4-小结\",\"437\":\"21#_3-4-子类不能继承的内容\",\"438\":\"21#_3-4-1-引入\",\"439\":\"21#_3-4-1-演示代码\",\"440\":\"21#_3-5-继承后的特点—成员变量\",\"441\":\"21#_3-5-1-成员变量不重名\",\"442\":\"21#_3-5-2-成员变量重名\",\"443\":\"21#_3-5-3-super访问父类成员变量\",\"444\":\"21#_3-6-继承后的特点—成员方法\",\"445\":\"21#_3-6-1-成员方法不重名\",\"446\":\"21#_3-6-2-成员方法重名\",\"447\":\"21#_3-7-方法重写\",\"448\":\"21#_3-7-1-概念\",\"449\":\"21#_3-7-2-使用场景与案例\",\"450\":\"21#_3-7-2-override重写注解\",\"451\":\"21#_3-7-3-注意事项\",\"452\":\"21#_3-7-4-方法重写的本质\",\"453\":\"21#_3-7-5-方法重写的注意事项和要求\",\"454\":\"21#_3-8-继承后的特点—构造方法\",\"455\":\"21#_3-8-1-引入\",\"456\":\"21#_3-8-2-案例演示\",\"457\":\"21#_3-8-3-小结\",\"458\":\"21#_3-9-super-和this\",\"459\":\"21#_3-9-1-引入\",\"460\":\"21#_3-9-2-super和this的用法格式\",\"461\":\"21#_3-9-3-super-用法演示\",\"462\":\"21#_3-9-4-super-案例图解\",\"463\":\"21#_3-9-5-this-用法演示\",\"464\":\"21#_3-9-6-小结\",\"465\":\"21#_3-10-继承的特点\",\"466\":\"21#_4-关于今天知识的小结\",\"467\":\"21#总结\",\"468\":\"21#继承中变量、方法的访问特点\",\"469\":\"21#成员变量的访问特点\",\"470\":\"21#成员方法的访问特点\",\"471\":\"21#构造方法的访问特点\",\"472\":\"21#什么时候会用到继承\",\"473\":\"21#子类到底能继承父类中的哪些内容-内存图-内存分析工具\",\"474\":\"21#构造方法是否可以被继承\",\"475\":\"21#_1-1-多态的形式\",\"476\":\"21#_1-2-多态的使用场景\",\"477\":\"21#_1-3-多态的定义和前提\",\"478\":\"21#_1-4-多态的运行特点\",\"479\":\"21#多态的优势\",\"480\":\"21#_1-5-多态的弊端\",\"481\":\"21#_1-6-引用类型转换\",\"482\":\"21#_1-6-1-为什么要转型\",\"483\":\"21#_1-6-2-向上转型-自动转换\",\"484\":\"21#_1-6-3-向下转型-强制转换\",\"485\":\"21#_1-6-4-案例演示\",\"486\":\"21#_1-6-5-转型的异常\",\"487\":\"21#_1-6-6-instanceof关键字\",\"488\":\"21#_1-6-7-instanceof新特性\",\"489\":\"21#_1-7-综合练习\",\"490\":\"21#_2-1-包\",\"491\":\"21#_2-2-导包\",\"492\":\"21#_2-3-使用不同包下的相同类怎么办\",\"493\":\"21#_3-1-权限修饰符\",\"494\":\"21#_3-2-不同权限的访问能力\",\"495\":\"21#_4-1-概述\",\"496\":\"21#_4-2-使用方式\",\"497\":\"21#_4-2-1-修饰类\",\"498\":\"21#_4-2-2-修饰方法\",\"499\":\"21#_4-2-3-修饰变量-局部变量\",\"500\":\"21#_4-2-4-修饰变量-成员变量\",\"501\":\"21#_5-1-局部代码块\",\"502\":\"21#_5-2-构造代码块\",\"503\":\"21#_5-3-静态代码块\",\"504\":\"21#_1-1-概述\",\"505\":\"21#_1-1-1-抽象类引入\",\"506\":\"21#_1-2-abstract使用格式\",\"507\":\"21#_1-2-1-抽象方法\",\"508\":\"21#_1-2-2-抽象类\",\"509\":\"21#_1-2-3-抽象类的使用\",\"510\":\"21#_1-3-抽象类的特征\",\"511\":\"21#_1-4-抽象类的细节\",\"512\":\"21#_1-5-抽象类存在的意义\",\"513\":\"21#_2-1-概述-1\",\"514\":\"21#_2-2-定义格式\",\"515\":\"21#_2-3-接口成分的特点\",\"516\":\"21#_2-3-1-抽象方法\",\"517\":\"21#_2-3-2-常量\",\"518\":\"21#_2-3-3-案例演示\",\"519\":\"21#_2-4-基本的实现\",\"520\":\"21#_2-4-1-实现接口的概述\",\"521\":\"21#_2-4-2-实现接口的格式\",\"522\":\"21#_2-4-3-类实现接口的要求和意义\",\"523\":\"21#_2-4-4-类与接口基本实现案例\",\"524\":\"21#_2-4-5-类与接口的多实现案例\",\"525\":\"21#_2-5-接口与接口的多继承\",\"526\":\"21#_2-6扩展-接口的细节\",\"527\":\"21#_2-7-接口中成员的特点\",\"528\":\"21#_2-8-接口和类之间的关系\",\"529\":\"21#_3-1-概述-1\",\"530\":\"21#_3-1-1-什么是内部类\",\"531\":\"21#_3-1-2-什么时候使用内部类\",\"532\":\"21#_3-2-内部类的分类\",\"533\":\"21#_3-3-成员内部类\",\"534\":\"21#_3-4-成员内部类的细节\",\"535\":\"21#_3-5-成员内部类面试题\",\"536\":\"21#_3-6-成员内部类内存图\",\"537\":\"21#_3-7-静态内部类\",\"538\":\"21#_3-8-局部内部类\",\"539\":\"21#_3-9-匿名内部类【重点】\",\"540\":\"21#_3-9-1-概述\",\"541\":\"21#_3-9-2-格式\",\"542\":\"21#_3-9-2-什么时候用到匿名内部类\",\"543\":\"21#_3-9-3-匿名内部类前提和格式\",\"544\":\"21#_3-9-4-使用方式\",\"545\":\"21#_3-9-5-匿名内部类的特点\",\"546\":\"21#_3-9-6-匿名内部类的使用场景\",\"547\":\"21#一、接口中新增的方法\",\"548\":\"21#接口中的默认方法\",\"549\":\"21#接口中的静态方法\",\"550\":\"21#私有方法\",\"551\":\"21#普通私有方法、静态私有方法\",\"552\":\"21#二、接口应用\",\"553\":\"21#三、适配器设计模式\",\"554\":\"21#什么是设计模式\",\"555\":\"22\",\"556\":\"22#_1-1-概述\",\"557\":\"22#_1-2-常见方法\",\"558\":\"22#_1-3-算法小题-质数\",\"559\":\"22#_1-4-算法小题-自幂数\",\"560\":\"22#_1-5-课后练习\",\"561\":\"22#_2-1-概述\",\"562\":\"22#_2-2-常见方法\",\"563\":\"22#_3-1-概述\",\"564\":\"22#_3-2-常见方法\",\"565\":\"22#_3-3-恶搞好基友\",\"566\":\"22#_4-1-概述\",\"567\":\"22#_4-2-常见方法\",\"568\":\"22#_5-1-概述\",\"569\":\"22#_5-2-常见方法\",\"570\":\"22#_6-1-引入\",\"571\":\"22#_6-2-概述\",\"572\":\"22#_6-3-常见方法\",\"573\":\"22#_6-4-底层存储方式\",\"574\":\"22#_7-1-引入\",\"575\":\"22#_7-2-概述\",\"576\":\"22#_7-3-常见方法\",\"577\":\"22#_7-4-底层存储方式\",\"578\":\"25\",\"579\":\"25#标题-2\",\"580\":\"25#标题-3\",\"581\":\"25@0\",\"582\":\"25@1\",\"583\":\"26\",\"584\":\"26#标题-2\",\"585\":\"26#标题-3\",\"586\":\"26@0\",\"587\":\"26@1\",\"588\":\"27\",\"589\":\"27#标题-2\",\"590\":\"27#标题-3\",\"591\":\"27@0\",\"592\":\"27@1\",\"593\":\"28\",\"594\":\"28#标题-2\",\"595\":\"28#标题-3\",\"596\":\"28@0\",\"597\":\"28@1\",\"598\":\"29\",\"599\":\"29#标题-2\",\"600\":\"29#标题-3\",\"601\":\"29@0\",\"602\":\"29@1\",\"603\":\"30\",\"604\":\"30#标题-2\",\"605\":\"30#标题-3\",\"606\":\"30@0\",\"607\":\"30@1\",\"608\":\"31\",\"609\":\"31#标题-2\",\"610\":\"31#标题-3\",\"611\":\"31@0\",\"612\":\"31@1\",\"613\":\"32\",\"614\":\"32#标题-2\",\"615\":\"32#标题-3\",\"616\":\"32@0\",\"617\":\"32@1\",\"618\":\"33\",\"619\":\"34\",\"620\":\"35\",\"621\":\"36\",\"622\":\"37\",\"623\":\"38\",\"624\":\"39\",\"625\":\"41\",\"626\":\"42\",\"627\":\"43\",\"628\":\"44\",\"629\":\"45\",\"630\":\"46\",\"631\":\"47\",\"632\":\"48\",\"633\":\"49\",\"634\":\"50\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,2],\"2\":[1],\"3\":[1],\"4\":[1],\"5\":[null,null,1],\"6\":[1,18],\"7\":[null,null,1],\"8\":[null,null,1],\"9\":[1,20],\"10\":[null,null,1],\"11\":[null,null,1],\"12\":[2,11],\"13\":[2,8],\"14\":[2,13],\"15\":[2,11],\"16\":[2,10],\"17\":[1,10],\"18\":[1,19],\"19\":[1,1],\"20\":[1,3],\"21\":[1,3],\"22\":[1,5],\"23\":[1,2],\"24\":[1,3],\"25\":[1,6],\"26\":[1,2],\"27\":[1],\"28\":[null,null,1],\"29\":[null,null,1],\"30\":[1,3],\"31\":[1,19],\"32\":[1,20],\"33\":[1,12],\"34\":[1,13],\"35\":[null,null,1],\"36\":[null,null,2],\"37\":[1],\"38\":[2,2],\"39\":[2,2],\"40\":[null,null,1],\"41\":[null,null,3],\"42\":[1],\"43\":[2,2],\"44\":[2,2],\"45\":[null,null,2],\"46\":[null,null,2],\"47\":[1],\"48\":[2,2],\"49\":[2,2],\"50\":[null,null,2],\"51\":[null,null,2],\"52\":[1],\"53\":[2,2],\"54\":[2,2],\"55\":[null,null,1],\"56\":[null,null,2],\"57\":[2],\"58\":[2],\"59\":[3,8],\"60\":[4,11],\"61\":[3,39],\"62\":[3,18],\"63\":[3,45],\"64\":[2],\"65\":[3,8],\"66\":[2],\"67\":[3,19],\"68\":[3,12],\"69\":[4,16],\"70\":[3,6],\"71\":[4,6],\"72\":[3,39],\"73\":[3],\"74\":[3,5],\"75\":[4,8],\"76\":[4,20],\"77\":[2,18],\"78\":[2,21],\"79\":[2,16],\"80\":[2,18],\"81\":[3],\"82\":[3,18],\"83\":[3,18],\"84\":[3,11],\"85\":[3],\"86\":[3,5],\"87\":[4,10],\"88\":[4,12],\"89\":[4,3],\"90\":[3,28],\"91\":[3,4],\"92\":[3,3],\"93\":[4,10],\"94\":[4,6],\"95\":[3,6],\"96\":[3,6],\"97\":[3,42],\"98\":[2],\"99\":[2,12],\"100\":[1,10],\"101\":[1,18],\"102\":[2],\"103\":[3,67],\"104\":[2,19],\"105\":[2,56],\"106\":[1,41],\"107\":[2],\"108\":[4,4],\"109\":[3,6],\"110\":[4,17],\"111\":[3,31],\"112\":[4,36],\"113\":[3,63],\"114\":[2],\"115\":[3,4],\"116\":[3,42],\"117\":[1,8],\"118\":[1,32],\"119\":[3,54],\"120\":[1,38],\"121\":[3,41],\"122\":[2,46],\"123\":[3,32],\"124\":[2,3],\"125\":[4,9],\"126\":[4,4],\"127\":[4,10],\"128\":[3,12],\"129\":[2,14],\"130\":[2,47],\"131\":[2],\"132\":[3,10],\"133\":[3],\"134\":[4,10],\"135\":[3,38],\"136\":[3],\"137\":[4,10],\"138\":[4,7],\"139\":[4,5],\"140\":[3,12],\"141\":[3,9],\"142\":[3,3],\"143\":[3,13],\"144\":[3],\"145\":[4,8],\"146\":[4,51],\"147\":[3],\"148\":[4,3],\"149\":[4,10],\"150\":[4,7],\"151\":[4,10],\"152\":[3],\"153\":[4,4],\"154\":[4,18],\"155\":[4,12],\"156\":[4,10],\"157\":[4,26],\"158\":[3],\"159\":[4,4],\"160\":[4,17],\"161\":[4,8],\"162\":[4,26],\"163\":[4,15],\"164\":[2],\"165\":[2,5],\"166\":[2,56],\"167\":[2,43],\"168\":[2,6],\"169\":[2,3],\"170\":[2,10],\"171\":[2,26],\"172\":[2,20],\"173\":[2,14],\"174\":[2,22],\"175\":[2,28],\"176\":[2,17],\"177\":[2,29],\"178\":[2,5],\"179\":[2,31],\"180\":[2,55],\"181\":[2,4],\"182\":[2,35],\"183\":[2,6],\"184\":[2,7],\"185\":[2,5],\"186\":[2,16],\"187\":[2,44],\"188\":[2,2],\"189\":[2,4],\"190\":[2,26],\"191\":[2,35],\"192\":[2,16],\"193\":[2,5],\"194\":[4,25],\"195\":[2,26],\"196\":[4,18],\"197\":[3,20],\"198\":[2,3],\"199\":[2,6],\"200\":[2,37],\"201\":[2,4],\"202\":[2,5],\"203\":[2,4],\"204\":[2,6],\"205\":[2,4],\"206\":[2,72],\"207\":[3,12],\"208\":[1,16],\"209\":[1,21],\"210\":[1,18],\"211\":[1],\"212\":[1,23],\"213\":[1,41],\"214\":[1,19],\"215\":[1,32],\"216\":[1,31],\"217\":[1,32],\"218\":[1,3],\"219\":[2],\"220\":[2,7],\"221\":[2,9],\"222\":[3,7],\"223\":[3],\"224\":[3,41],\"225\":[2,28],\"226\":[2,26],\"227\":[2,15],\"228\":[2,42],\"229\":[2,31],\"230\":[2,46],\"231\":[3,18],\"232\":[2,62],\"233\":[2],\"234\":[3,11],\"235\":[2,13],\"236\":[2,59],\"237\":[3,40],\"238\":[2,36],\"239\":[2],\"240\":[5,12],\"241\":[4,52],\"242\":[2,29],\"243\":[2,60],\"244\":[2,46],\"245\":[2,9],\"246\":[3],\"247\":[5,6],\"248\":[2,13],\"249\":[2,35],\"250\":[4,13],\"251\":[3,14],\"252\":[1],\"253\":[2],\"254\":[2,4],\"255\":[2,16],\"256\":[2,12],\"257\":[3,13],\"258\":[2,5],\"259\":[2,2],\"260\":[2,29],\"261\":[2,32],\"262\":[2,5],\"263\":[2,49],\"264\":[2,59],\"265\":[2,72],\"266\":[2,63],\"267\":[2,49],\"268\":[2],\"269\":[2,31],\"270\":[2,6],\"271\":[2,7],\"272\":[2,8],\"273\":[2,6],\"274\":[2,20],\"275\":[2,27],\"276\":[2,4],\"277\":[2,18],\"278\":[2,15],\"279\":[2,13],\"280\":[2,44],\"281\":[2,4],\"282\":[2,5],\"283\":[2,40],\"284\":[2,23],\"285\":[2,7],\"286\":[2,16],\"287\":[2,26],\"288\":[2,6],\"289\":[2,47],\"290\":[2,35],\"291\":[2,46],\"292\":[2,47],\"293\":[2,53],\"294\":[2,58],\"295\":[2,33],\"296\":[2,39],\"297\":[2],\"298\":[2],\"299\":[2,32],\"300\":[2],\"301\":[3,13],\"302\":[3,38],\"303\":[2],\"304\":[3,34],\"305\":[3,16],\"306\":[2,49],\"307\":[2],\"308\":[3,42],\"309\":[3,41],\"310\":[3,61],\"311\":[2,57],\"312\":[2],\"313\":[3,42],\"314\":[3,38],\"315\":[2],\"316\":[3,51],\"317\":[3,43],\"318\":[3,68],\"319\":[3,53],\"320\":[3,59],\"321\":[2,12],\"322\":[2,11],\"323\":[2,4],\"324\":[2],\"325\":[2,26],\"326\":[3,41],\"327\":[3,39],\"328\":[4,60],\"329\":[2],\"330\":[3,4],\"331\":[2,9],\"332\":[2],\"333\":[3,19],\"334\":[2],\"335\":[3,27],\"336\":[3,59],\"337\":[3,61],\"338\":[2,37],\"339\":[2],\"340\":[3,40],\"341\":[3,16],\"342\":[3,7],\"343\":[4,65],\"344\":[3,11],\"345\":[3,47],\"346\":[3,85],\"347\":[2],\"348\":[2],\"349\":[2,17],\"350\":[2,14],\"351\":[2],\"352\":[2,17],\"353\":[2,13],\"354\":[2,47],\"355\":[2,20],\"356\":[2],\"357\":[4,4],\"358\":[3,38],\"359\":[2],\"360\":[3,5],\"361\":[3,61],\"362\":[2],\"363\":[3,2],\"364\":[3,48],\"365\":[2],\"366\":[3,6],\"367\":[3,67],\"368\":[2],\"369\":[3,15],\"370\":[3,74],\"371\":[2],\"372\":[3,10],\"373\":[3,62],\"374\":[3],\"375\":[4,4],\"376\":[3,108],\"377\":[3,49],\"378\":[3,63],\"379\":[3,91],\"380\":[2,7],\"381\":[3,39],\"382\":[3,32],\"383\":[3,49],\"384\":[4,52],\"385\":[2,37],\"386\":[2,38],\"387\":[2],\"388\":[2],\"389\":[2,3],\"390\":[2,8],\"391\":[3],\"392\":[3,5],\"393\":[3,24],\"394\":[4,50],\"395\":[3],\"396\":[3,3],\"397\":[4,48],\"398\":[3],\"399\":[3,3],\"400\":[4,50],\"401\":[3,81],\"402\":[3,96],\"403\":[2],\"404\":[2,25],\"405\":[3,8],\"406\":[3],\"407\":[3,7],\"408\":[4,29],\"409\":[3],\"410\":[3,4],\"411\":[4,6],\"412\":[4,38],\"413\":[3],\"414\":[3,4],\"415\":[4],\"416\":[4,32],\"417\":[4,15],\"418\":[3,41],\"419\":[2,3],\"420\":[3,41],\"421\":[2,9],\"422\":[3,35],\"423\":[3,43],\"424\":[3,37],\"425\":[4,10],\"426\":[1,26],\"427\":[3],\"428\":[3,32],\"429\":[4,19],\"430\":[3,9],\"431\":[3,23],\"432\":[2],\"433\":[3,13],\"434\":[3,21],\"435\":[2,62],\"436\":[3,11],\"437\":[3],\"438\":[4,9],\"439\":[4,33],\"440\":[4,4],\"441\":[4,41],\"442\":[4,42],\"443\":[3,67],\"444\":[4,4],\"445\":[4,31],\"446\":[4,26],\"447\":[3],\"448\":[4,9],\"449\":[4,40],\"450\":[4,28],\"451\":[3,6],\"452\":[4,1],\"453\":[4,17],\"454\":[4],\"455\":[4,18],\"456\":[4,49],\"457\":[3,7],\"458\":[5],\"459\":[4,52],\"460\":[4,14],\"461\":[4,56],\"462\":[5,12],\"463\":[5,44],\"464\":[4,13],\"465\":[3,20],\"466\":[3,82],\"467\":[1,24],\"468\":[2],\"469\":[1],\"470\":[1],\"471\":[1,24],\"472\":[2,28],\"473\":[4,6],\"474\":[2],\"475\":[2,21],\"476\":[3,74],\"477\":[3,22],\"478\":[3,23],\"479\":[1,16],\"480\":[3,31],\"481\":[3],\"482\":[3,34],\"483\":[6,27],\"484\":[6,19],\"485\":[4,50],\"486\":[4,35],\"487\":[3,42],\"488\":[4,26],\"489\":[3,136],\"490\":[3,23],\"491\":[2,12],\"492\":[4,26],\"493\":[3,24],\"494\":[3,24],\"495\":[3,25],\"496\":[3],\"497\":[4,23],\"498\":[3,23],\"499\":[5,51],\"500\":[4,29],\"501\":[3,4],\"502\":[4,12],\"503\":[3,10],\"504\":[2],\"505\":[2,21],\"506\":[3,5],\"507\":[3,16],\"508\":[3,15],\"509\":[4,61],\"510\":[3,12],\"511\":[3,40],\"512\":[3,24],\"513\":[3,12],\"514\":[2,9],\"515\":[3,4],\"516\":[4,10],\"517\":[3,14],\"518\":[3,24],\"519\":[3],\"520\":[4,10],\"521\":[3,14],\"522\":[4,11],\"523\":[3,57],\"524\":[4,30],\"525\":[3,25],\"526\":[3,57],\"527\":[3,14],\"528\":[3,14],\"529\":[3],\"530\":[3,6],\"531\":[4,6],\"532\":[3,14],\"533\":[2,48],\"534\":[3,32],\"535\":[3,34],\"536\":[3],\"537\":[3,56],\"538\":[3,21],\"539\":[5],\"540\":[4,6],\"541\":[4,9],\"542\":[4,47],\"543\":[3,11],\"544\":[4,31],\"545\":[4,4],\"546\":[4,40],\"547\":[2,10],\"548\":[1,24],\"549\":[1,17],\"550\":[1],\"551\":[2,16],\"552\":[2,8],\"553\":[2],\"554\":[1,26],\"555\":[2],\"556\":[2,29],\"557\":[3,74],\"558\":[5,39],\"559\":[5,81],\"560\":[3,8],\"561\":[3,29],\"562\":[2,188],\"563\":[3,3],\"564\":[3,72],\"565\":[2,141],\"566\":[3,24],\"567\":[3,333],\"568\":[3,22],\"569\":[3,120],\"570\":[3,18],\"571\":[3,13],\"572\":[3,151],\"573\":[4,20],\"574\":[3,52],\"575\":[3,8],\"576\":[3,126],\"577\":[4,5],\"578\":[2],\"579\":[2,2],\"580\":[2,2],\"581\":[null,null,1],\"582\":[null,null,3],\"583\":[2,2],\"584\":[2,2],\"585\":[2,2],\"586\":[null,null,1],\"587\":[null,null,3],\"588\":[2],\"589\":[2,2],\"590\":[2,2],\"591\":[null,null,2],\"592\":[null,null,3],\"593\":[2],\"594\":[2,2],\"595\":[2,2],\"596\":[null,null,2],\"597\":[null,null,3],\"598\":[2],\"599\":[2,2],\"600\":[2,2],\"601\":[null,null,2],\"602\":[null,null,3],\"603\":[2,4],\"604\":[2,2],\"605\":[2,2],\"606\":[null,null,2],\"607\":[null,null,3],\"608\":[2],\"609\":[2,2],\"610\":[2,2],\"611\":[null,null,1],\"612\":[null,null,3],\"613\":[2],\"614\":[2,2],\"615\":[2,2],\"616\":[null,null,1],\"617\":[null,null,3],\"618\":[1],\"619\":[1],\"620\":[1],\"621\":[1],\"622\":[1],\"623\":[1],\"624\":[1,3],\"625\":[1],\"626\":[2],\"627\":[2],\"628\":[1],\"629\":[1],\"630\":[1],\"631\":[1],\"632\":[1],\"633\":[1],\"634\":[1]},\"averageFieldLength\":[2.5514300578637976,23.53745669192874,0.7952285016734493],\"storedFields\":{\"0\":{\"h\":\"个人主页\"},\"1\":{\"h\":\"介绍页\",\"t\":[\"将你的个人介绍和档案放置在此处。\"]},\"2\":{\"h\":\"常用网站\"},\"3\":{\"h\":\"开发常用\"},\"4\":{\"h\":\"主要功能与配置演示\"},\"5\":{\"c\":[\"使用指南\"]},\"6\":{\"h\":\"布局与功能禁用\",\"t\":[\"你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。\",\"本页面就是一个示例，禁用了如下功能:\",\"导航栏\",\"侧边栏\",\"路径导航\",\"页面信息\",\"贡献者\",\"编辑此页链接\",\"更新时间\",\"上一篇/下一篇 链接\",\"评论\",\"页脚\",\"返回顶部按钮\"]},\"7\":{\"c\":[\"使用指南\"]},\"8\":{\"c\":[\"禁用\"]},\"9\":{\"h\":\"布局\",\"t\":[\"布局包括:\",\"导航栏\",\"侧边栏\",\"页脚\",\"同时每个页面包含:\",\"路径导航\",\"标题和页面信息\",\"TOC (文章标题列表)\",\"贡献者、更新时间等页面元信息\",\"评论\",\"主题也带有以下元素:\",\"夜间模式按钮\",\"返回顶部按钮\",\"打印按钮\",\"你可以在主题选项和页面的 frontmatter 中自定义它们。\"]},\"10\":{\"c\":[\"指南\"]},\"11\":{\"c\":[\"布局\"]},\"12\":{\"h\":\"Markdown 展示\",\"t\":[\"VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。\",\"你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。\"]},\"13\":{\"h\":\"Markdown 介绍\",\"t\":[\"如果你是一个新手，还不会编写 Markdown，请先阅读 Markdown 介绍 和 Markdown 演示。\"]},\"14\":{\"h\":\"Markdown 配置\",\"t\":[\"VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。\",\"相关信息\",\"Frontmatter 是 VuePress 中很重要的一个概念，如果你不了解它，你需要阅读 Frontmatter 介绍。\"]},\"15\":{\"h\":\"Markdown 扩展\",\"t\":[\"VuePress 会使用 markdown-it 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 语法扩展 。\"]},\"16\":{\"h\":\"VuePress 扩展\",\"t\":[\"为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。\",\"关于这些扩展，请阅读 VuePress 中的 Markdown 扩展。\"]},\"17\":{\"h\":\"主题扩展\",\"t\":[\"通过 vuepress-plugin-md-enhance，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。\"]},\"18\":{\"h\":\"提示容器\",\"t\":[\"安全的在 Markdown 中使用 {{ variable }}。\",\"自定义标题\",\"信息容器，包含 代码 与 链接。\",\"const a = 1; \",\"自定义标题\",\"提示容器\",\"自定义标题\",\"警告容器\",\"自定义标题\",\"危险容器\",\"自定义标题\",\"详情容器\",\"查看详情\"]},\"19\":{\"h\":\"代码块\",\"t\":[\"查看详情\"]},\"20\":{\"h\":\"上下角标\",\"t\":[\"19th H2O\",\"查看详情\"]},\"21\":{\"h\":\"自定义对齐\",\"t\":[\"我是居中的\",\"我在右对齐\",\"查看详情\"]},\"22\":{\"h\":\"Attrs\",\"t\":[\"一个拥有 ID 的 单词。\",\"查看详情\"]},\"23\":{\"h\":\"脚注\",\"t\":[\"此文字有脚注^first.\",\"查看详情\"]},\"24\":{\"h\":\"标记\",\"t\":[\"你可以标记 重要的内容 。\",\"查看详情\"]},\"25\":{\"h\":\"任务列表\",\"t\":[\"[x] 计划 1\",\"[ ] 计划 2\",\"查看详情\"]},\"26\":{\"h\":\"图片增强\",\"t\":[\"支持为图片设置颜色模式和大小\",\"查看详情\"]},\"27\":{\"h\":\"组件\"},\"28\":{\"c\":[\"使用指南\"]},\"29\":{\"c\":[\"Markdown\"]},\"30\":{\"h\":\"页面配置\",\"t\":[\"more 注释之前的内容被视为文章摘要。\"]},\"31\":{\"h\":\"页面标题\",\"t\":[\"The first H1 title in Markdown will be regarded as page title.\",\"Markdown 中的第一个 H1 标题会被视为页面标题。\",\"你可以在 Markdown 的 Frontmatter 中设置页面标题。\",\"--- title: 页面标题 --- \"]},\"32\":{\"h\":\"页面信息\",\"t\":[\"你可以在 Markdown 的 Frontmatter 中设置页面信息。\",\"作者设置为 Ms.Hope。\",\"写作日期为 2020 年 1 月 1 日\",\"分类为 “使用指南”\",\"标签为 “页面配置” 和 “使用指南”\"]},\"33\":{\"h\":\"页面内容\",\"t\":[\"你可以自由在这里书写你的 Markdown。\",\"图片引入\",\"你可以将图片和 Markdown 文件放置在一起使用相对路径进行引用。\",\"对于 .vuepress/public 文件夹的图片，请使用绝对链接 / 进行引用。\"]},\"34\":{\"h\":\"组件\",\"t\":[\"每个 Markdown 页面都会被转换为一个 Vue 组件，这意味着你可以在 Markdown 中使用 Vue 语法：\",\"{{ 1 + 1 }}\",\"{{ i }}\",\"你也可以创建并引入你自己的组件。\"]},\"35\":{\"c\":[\"使用指南\"]},\"36\":{\"c\":[\"页面配置\",\"使用指南\"]},\"37\":{\"h\":\"樱桃\"},\"38\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"39\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"40\":{\"c\":[\"樱桃\"]},\"41\":{\"c\":[\"红\",\"小\",\"圆\"]},\"42\":{\"h\":\"火龙果\"},\"43\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"44\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"45\":{\"c\":[\"火龙果\",\"水果\"]},\"46\":{\"c\":[\"红\",\"大\"]},\"47\":{\"h\":\"草莓\"},\"48\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"49\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"50\":{\"c\":[\"水果\",\"草莓\"]},\"51\":{\"c\":[\"红\",\"小\"]},\"52\":{\"h\":\"番茄\"},\"53\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"54\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"55\":{\"c\":[\"蔬菜\"]},\"56\":{\"c\":[\"红\",\"圆\"]},\"57\":{\"h\":\"01-Java基础语法\"},\"58\":{\"h\":\"1. 人机交互\"},\"59\":{\"h\":\"1.1 什么是cmd？\",\"t\":[\"就是在windows操作系统中，利用命令行的方式去操作计算机。 我们可以利用cmd命令去操作计算机，比如：打开文件，打开文件夹，创建文件夹等。\"]},\"60\":{\"h\":\"1.2 如何打开CMD窗口？\",\"t\":[\"按下快捷键：win + R。 此时会出现运行窗口。\",\"在运行窗口中输出cmd\",\"输出回车。 解惑：cmd默认操作C盘下的users文件夹下的XXX文件夹。（XXX就是计算机名） \"]},\"61\":{\"h\":\"1.3 常用CMD命令\",\"t\":[\"扩展一个小点： 在很多资料中都说成是DOS命令，其实是不对的。真正的DOS命令是1981年微软和IBM出品的MS-DOS操作系统中的命令才叫做DOS命令。 而在Windows中，win98之前的操作系统是以非图形化的DOS为基础的，可以叫做DOS命令。到了2000年以后，windows逐渐的以图形化界面为主了，这个时候就不能叫DOS命令了，他只是模拟了DOS环境而已，很多的原本的DOS命令已经无法使用了，所以这个时候叫做CMD命令会更准确一些。\",\"常见的CMD命令如下：\",\"操作\",\"说明\",\"盘符名称:\",\"盘符切换。E:回车，表示切换到E盘。\",\"dir\",\"查看当前路径下的内容。\",\"cd 目录\",\"进入单级目录。cd itheima\",\"cd ..\",\"回退到上一级目录。\",\"cd 目录1\\\\目录2...\",\"进入多级目录。cd itheima\\\\JavaSE\",\"cd \\\\\",\"回退到盘符目录。\",\"cls\",\"清屏。\",\"exit\",\"退出命令提示符窗口。\"]},\"62\":{\"h\":\"1.4 CMD练习\",\"t\":[\"需求：\",\"利用cmd命令打开自己电脑上的QQ。\",\"完成步骤：\",\"1,确定自己电脑上的QQ安装在哪里 2,启动cmd 3,进入到启动程序QQ.exe所在的路径。 4,输出qq.exe加回车表示启动qq。 \",\"解惑：\",\"​ 在windows操作系统当中，文件名或者文件夹名是忽略大小写的。\"]},\"63\":{\"h\":\"1.5 环境变量\",\"t\":[\"作用：\",\"​ 如果我想要在CMD的任意目录下，都可以启动某一个软件，那么就可以把这个软件的路径配置到环境变量中的PATH里面。\",\"​ 在启动软件的时候，操作系统会先在当前路径下找，如果在当前录课没有再到环境变量的路径中去找。如果都找不到就提示无法启动。\",\"步骤：\",\"右键我的电脑，选择属性。\",\"点击左侧的高级系统设置\",\"选择高级，再点击下面的环境变量。\",\"找系统变量里面的PATH\",\"把软件的完整路径，配置到PATH当中就可以了。\",\"（可做可不做）就是把自己配置的路径，移动到最上面。\",\"图解示例如下：\",\"第一步：右键点击我的电脑并选择属性。\",\"（如果无法出现第二步界面，可以打开我的电脑之后右键点击空白处）\",\"image-20210923091350952\",\"第二步：点击高级系统设置。\",\"​ \",\"第三步：选择高级，再点击下面的环境变量。\",\"image-20210923091350952\",\"第四步：找系统变量里面的PATH\",\"image-20210923091350952\",\"第五步：点击新建，把软件的完整路径，配置到PATH当中，再点击确定即可。\",\"第六步：（可做可不做）点击上移，把当前配置的路径移动到最上面。\",\"移动的好处：在CMD中打开软件时，会先找当前路径，再找环境变量，在环境变量中是从上往下依次查找的，如果路径放在最上面查找的速度比较快。\",\"image-20210923091350952\"]},\"64\":{\"h\":\"2. Java概述\"},\"65\":{\"h\":\"1.1 Java是什么？\",\"t\":[\"语言：人与人交流沟通的表达方式\",\"计算机语言：人与计算机之间进行信息交流沟通的一种特殊语言\",\"Java是一门非常火的计算机语言。（也叫做编程语言）\",\"我们想要让计算机做一些事情，那么就可以通过Java语言告诉计算机就可以了\"]},\"66\":{\"h\":\"1.2下载和安装\"},\"67\":{\"h\":\"1.2.1 下载\",\"t\":[\"通过官方网站获取JDK\",\"http://www.oracle.com\",\"注意1：针对不同的操作系统，需要下载对应版本的JDK。\",\"注意2：\",\"​ 如果你的电脑是windows32位的，建议重装系统，重装成64位的操作系统。\",\"​ 因为Java从9版本开始，就已经不提供32位版本的安装包了。\",\"​ 如果自己不愿意下载，到今天day01资料文件中，也有对应的安装包。\"]},\"68\":{\"h\":\"1.2.2 安装\",\"t\":[\"​ 傻瓜式安装，下一步即可。默认的安装路径是在C:\\\\Program Files下。\",\"建议：\",\"安装路径不要有中文，不要有空格等一些特殊的符号。\",\"以后跟开发相关的所有软件建议都安装在同一个文件夹中，方便管理。\"]},\"69\":{\"h\":\"1.2.3 JDK的安装目录介绍\",\"t\":[\"目录名称\",\"说明\",\"bin\",\"该路径下存放了JDK的各种工具命令。javac和java就放在这个目录。\",\"conf\",\"该路径下存放了JDK的相关配置文件。\",\"include\",\"该路径下存放了一些平台特定的头文件。\",\"jmods\",\"该路径下存放了JDK的各种模块。\",\"legal\",\"该路径下存放了JDK各模块的授权文档。\",\"lib\",\"该路径下存放了JDK工具的一些补充JAR包。\"]},\"70\":{\"h\":\"1.3 HelloWorld小案例\",\"t\":[\"​ HelloWorld案例是指在计算机屏幕上输出“HelloWorld”这行文字。各种计算机语言都习惯使用该案例作为第一个演示案例。\"]},\"71\":{\"h\":\"2.3.1 Java程序开发运行流程\",\"t\":[\"开发Java程序，需要三个步骤：编写程序，编译程序，运行程序。\"]},\"72\":{\"h\":\"2.3.2 HelloWorld案例的编写\",\"t\":[\"新建文本文档文件，修改名称为HelloWorld.java。\",\"注意：后缀名为java的才是java文件。\",\"用记事本打开HelloWorld.java文件，输写程序内容。\",\"注意：代码要跟我编写的完全保持一致。\",\"public class HelloWorld { public static void main(String[] args) { System.out.println(\\\"HelloWorld\\\"); } } \",\"保存\",\"注意：未保存的文件在左上角会有*符号标记\",\"编译文件。编译后会产生一个class文件。\",\"java文件：程序员自己编写的代码。\",\"class文件：交给计算机执行的文件。\",\"运行代码\",\"注意：运行的是编译之后的class文件。\",\"用到两个命令：\",\"​ javac + 文件名 + 后缀名 （就是编译java文件）\",\"​ java + 文件名（运行编译之后的class文件）\"]},\"73\":{\"h\":\"1.4 HelloWorld案例常见问题\"},\"74\":{\"h\":\"1.4.1 BUG\",\"t\":[\"​ 在电脑系统或程序中，隐藏着的一些未被发现的缺陷或问题统称为bug（漏洞）。\"]},\"75\":{\"h\":\"1.4.2 BUG的解决\",\"t\":[\"具备识别BUG的能力：多看\",\"具备分析BUG的能力：多思考，多查资料\",\"具备解决BUG的能力：多尝试，多总结\"]},\"76\":{\"h\":\"1.4.3 HelloWorld常见问题\",\"t\":[\"1、非法字符问题。Java中的符号都是英文格式的。\",\"2、大小写问题。Java语言对大小写敏感（区分大小写）。\",\"3、在系统中显示文件的扩展名，避免出现HelloWorld.java.txt文件。\",\"4、编译命令后的java文件名需要带文件后缀.java\",\"5、运行命令后的class文件名（类名）不带文件后缀.class\",\"...\"]},\"77\":{\"h\":\"常见错误代码1：\",\"t\":[\"publicclass HelloWorld{ public static void main(String[] args){ System.out.println(\\\"HelloWorld\\\"); } } \",\"问题：\",\"​ public和class之间缺少一个空格。\",\"技巧：一般来讲在单词之间的空格是不能省略的。\",\"​ 如果是单词和符号之间的空格是可以省略的。\"]},\"78\":{\"h\":\"常见错误代码2：\",\"t\":[\"public class HelloWorld{ public static void main(String[] args){ system.out.println(\\\"HelloWorld\\\"); } } \",\"问题：\",\"​ system首字母必须大写。\",\"技巧：\",\"​ Java代码中，是严格区分大小写的。\",\"​ 所以该大写的地方一定要大写，该小写的地方一定要小写。多多练习。\"]},\"79\":{\"h\":\"常见错误代码3：\",\"t\":[\"public class HelloWorld{ public static void main(String[] args){ System.out.println(HelloWorld); } } \",\"问题：\",\"​ 第三行代码中的HelloWorld必须用双引号引起来，否则就会出现问题。\"]},\"80\":{\"h\":\"常见错误代码4：\",\"t\":[\"public class HelloWorld{ public static void main(String[] args){ System.out.println(\\\"HelloWorld\\\")； } } \",\"问题：\",\"​ 在以后代码当中，所有的标点符号必须是英文状态下的。\",\"技巧：\",\"​ 可以在输入法中进行对应的设置。\"]},\"81\":{\"h\":\"1.5 环境变量\"},\"82\":{\"h\":\"1.5.1 为什么配置环境变量\",\"t\":[\"​ 开发Java程序，需要使用JDK提供的开发工具（比如javac.exe、java.exe等命令），而这些工具在JDK的安装目录的bin目录下，如果不配置环境变量，那么这些命令只可以在bin目录下使用，而我们想要在任意目录下都能使用，所以就要配置环境变量。\",\"注意：现在最新从官网上下载的JDK安装时会自动配置javac、java命令的路径到Path环境变量中去 ，所以javac、java可以直接使用。\"]},\"83\":{\"h\":\"1.5.2配置方式\",\"t\":[\"image-20210923091654365\",\"以前下载的老版本的JDK是没有自动配置的，而且自动配置的也只包含了4个工具而已，所以我们需要删掉已经配置完毕的，再次重新配置Path环境变量。\",\"①JAVA_HOME：告诉操作系统JDK安装在了哪个位置（未来其他技术要通过这个找JDK）\",\"image-20210923091710450\",\"②Path：告诉操作系统JDK提供的javac(编译)、java(执行)命令安装到了哪个位置\",\"image-20210923091721035\"]},\"84\":{\"h\":\"1.5.3win10的bug\",\"t\":[\"当电脑重启之后，环境变量失效了。表示操作系统不支持自定义的环境变量。\",\"步骤：\",\"还是要配置JAVA_HOME给以后的相关软件去使用\",\"我们可以把java和javac的完整路径配置到PATH当中。\",\"E:\\\\develop\\\\JDK\\\\bin\"]},\"85\":{\"h\":\"1.6 Notepad++\"},\"86\":{\"h\":\"1.6.1下载\",\"t\":[\"​ 打开百度，搜索一下notepad++就可以了。\",\"​ day01的资料文件夹里面也有对应的安装包。\"]},\"87\":{\"h\":\"1.6.2 安装\",\"t\":[\"傻瓜式安装，直接点击下一步就可以了。\",\"​ 对安装路径有两个小建议：\",\"路径不要有中文，不要有空格，不要有一些特殊符号\",\"建议最好把所有的跟开发相关的软件都放在一起，方便管理。\"]},\"88\":{\"h\":\"1.6.3 设置\",\"t\":[\"​ 右键点击java文件，选择edit with notepad++。\",\"​ 点击设置，再点击首选项。在弹出的页面当中，左侧选择新建，中间选择Java，右侧选择ANSI。\"]},\"89\":{\"h\":\"1.6.4 练习\",\"t\":[\"​ 利用notepad++去编写一个HelloWorld并能成功编译和运行。\"]},\"90\":{\"h\":\"1.7 Java语言的发展\",\"t\":[\"三个版本：\",\"Java5.0：这是Java的第一个大版本更新。\",\"Java8.0：这个是目前绝大数公司正在使用的版本。因为这个版本最为稳定。\",\"Java15.0：这个是我们课程中学习的版本。\",\"解惑：\",\"​ 我们学的跟工作中使用的版本不太一样啊。会不会影响以后工作呢？\",\"向下兼容。新的版本只是在原有的基础上添加了一些新的功能而已。\",\"举例：\",\"用8版本开发的代码，用11版本能运行吗？必须可以的。\",\"用11版本开发的代码，用8版本能运行吗？不一定。\",\"如果11版本开发的代码，没有用到9~11的新特性，那么用8是可以运行的。\",\"如果11版本开发的代码，用到了9~11的新特性，那么用8就无法运行了。\"]},\"91\":{\"h\":\"1.8 Java的三大平台\",\"t\":[\"​ JavaSE、JavaME、JavaEE\"]},\"92\":{\"h\":\"1.8.1 JavaSE\",\"t\":[\"​ 是其他两个版本的基础。\"]},\"93\":{\"h\":\"1.8.2 JavaME\",\"t\":[\"​ Java语言的小型版，用于嵌入式消费类电子设备或者小型移动设备的开发。\",\"​ 其中最为主要的还是小型移动设备的开发（手机）。渐渐的没落了，已经被安卓和IOS给替代了。\",\"​ 但是，安卓也是可以用Java来开发的。\"]},\"94\":{\"h\":\"1.8.3 JavaEE\",\"t\":[\"​ 用于Web方向的网站开发。（主要从事后台服务器的开发）\",\"​ 在服务器领域，Java是当之无愧的龙头老大。\"]},\"95\":{\"h\":\"1.9 Java的主要特性\",\"t\":[\"面向对象\",\"安全性\",\"多线程\",\"简单易用\",\"开源\",\"跨平台\"]},\"96\":{\"h\":\"1.9.1 Java语言跨平台的原理\",\"t\":[\"操作系统本身其实是不认识Java语言的。\",\"但是针对于不同的操作系统，Java提供了不同的虚拟机。\",\"虚拟机会把Java语言翻译成操作系统能看得懂的语言。\",\"image-20210923091350952\"]},\"97\":{\"h\":\"1.10 JRE和JDK\",\"t\":[\"image-20210923091544110\",\"JVM（Java Virtual Machine），Java虚拟机\",\"JRE（Java Runtime Environment），Java运行环境，包含了JVM和Java的核心类库（Java API）\",\"JDK（Java Development Kit）称为Java开发工具，包含了JRE和开发工具\",\"总结：我们只需安装JDK即可，它包含了java的运行环境和虚拟机。\",\"总结：\",\"JDK是什么？有哪些内容组成？\",\"JDK是Java的开发工具包，主要包含以下三个部分：\",\"JVM虚拟机：Java程序真正运行的地方\",\"核心类库：Java已经写好的东西，我们可以直接使用的\",\"开发工具：javac、java、jdb、jhat\",\"JRE是什么？有哪些不容组成？\",\"JRE是Java的运行环境，主要包含以下三个部分：\",\"JVM\",\"核心类库\",\"运行工具\",\"JDK、JRE、JVM三者的包含关系：\",\"JDK包含了JRE\",\"JRE包含了JVM\"]},\"98\":{\"h\":\"02-Java基础语法\"},\"99\":{\"h\":\"1. 注释\",\"t\":[\"​ 注释是对代码的解释和说明文字。\",\"Java中的注释分为三种：\",\"单行注释：\",\"// 这是单行注释文字 \",\"多行注释：\",\"/* 这是多行注释文字 这是多行注释文字 这是多行注释文字 */ 注意：多行注释不能嵌套使用。 \",\"文档注释（暂时用不到）：\",\"/** 这是多行注释文字 这是多行注释文字 这是多行注释文字 */ \"]},\"100\":{\"h\":\"使用的技巧\",\"t\":[\"​ 如果我们要对代码进行解释，那么就可以使用注释。\",\"​ 当注释的内容比较少，一行就写完了，可以用单行注释。\",\"​ 如果注释的内容比较多，需要写在多行，那么可以使用多行注释。\"]},\"101\":{\"h\":\"注意点\",\"t\":[\"​ 注释的内容不会参与编译和运行的，仅仅是对代码的解释说明而已。\",\"​ 所以，不管在注释当中写什么内容，都不会影响代码运行的结果。\",\"总结：\",\"什么是注释？注释就是对代码进行解释说明的文字\",\"注释的分类？单行注释、多行注释、文档注释\",\"注释的使用细节？ \",\"注释内容不会参与编译和运行，仅仅是对代码的解释说明\",\"不管是单行注释还是多行注释，在书写的时候都不要进行嵌套\"]},\"102\":{\"h\":\"2. 关键字\"},\"103\":{\"h\":\"2.1 概念\",\"t\":[\"​ 被Java赋予了特定含义的英文单词。\",\"​ 当我们在代码中写了关键字之后，程序在运行的时候，就知道要做什么事情了。\",\"注意：关键字很多，不用刻意去记。\",\"abstract\",\"assert\",\"boolean\",\"break\",\"byte\",\"case\",\"catch\",\"char\",\"class\",\"const\",\"continue\",\"default\",\"do\",\"double\",\"else\",\"enum\",\"extends\",\"final\",\"finally\",\"float\",\"for\",\"goto\",\"if\",\"implements\",\"import\",\"instanceof\",\"int\",\"interface\",\"long\",\"native\",\"new\",\"package\",\"private\",\"protected\",\"public\",\"return\",\"strictfp\",\"short\",\"static\",\"super\",\"switch\",\"synchronized\",\"this\",\"throw\",\"throws\",\"transient\",\"try\",\"void\",\"volatile\",\"while\",\"什么是关键字？被Java赋予特定含义的英文单词\",\"关键字的特点？关键字全部小写，在编辑器中一般都有特殊的颜色标记，非常的直观\",\"class关键字是什么意思？class关键字表示定义一个类，后面跟上的是类名\"]},\"104\":{\"h\":\"2.2 第一个关键字class\",\"t\":[\"​ 表示定义一个类。创建一个类。\",\"类：Java项目最基本的组成单元，一个完整的Java项目有可能会有成千上万个类来组成的。\",\"class后面跟随的就是这个类的名字，简称：类名。\",\"在类名后面会有一对大括号，表示这个类的内容。\",\"举例：\",\"public class HelloWorld{} \",\"解释：class表示定义类。\",\"​ 类名：HelloWorld\",\"​ HelloWorld后面的大括号表示这个类的范围。\"]},\"105\":{\"h\":\"3. 字面量\",\"t\":[\"作用：告诉程序员，数据在程序中的书写格式。\",\"字面量类型\",\"说明\",\"程序中的写法\",\"整数\",\"不带小数的数字\",\"666，-88\",\"小数\",\"带小数的数字\",\"13.14，-5.21\",\"字符\",\"必须使用单引号，有且仅能一个字符\",\"‘A’，‘0’， ‘我’\",\"字符串\",\"必须使用双引号，内容可有可无\",\"“HelloWorld”，“黑马程序员”\",\"布尔值\",\"布尔值，表示真假，只有两个值：true，false\",\"true 、false\",\"空值\",\"一个特殊的值，空值\",\"值是：null\",\"public class Demo { public static void main(String[] args) { System.out.println(10); // 输出一个整数 System.out.println(5.5); // 输出一个小数 System.out.println('a'); // 输出一个字符 System.out.println(true); // 输出boolean值true System.out.println(\\\"欢迎来到黑马程序员\\\"); // 输出字符串 } } \"]},\"106\":{\"h\":\"区分技巧\",\"t\":[\"不带小数点的数字都是整数类型的字面量。\",\"只要带了小数点，那么就是小数类型的字面量。\",\"只要用双引号引起来的，不管里面的内容是什么，不管里面有没有内容，都是字符串类型的字面量。\",\"字符类型的字面量必须用单引号引起来，不管内容是什么，但是个数有且只能有一个。\",\"字符类型的字面量只有两个值，true、false。\",\"空类型的字面量只有一个值，null。\",\"注意：null不能直接打印，只能打印“null”字符串\",\"还有一些特殊字符需要注意：\",\"\\\\t：制表符\",\"\\\\r：在打印的时候，把前面字符串的长度补齐到8，或者是8的整数倍。最少补一个空格，最多补8个空格\",\"n：\",\"总结：\",\"什么是字面量？告诉程序员：数据在程序中的书写格式\",\"Java中字面量的分类？整数、小数、字符串、字符、布尔、空\",\"一些特殊字面量的书写\",\"制表符：\\\\t\",\"空类型：null\"]},\"107\":{\"h\":\"4. 变量\"},\"108\":{\"h\":\"4.1 什么是变量？\",\"t\":[\"​ 变量就在程序中临时存储数据的容器。但是这个容器中只能存一个值。\"]},\"109\":{\"h\":\"4.2 变量的定义格式\",\"t\":[\"​ 数据类型 变量名 = 数据值；\"]},\"110\":{\"h\":\"4.2.1 格式详解\",\"t\":[\"​ 数据类型：限定了变量当中能存储什么类型的数据。\",\"​ 如果要存10，那么数据类型就需要写整数类型。\",\"​ 如果要存10.0，那么数据类型就需要写小数类型。\",\"​ 变量名：其实就是这个容器的名字。\",\"​ 当以后想要使用变量里面的数据时，直接使用变量名就可以了。\",\"​ 数据值：真正存储在容器中的数据。\",\"​ 分号：表示语句的结束，就跟以前写作文时候的句号是一样的。\"]},\"111\":{\"h\":\"4.2.2 常用的数据类型\",\"t\":[\"​ 整数：int\",\"​ 小数：（浮点数）double\",\"​ 其他数据类型稍后讲解\",\"举例：\",\"public class VariableDemo{ public static void main(String[] args){ //定义一个整数类型的变量 //数据类型 变量名 = 数据值; int a = 16; System.out.println(a);//16 //定义一个小数类型的变量 double b = 10.1; System.out.println(b);//10.1 } } \"]},\"112\":{\"h\":\"4.2.3 变量的注意事项\",\"t\":[\"变量名不能重复\",\"在一条语句中，可以定义多个变量。但是这种方式影响代码的阅读，所以了解一下即可。\",\"变量在使用之前必须要赋值。\",\"只能存一个值\",\"变量的作用域\",\"案例：\",\"public class VariableDemo2{ public static void main(String[] args){ //1.变量名不允许重复 //int a = 10; //int a = 20; //System.out.println(a); //2.一条语句可以定义多个变量 //了解。 //int a = 10, b = 20, c = 20,d = 20; //System.out.println(a);//? //System.out.println(b);//? //3.变量在使用之前必须要赋值 int a = 30; System.out.println(a); } } \"]},\"113\":{\"h\":\"4.3 变量的练习\",\"t\":[\"​ 需求：说出公交车到终点站之后，车上一共有多少乘客？\",\"​ 一开始没有乘客。\",\"​ 第一站：上去一位乘客，没有下来乘客。\",\"​ 第二站：上去两位乘客，下来一位乘客。\",\"​ 第三站：上去两位乘客，下来一位乘客。\",\"​ 第四站：没有上去乘客，下来一位乘客。\",\"​ 第五站：上去一位乘客，没有下来乘客。\",\"​ 问：到了终点站之后，车上一共多少乘客？\",\"​ 代码解析：\",\"public class VariableTest1{ //主入口 public static void main(String[] args){ //一开始没有乘客。 int count = 0; //第一站：上去一位乘客 //在原有的基础上 + 1 count = count + 1; //System.out.println(count); //第二站：上去两位乘客，下来一位乘客 count = count + 2 - 1; //第三站：上去两位乘客，下来一位乘客 count = count + 2 - 1; //第四站：下来一位乘客 count = count - 1; //第五站：上去一位乘客 count = count + 1; //请问：到了终点站，车上一共几位乘客。 System.out.println(count);//3 } } \",\"总结：\",\"定义格式：数据类型 变量名 = 数据值；\",\"使用变量： \",\"输出打印\",\"参与计算\",\"修改记录的值\",\"使用场景 \",\"重复使用某个值\",\"某个数据经常发生改变\",\"注意事项 \",\"变量只能存储一个值\",\"变量名不能重复\",\"一条语句可以定义多个变量（了解）\",\"使用之前一定要赋值（建议声明变量和赋值在一起完成）\"]},\"114\":{\"h\":\"5. 数据类型\"},\"115\":{\"h\":\"5.1 Java语言数据类型的分类\",\"t\":[\"基本数据类型\",\"引用数据类型（面向对象的时候再深入学习）\"]},\"116\":{\"h\":\"5.2 基本数据类型的四类八种\",\"t\":[\"数据类型\",\"关键字\",\"内存占用\",\"取值范围\",\"整数\",\"byte\",\"1\",\"负的2的7次方 ~ 2的7次方-1(-128~127)\",\"short\",\"2\",\"负的2的15次方 ~ 2的15次方-1(-32768~32767)\",\"int\",\"4\",\"负的2的31次方 ~ 2的31次方-1\",\"long\",\"8\",\"负的2的63次方 ~ 2的63次方-1\",\"浮点数\",\"float\",\"4\",\"1.401298e-45 ~ 3.402823e+38\",\"double\",\"8\",\"4.9000000e-324 ~ 1.797693e+308\",\"字符\",\"char\",\"2\",\"0-65535\",\"布尔\",\"boolean\",\"1\",\"true，false\"]},\"117\":{\"h\":\"说明\",\"t\":[\"​ e+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方。\",\"​ 在java中整数默认是int类型，浮点数默认是double类型。\"]},\"118\":{\"h\":\"需要记忆以下几点\",\"t\":[\"byte类型的取值范围：\",\"​ -128 ~ 127\",\"int类型的大概取值范围：\",\"​ -21亿多 ~ 21亿多\",\"整数类型和小数类型的取值范围大小关系：\",\"​ double > float > long > int > short > byte\",\"最为常用的数据类型选择：\",\"在定义变量的时候，要根据实际的情况来选择不同类型的变量。\",\"比如：人的年龄，可以选择byte类型。\",\"比如：地球的年龄，可以选择long类型。\",\"如果整数类型中，不太确定范围，那么默认使用int类型。\",\"如果小数类型中，不太确定范围，那么默认使用double类型。\",\"如果要定义字符类型的变量，那么使用char\",\"如果要定义布尔类型的变量，那么使用boolean\"]},\"119\":{\"h\":\"5.3 定义8种基本数据类型变量\",\"t\":[\"public class VariableDemo3{ public static void main(String[] args){ //1.定义byte类型的变量 //数据类型 变量名 = 数据值; byte a = 10; System.out.println(a); //2.定义short类型的变量 short b = 20; System.out.println(b); //3.定义int类型的变量 int c = 30; System.out.println(c); //4.定义long类型的变量 long d = 123456789123456789L; System.out.println(d); //5.定义float类型的变量 float e = 10.1F; System.out.println(e); //6.定义double类型的变量 double f = 20.3; System.out.println(f); //7.定义char类型的变量 char g = 'a'; System.out.println(g); //8.定义boolean类型的变量 boolean h = true; System.out.println(h); } } \"]},\"120\":{\"h\":\"\",\"t\":[\"如果要定义一个整数类型的变量，不知道选择哪种数据类型了，默认使用int。\",\"如果要定义一个小数类型的变量，不知道选择哪种数据类型了，默认使用double。\",\"如果要定义一个long类型的变量，那么在数据值的后面需要加上L后缀。（大小写都可以，建议大写。）\",\"如果要定义一个float类型的变量，那么在数据值的后面需要加上F后缀。（大小写都可以）\",\"总结：\",\"Java语言的数据类型分为：基本数据类型、引用数据类型\",\"基本数据类型的四类八种：\",\"整数 byte、short、int、long\",\"浮点数 float、double\",\"字符 char\",\"布尔 boolean\",\"byte的取值范围：-128~127\",\"整数和小数的取值范围大小关系：double > float > long > int > short > byte\",\"long类型的变量：需要在末尾加上L标识符（大小写都可，建议大写）\",\"float类型的变量：需要在末尾加上F标识符（大小写都可，建议大写）\"]},\"121\":{\"h\":\"5.4 练习1\",\"t\":[\"需求：定义5个变量记录老师的信息并打印\",\"代码示例：\",\"public class VariableTest1{ public static void main(String[] args){ //1.定义字符串类型的变量记录老师的姓名 String name = \\\"黑马谢广坤\\\"; //2.定义整数类型的变量记录老师的年龄 int age = 18; //3.定义字符类型的变量记录老师的性别 char gender = '男'; //4.定义小数类型的变量记录老师的身高 double height = 180.1; //5.定义布尔类型的变量记录老师的婚姻状况 boolean flag = true; //输出5个变量的值 System.out.println(name); System.out.println(age); System.out.println(gender); System.out.println(height); System.out.println(flag); } } \"]},\"122\":{\"h\":\"5.5 练习2\",\"t\":[\"需求：将（电影名称，主演，年份，评分）四个信息选择不同类型的变量，随后打印出来。\",\"代码示例：\",\"public class VariableTest2{ public static void main(String[] args){ //1.定义字符串变量记录电影的名称 String movie = \\\"送初恋回家\\\"; //2.定义三个变量记录主演的名字 String name1 = \\\"刘鑫\\\"; String name2 = \\\"张雨提\\\"; String name3 = \\\"高媛\\\"; //3. 定义整数类型的变量记录年龄的年份 int year = 2020; //4.定义小数类型的变量记录电影的评分 double score = 9.0; //打印变量的信息 System.out.println(movie); System.out.println(name1); System.out.println(name2); System.out.println(name3); System.out.println(year); System.out.println(score); } } \"]},\"123\":{\"h\":\"5.6 练习3\",\"t\":[\"需求：选择其中一部手机，将（手机价格，手机品牌）两个信息选择不同类型的变量，随后打印出来。\",\"代码示例：\",\"public class VariableTest3{ public static void main(String[] args){ //1.定义小数类型的变量记录手机的价格 double price = 5299.0; //2.定义字符串类型的变量记录手机的品牌 String brand = \\\"华为\\\"; //输出变量记录的值 System.out.println(price); System.out.println(brand); } } \"]},\"124\":{\"h\":\"6. 标识符\",\"t\":[\"业内大多数程序员都在遵守阿里巴巴的命名规则。\",\"在day02的资料文件夹中有。\"]},\"125\":{\"h\":\"6.1 硬性要求：\",\"t\":[\"必须要这么做，否则代码会报错。\",\"必须由数字、字母、下划线_、美元符号$组成。\",\"数字不能开头\",\"不能是关键字\",\"区分大小写的\"]},\"126\":{\"h\":\"6.2 软性建议：\",\"t\":[\"如果不这么做，代码不会报错，但是会让代码显得比较low。\"]},\"127\":{\"h\":\"6.2.1 小驼峰命名法\",\"t\":[\"适用于变量名和方法名\",\"如果是一个单词，那么全部小写，比如：name\",\"如果是多个单词，那么从第二个单词开始，首字母大写，比如：firstName、maxAge\"]},\"128\":{\"h\":\"6.2.2 大驼峰命名法\",\"t\":[\"适用于类名\",\"如果是一个单词，那么首字母大写。比如：Demo、Test。\",\"如果是多个单词，那么每一个单词首字母都需要大写。比如：HelloWorld\",\"不管起什么名字，都要做到见名知意。\"]},\"129\":{\"h\":\"阿里巴巴命名规范细节：\",\"t\":[\"尽量不要用拼音。但是一些国际通用的拼音可视为英文单词。\",\"正确：alibaba、hangzhou、nanjing\",\"错误：jiage、dazhe\",\"平时在给变量名、方法名、类名起名字的时候，不要使用下划线或美元符号。\",\"错误：_name\",\"正确：name\"]},\"130\":{\"h\":\"7. 键盘录入\",\"t\":[\"键盘录入的实际功能Java已经帮我们写好了，不需要我们自己再实现了，而Java写好的功能都放在了Scanner这个类中，所以，我们只要直接使用Scanner这个类就可以了。\",\"使用步骤：\",\"第一步：导包：其实就是表示先找到Scanner这个类在哪。\",\"第二步：创建对象：其实就表示申明一下，我准备开始用Scanner这个类了。\",\"第三步：接收数据：也是真正干活的代码。\",\"代码示例：\",\"//导包，其实就是先找到Scanner这个类在哪 import java.util.Scanner; public class ScannerDemo1{ public static void main(String[] args){ //2.创建对象，其实就是申明一下，我准备开始用Scanner这个类了。 Scanner sc = new Scanner(System.in); //3.接收数据 //当程序运行之后，我们在键盘输入的数据就会被变量i给接收了 System.out.println(\\\"请输入一个数字\\\"); int i = sc.nextInt(); System.out.println(i); } } \"]},\"131\":{\"h\":\"8. IDEA\"},\"132\":{\"h\":\"8.1 IDEA概述\",\"t\":[\"IDEA全称IntelliJ IDEA，是用于Java语言开发的集成环境，它是业界公认的目前用于Java程序开发最好的工具。\",\"集成环境：\",\"把代码编写，编译，执行，调试等多种功能综合到一起的开发工具。\"]},\"133\":{\"h\":\"8.2 IDEA的下载和安装\"},\"134\":{\"h\":\"8.2.1 下载\",\"t\":[\"可以到官方网站自行下载，网址为：https://www.jetbrains.com/idea\",\"今天的资料中，对应的安装包也提高给大家了。\"]},\"135\":{\"h\":\"8.2.2 安装\",\"t\":[\"到资料文件夹中，双击安装包。\",\"点击next，准备安装\",\"计算机发展\",\"点击Browse修改安装路径。\",\"修改完毕点击next\",\"计算机发展\",\"勾选64-bit launcher。表示在桌面新建一个64位的快捷方式。\",\"其他的不要勾选。\",\"点击next。\",\"计算机发展\",\"点击Install，准备安装。\",\"计算机发展\",\"等进度条读取完毕之后，会有最终界面提示。\",\"点击finish即可。\",\"计算机发展\",\"第一次启动会询问，是否导入一些设置。\",\"选择第二个不导入，保持默认设置，再点击OK。\",\"计算机发展\",\"选择背景主题\",\"左边是黑色背景。右边是白色背景。\",\"这个可以根据自己的喜好来选择。\",\"选择完毕点击右下角的next\",\"计算机发展\",\"在本界面让我们购买idea。\",\"因为我们是学习阶段，所以可以使用免费使用30天。\",\"点击第一排第二个。Evaluate for free\",\"计算机发展\",\"点击蓝色的Evaluate，就可以开始免费试用30天了。\",\"计算机发展\",\"当看到这个界面，就表示idea已经成功安装完毕\",\"可以点击右上角关闭。\",\"计算机发展\"]},\"136\":{\"h\":\"8.3 IDEA中层级结构介绍\"},\"137\":{\"h\":\"8.3.1 结构分类\",\"t\":[\"project（项目、工程）\",\"module（模块）\",\"package（包）\",\"class（类）\"]},\"138\":{\"h\":\"8.3.2 结构介绍\",\"t\":[\"为了让大家更好的吸收，package这一层级，我们后面再学习，先学习最基础的project、module、class。\"]},\"139\":{\"h\":\"project（项目、工程）\",\"t\":[\"淘宝、京东、黑马程序员网站都属于一个个项目，IDEA中就是一个个的Project。\"]},\"140\":{\"h\":\"module（模块）\",\"t\":[\"​ 在一个项目中，可以存放多个模块，不同的模块可以存放项目中不同的业务功能代码。在黑马程序员的官方网站中，至少包含了以下模块：\",\"论坛模块\",\"报名、咨询模块\",\"为了更好的管理代码，我们会把代码分别放在两个模块中存放。\"]},\"141\":{\"h\":\"package（包）\",\"t\":[\"​ 一个模块中又有很多的业务，以黑马程序员官方网站的论坛模块为例，至少包含了以下不同的业务。\",\"发帖\",\"评论\",\"为了把这些业务区分的更加清楚，就会用包来管理这些不同的业务。\"]},\"142\":{\"h\":\"class（类）\",\"t\":[\"​ 就是真正写代码的地方。\"]},\"143\":{\"h\":\"8.3.3 小结\",\"t\":[\"层级关系\",\"​ project - module - package - class\",\"包含数量\",\"​ project中可以创建多个module ​ module中可以创建多个package ​ package中可以创建多个class\",\"​ 这些结构的划分，是为了方便管理类文件的。\"]},\"144\":{\"h\":\"8.4 IDEA中的第一个代码\"},\"145\":{\"h\":\"8.4.1 操作步骤\",\"t\":[\"创建Project 项目\",\"创建Module 模块\",\"创建class 类\",\"在类中编写代码\",\"完成编译运行\"]},\"146\":{\"h\":\"8.4.2 分步图解\",\"t\":[\"双击启动图标\",\"计算机发展\",\"首先要新建一个项目\",\"点击creat new project\",\"计算机发展\",\"我们要从0开始写代码，所以新建一个空的什么都没有的项目。\",\"点击左下方的Empty Project\",\"再点击右下角的next\",\"计算机发展\",\"输入项目的名称\",\"输入项目的存放路径\",\"计算机发展\",\"点击ok。idea会帮助我们在本地创建一个项目文件夹\",\"计算机发展\",\"点击Module，准备新建一个模块\",\"计算机发展\",\"点击+\",\"再点击New Module\",\"计算机发展\",\"我们要编写Java代码，所以要新建一个Java模块。\",\"点击Java\",\"再点击右下角的next\",\"计算机发展\",\"输入模块的名称\",\"再点击右下角的Next\",\"计算机发展\",\"成功新建一个模块之后，中间就会出现刚刚新建的模块\",\"点击右下角的OK\",\"计算机发展\",\"回到主界面\",\"展开刚刚新建的模块\",\"右键点击src，选择New，选择Java Class\",\"计算机发展\",\"输入类名\",\"再按回车\",\"计算机发展\",\"由于字体比较小\",\"所以，我们要设置一下字体。\",\"点击File，选择Setting。\",\"计算机发展\",\"搜索一下font\",\"在右边可以输入Size的数值来调节代码字体的大小。\",\"设置完毕后点击右下角的OK\",\"计算机发展\",\"编写代码\",\"计算机发展\",\"运行代码\",\"右键空白处，点击Run\",\"计算机发展\",\"最下面会弹出控制台。\",\"所有输出语句中的内容，都会在控制台上展示。\",\"计算机发展\"]},\"147\":{\"h\":\"8.5 IDEA中类的相关操作\"},\"148\":{\"h\":\"8.5.1 类的相关操作\",\"t\":[\"新建类文件\",\"删除类文件\",\"修改类文件\"]},\"149\":{\"h\":\"8.5.2 新建类文件\",\"t\":[\"所有的Java代码都会写在src文件夹当中。\",\"所以，右键点击src，选择new，点击Java Class\",\"计算机发展\",\"输入类名，再按回车\",\"计算机发展\",\"新建完毕\",\"计算机发展\"]},\"150\":{\"h\":\"8.5.3 修改类名\",\"t\":[\"右键点击想要修改的文件\",\"点击Refactor\",\"再点击Rename\",\"计算机发展\",\"输入想要修改的名字\",\"输入完毕点击下面的Refactor\",\"计算机发展\",\"文件名和类名均已修改成功\",\"计算机发展\"]},\"151\":{\"h\":\"8.5.4 删除类文件\",\"t\":[\"想要删除哪个文件，就右键点击该文件\",\"选择Delete即可\",\"计算机发展\",\"在弹出的界面中点击OK，确定删除\",\"计算机发展\",\"小贴士：\",\"此时删除是不走回收站的，直接从硬盘中删掉了。\"]},\"152\":{\"h\":\"8.6 IDEA中模块的相关操作\"},\"153\":{\"h\":\"8.6.1 模块的相关操作\",\"t\":[\"新建模块\",\"删除模块\",\"修改模块\",\"导入模块\"]},\"154\":{\"h\":\"8.6.2 新建模块\",\"t\":[\"点击File，选择Project Structure\",\"计算机发展\",\"选择Module\",\"计算机发展\",\"点击+\",\"选择New Module\",\"计算机发展\",\"要创建一个Java模块，所以选择第一个Java\",\"点击右下角的Next\",\"计算机发展\",\"输入模块的名称\",\"点击右下角的Finish\",\"计算机发展\",\"成功新建完毕之后，在中间空白区域就出现了刚刚新建的模块\",\"点击右下角的OK\",\"计算机发展\",\"在主界面中，也会出现刚刚新建的模块\",\"计算机发展\"]},\"155\":{\"h\":\"8.6.3 删除模块\",\"t\":[\"右键点击模块\",\"选择Remove Module\",\"计算机发展\",\"选择Remove，表示确定删除\",\"计算机发展\",\"此时发现，在IDEA列表页面，删除的模块已经不在了。\",\"计算机发展\",\"小贴士：\",\"此时删除仅仅是从IDEA列表中的删除，在本地硬盘中还是存在的。\"]},\"156\":{\"h\":\"8.6.4 修改模块\",\"t\":[\"右键点击模块名\",\"选择Refactor\",\"再选择Rename\",\"计算机发展\",\"选择第三个修改模块名和本地文件夹名\",\"点击OK\",\"计算机发展\",\"输入要修改的新的模块名\",\"输入完毕点击Refactor\",\"计算机发展\",\"回到主界面，就发现模块名和文件夹名都已经修改完毕\",\"计算机发展\"]},\"157\":{\"h\":\"8.6.5 导入模块\",\"t\":[\"点击File，选择Project Structure\",\"计算机发展\",\"选择Module\",\"点击+\",\"选择Import Module\",\"计算机发展\",\"从本地硬盘中选择要导入的模块\",\"再点击OK\",\"计算机发展\",\"不断点击Next\",\"计算机发展\",\"如果中间出现提示框，则点击Overwrite\",\"然后继续点击右下角的Next\",\"计算机发展\",\"一直点到finish为止\",\"计算机发展\",\"成功导入后，在中间位置就会出现导入的模块信息\",\"计算机发展\",\"在主界面中也会出现导入的模块信息\",\"计算机发展\",\"展开模块点击模块中的Java文件，会发现代码报错。\",\"是因为导入模块跟JDK没有关联导致。\",\"计算机发展\",\"可以点击右上角的Setup SDK\",\"再选择已经安装的JDK版本即可\",\"计算机发展\",\"导入完毕之后，代码就恢复正常不会报错了\",\"计算机发展\"]},\"158\":{\"h\":\"8.7 IDEA中项目的相关操作\"},\"159\":{\"h\":\"8.7.1 项目的相关操作\",\"t\":[\"关闭项目\",\"打开项目\",\"修改项目\",\"新建项目\"]},\"160\":{\"h\":\"8.7.2 关闭项目\",\"t\":[\"点击File，选择Close Project即可\",\"计算机发展\",\"刚刚操作的项目就已经关闭了\",\"左侧是项目列表，如果要再次打开该项目，直接点击即可。\",\"右侧有create new project，可以再建一个新的项目\",\"计算机发展\",\"鼠标放在项目上，后面会出现一个叉。\",\"如果点击了这里的叉，会在IDEA的列表中删除。不会删除本地硬盘上的项目。\",\"计算机发展\"]},\"161\":{\"h\":\"8.7.3 打开项目\",\"t\":[\"在本界面还可以打开本地已经存在的项目\",\"点击Open or Import\",\"计算机发展\",\"选择要打开的项目\",\"点击OK\",\"计算机发展\",\"项目就被打开了。\",\"计算机发展\"]},\"162\":{\"h\":\"8.7.4 修改项目\",\"t\":[\"点击File，选择Project Structure\",\"计算机发展\",\"在这个界面，默认是Module\",\"所以，要先点击Project\",\"在右侧页面中，输入新的项目名称\",\"修改JDK版本和编译版本都变成JDK14\",\"再点击OK\",\"计算机发展\",\"此时发现，项目名称已经修改完毕\",\"计算机发展\",\"但是本地文件夹的名字还没有修改\",\"计算机发展\",\"需要先关闭当前项目\",\"计算机发展\",\"点击项目后面的叉，从列表中移除项目\",\"计算机发展\",\"到本地硬盘中手动修改文件夹的名称\",\"点击Open or Import重新打开项目\",\"计算机发展\",\"选择修改之后的项目\",\"点击OK\",\"计算机发展\",\"此时会发现，项目名称和本地硬盘文件夹的名称都已经修改完毕了\",\"计算机发展\"]},\"163\":{\"h\":\"8.7.5 新建项目\",\"t\":[\"点击File\",\"选择New\",\"点击Project\",\"计算机发展\",\"同样还是创建一个什么都没有的空项目\",\"计算机发展\",\"输入项目的名称\",\"点击右下角的finish\",\"计算机发展\",\"IDEA循环是否需要帮我们在本地创建一个新的文件夹\",\"点击OK\",\"计算机发展\",\"询问是在本窗口打开还是在一个新的窗口打开。\",\"可以点击New Window，在一个新的窗口打开。\",\"计算机发展\",\"此时就出现了两个窗口，在一个新的窗口打开了新的项目\",\"计算机发展\"]},\"164\":{\"h\":\"03-Java运算符和表达式\"},\"165\":{\"h\":\"运算符：\",\"t\":[\"​ 就是对常量或者变量进行操作的符号。\",\"​ 比如： + - * /\"]},\"166\":{\"h\":\"表达式：\",\"t\":[\"​ 用运算符把常量或者变量连接起来的，符合Java语法的式子就是表达式。\",\"​ 比如：a + b 这个整体就是表达式。\",\"​ 而其中+是算术运算符的一种，所以这个表达式也称之为算术表达式。\",\"分类：\",\"+ - * / % \",\"运算特点：\",\"+ - * :跟小学数学中一模一样没有任何区别. \",\"/： 1.整数相除结果只能得到整除，如果结果想要是小数，必须要有小数参数。 2.小数直接参与运算，得到的结果有可能是不精确的。 案例： System.out.println( 10 / 3);//3 System.out.println(10.0 / 3);//3.3333333333333335 \",\"%：取模、取余。 他做的也是除法运算，只不过获取的是余数而已。 案例： System.out.println(10 % 2);//0 System.out.println(10 % 3);//1 应用场景： //可以利用取模来判断一个数是奇数还是偶数 System.out.println(15 % 2);//1 奇数 \",\"取模的一些应用场景：\",\"可以用取模来判断，A是否可以被B整除 ==> A % B 10 % 3\",\"可以判断A是否为偶数 A % 2 如果结果为0.那么证明A是一个偶数。如果结果为1，那么证明A是一个奇数\",\"在以后，斗地主发牌 三个玩家 把每一张牌都定义一个序号 拿着序号 % 3 如果结果为1，就发给第一个玩家。 如果结果为2，那么就发给第二个玩家 如果结果为0，那么就发给第三个玩家\"]},\"167\":{\"h\":\"练习：数值拆分\",\"t\":[\"需求：键盘录入一个三位数，将其拆分为个位、十位、百位后，打印在控制台\",\"代码示例：\",\"//1.键盘录入一个三位数 //导包 --- 创建对象 --- 接收数据 Scanner sc = new Scanner(System.in); System.out.println(\\\"请输入一个三位数\\\"); int number = sc.nextInt();//123 //2.获取这个三位数的个位、十位、百位并打印出来 //公式： //针对于任意的一个数而言 //个位： 数字 % 10 int ones = number % 10; //十位： 数字 / 10 % 10 int tens = number / 10 % 10; //百位： 数字 / 100 % 10 int hundreds = number / 100 % 10; //输出结果 System.out.println(ones); System.out.println(tens); System.out.println(hundreds); \",\"公式：\",\"获取任意一个数上每一位数。\",\"个位：数字 % 10\",\"十位：数字 / 10 % 10\",\"百位：数字 / 100 % 10\",\"千位：数字 / 1000 % 10\",\"。。。以此类推。。。\"]},\"168\":{\"h\":\"概念：\",\"t\":[\"也叫自动类型提升。\",\"就是把一个取值范围小的数据或者变量，赋值给另一个取值范围大的变量。此时不需要我们额外写代码单独实现，是程序自动帮我们完成的。\"]},\"169\":{\"h\":\"简单记忆：\",\"t\":[\"就是小的给大的，可以直接给。\"]},\"170\":{\"h\":\"两种提升规则：\",\"t\":[\"取值范围小的，和取值范围大的进行运算，小的会先提升为大的，再进行运算。\",\"byte、short、char三种类型的数据在运算的时候，都会直接先提升为int，然后再进行运算。\"]},\"171\":{\"h\":\"取值范围从小到大的关系：\",\"t\":[\"byte short int long float double\",\"总结：\",\"取值范围：byte < short < int < long < float < double\",\"什么时候需要进行转换？\",\"数据类型不一样的时候，不能进行计算。需要转换成一样的类型才能进行计算\",\"转换规则\",\"取值范围小的，和取值范围大的进行运算，小的会先提升为大的，再进行运算。\",\"byte、short、char三种类型的数据在运算的时候，都会直接先提升为int，然后再进行运算。\",\"请看下面案例是否有误，如果有问题，请说出原因，如果没有问题，请说出运算过程和运算结果\"]},\"172\":{\"h\":\"案例一：\",\"t\":[\"double d = 10; System.out.println(d);//10.0 \",\"解释：\",\"10是整数，整数默认是int类型的。\",\"而在取值范围的顺序中：byte short int long float double\",\"在赋值的时候把一个int类型的赋值给了一个double类型的。把一个小的赋值给一个大的是可以直接给的。\"]},\"173\":{\"h\":\"案例二：\",\"t\":[\"byte b = 100; int i = b;//可以成功赋值 \",\"解释：\",\"因为byte的取值范围是小的，int的取值范围是大的，在底层进行了隐式转换，不需要我们额外写代码单独实现，是可以直接赋值。\"]},\"174\":{\"h\":\"案例三：\",\"t\":[\"int i = 10; long n = 20L; ??? result = i + n; 问变量result是什么类型的？ \",\"解释：\",\"变量i是int类型的，变量n是long类型的。\",\"而在取值范围的顺序中：byte short int long float double\",\"变量i里面的值会自动提升为long类型的，最终的结果其实就是两个long相加，那么最终的result是long类型的。\"]},\"175\":{\"h\":\"案例四：\",\"t\":[\"int i = 10; long n = 100L; double d = 20.0; ??? result = i + n + d; 问变量result是什么类型的？ \",\"解释：\",\"变量i是int类型，变量n是long类型，变量d是double类型。\",\"而在取值范围的顺序中：byte short int long float double\",\"所以变量i和变量n里面的值在参与运算的时候，都会进行类型提升，变成double。\",\"最终其实就是三个double进行相加，那么最终的结果就是double类型的。\"]},\"176\":{\"h\":\"案例五：\",\"t\":[\"byte b1 = 10; byte b2 = 20; ??? result = b1 + b2;//int 问变量result是什么类型的？ \",\"解释：\",\"因为b1和b2都是byte类型的。所以在参与计算的时候，变量b1和变量b2里面的值都会自动提升为int类型的。最终其实就是两个int类型的相加，最终结果也是int类型的。\"]},\"177\":{\"h\":\"案例六：\",\"t\":[\"byte b = 10; short s = 20; long n = 100L; ??? result = b + s + n; 问变量result是什么类型的？long \",\"解释：\",\"变量b是byte类型的，变量s是short类型的，变量n是long类型的。\",\"byte，short，char类型的变量在参与运算的时候，变量里面的值会直接先提升为int。\",\"第一步：变量b和变量s里面的值会先提升为int参与运算。 ==>int + int + long\",\"第二步：而long类型的取值范围是大于int的取值范围的。 ==> 所以变量b和变量s里面的值会再次提升为long。long + long + long。\",\"所以最终结果是long类型的。\"]},\"178\":{\"h\":\"概念：\",\"t\":[\"如果要把一个取值范围大的数据或者变量赋值给另一个取值范围小的变量。是不允许直接操作。\",\"如果一定要这么干，就需要加入强制转换。\"]},\"179\":{\"h\":\"书写格式：\",\"t\":[\"目标数据类型 变量名 = （目标数据类型）被强转的数据；\",\"简单理解：要转成什么类型的，那么就在小括号中写什么类型就可以了。\",\"案例：\",\"public class OperatorDemo2 { public static void main(String[] args) { double a = 12.3; int b = (int) a; System.out.println(b);//12 } } \",\"注意点：强制转换有可能会导致数据发生错误。（数据的精度丢失） 或者是将一个很大的数赋值给一个取值范围很小的变量去接收，就超出了范围，也会导致数据精度丢失\"]},\"180\":{\"h\":\"核心技巧：\",\"t\":[\"当+操作中出现字符串时，此时就是字符串的连接符，会将前后的数据进行拼接，并产生一个新的字符串。\",\"当连续进行+操作时，从左到右逐个执行的。\",\"注意：当出现连续的 + 操作时，代码从左到右逐个执行 如：1+99+“嘿嘿” ==> 100嘿嘿\",\"案例1：\",\"1 + \\\"abc\\\" + 1 \",\"结果：\\\"1abc1\\\"\",\"解释：\",\"第一步： 1 + \\\"abc\\\"。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串\\\"1abc\\\"\",\"第二步： \\\"1abc\\\" + 1。这个过程中，有字符串参与的，所以做的也是拼接操作，产生一个新的字符串\\\"1abc1\\\"\",\"案例2：\",\"1 + 2 + \\\"abc\\\" + 2 + 1 \",\"结果：“3abc21”\",\"解释：\",\"第一步：1 + 2 。在这个过程中，没有字符串参与的，所以做的是加法运算，结果为3。\",\"第二步：3 + \\\"abc\\\"。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串\\\"3abc\\\"。\",\"第三步：\\\"3abc\\\" + 2。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串\\\"3abc2\\\"。\",\"第四步：\\\"3abc2\\\" + 1。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串“3abc21”\",\"案例3：\",\"String name = \\\"黑默丁格\\\"; System.out.println(\\\"我的名字是\\\" + name); \",\"结果： 我的名字是黑默丁格\",\"解释：当字符串跟变量相加的时候，实际上是跟变量里面的值进行拼接。\"]},\"181\":{\"h\":\"规则：\",\"t\":[\"当+操作中出现了字符，会拿着字符到计算机内置的ASCII码表中去查对应的数字，然后再进行计算。\"]},\"182\":{\"h\":\"案例：\",\"t\":[\"char c = 'a'; int result = c + 0; System.out.println(result);//97 \",\"ASCII码表中：\",\"'a' ----- 97\",\"'A' ----- 65\",\"分类：\",\"+ - * / % 这些操作跟小学数学几乎是一模一样的。 \",\"注意点：\",\"/ 和 % 的区别：他们两个都是做除法运算，/取结果的商。% 取结果的余数。\",\"整数操作只能得到整数，如果想要得到小数，必须有浮点数参与运算。\",\"算术运算符的高级用法：\",\"是以+为例进行的讲解，其余减法，乘法，除法的运算规则也是一样的。\",\"特例：字符串只有+操作，没有其他操作。\"]},\"183\":{\"h\":\"分类：\",\"t\":[\"++ 自增运算符 -- 自减运算符 \",\"++：就是把变量里面的值+1\",\"--：就是把变量里面的值-1\"]},\"184\":{\"h\":\"使用方式：\",\"t\":[\"放在变量的前面，我们叫做先++。 比如：++a\",\"放在变量的后面，我们叫做后++。 比如：a++\"]},\"185\":{\"h\":\"注意点：\",\"t\":[\"不管是先++，还是后++。单独写在一行的时候，运算结果是一模一样的。\"]},\"186\":{\"h\":\"案例：\",\"t\":[\"//++ int a = 10; a++;//就是让变量a里面的值 + 1 System.out.println(a);//11 ++a;//就是让变量a里面的值 + 1 System.out.println(a);//12 \"]},\"187\":{\"h\":\"自增自减运算符的应用场景：\",\"t\":[\"某些情况下，变量需要进行加1或者减1的时候使用。\",\"比如：过生日多一岁，就用到了自增运算符。\",\"比如：购物商场中，选择商品数量，也用到了自增或者自减运算符。\",\"比如：统计很多数据中，有多少个数据满足要求，也用到了自增运算符。\",\"最为常用的：=\",\"运算过程：就是把等号右边的结果赋值给左边的变量\",\"案例：\",\"public class OperatorDemo6 { public static void main(String[] args) { //1.最为简单的赋值运算符用法 int a = 10;//就是把10赋值给变量a System.out.println(a); //2.如果等号右边需要进行计算。 int b = 20; int c = a + b;//先计算等号右边的，把计算的结果赋值给左边的变量 System.out.println(c); //3.特殊的用法 a = a + 10;//先计算等号右边的，把计算的结果赋值给左边的变量 System.out.println(a);//20 } } \"]},\"188\":{\"h\":\"分类：\",\"t\":[\"+=、-=、*=、/=、%=\"]},\"189\":{\"h\":\"运算规则：\",\"t\":[\"就是把左边跟右边进行运算，把最终的结果赋值给左边，对右边没有任何影响。\"]},\"190\":{\"h\":\"案例：\",\"t\":[\"public class OperatorDemo7 { public static void main(String[] args) { //扩展赋值运算符 int a = 10; int b = 20; a += b;//把左边和右边相加，再把最终的结果赋值给左边，对右边没有任何影响 // 相当于 a = a + b; System.out.println(a);//30 System.out.println(b);//20 } } \"]},\"191\":{\"h\":\"注意点：\",\"t\":[\"扩展的赋值运算符中隐层还包含了一个强制转换。\",\"以+=为例。\",\"a += b ;实际上相当于 a = (byte)(a + b);\",\"注意：扩展的赋值运算符中隐层还包含了一个强制转换\",\"byte a = 10;\",\"byte b = 20;\",\"a = (byte)(a + b);\",\"可以看到这里a+b得到的结果，继续赋值给a，然而byte类型的值在参与运算的时候，都是先转换为int类型，那么相加之后因该还是int类型，但是这里赋值给a之后，表示a+b表达式得到的结果还是byte类型的，所以说这里底层隐藏了一个强制转换\",\"public class OperatorDemo8 { public static void main(String[] args) { byte a = 10; byte b = 20; //a += b; a = (byte)(a + b); System.out.println(a);//30 } } \",\"又叫比较运算符，其实就是拿着左边跟右边进行了判断而已。\"]},\"192\":{\"h\":\"分类：\",\"t\":[\"符号\",\"解释\",\"==\",\"就是判断左边跟右边是否相等，如果成立就是true，如果不成立就是false\",\"!=\",\"就是判断左边跟右边是否不相等，如果成立就是true，如果不成立就是false\",\">\",\"就是判断左边是否大于右边，如果成立就是true，如果不成立就是false\",\">=\",\"就是判断左边是否大于等于右边，如果成立就是true，如果不成立就是false\",\"<\",\"就是判断左边是否小于右边，如果成立就是true，如果不成立就是false\",\"<=\",\"就是判断左边是否小于等于右边，如果成立就是true，如果不成立就是false\"]},\"193\":{\"h\":\"注意点：\",\"t\":[\"关系运算符最终的结果一定是布尔类型的。要么是true，要么是false\",\"在写==的时候，千万不要写成=\"]},\"194\":{\"h\":\"& 和 | 的使用：\",\"t\":[\"&：逻辑与（而且）\",\"两边都为真，结果才是真，只要有一个为假，那么结果就是假。\",\"|：逻辑或（或者）\",\"两边都为假，结果才是假，只要有一个为真，那么结果就是真。\",\"代码示例：\",\"// & //两边都是真，结果才是真。 System.out.println(true & true);//true System.out.println(false & false);//false System.out.println(true & false);//false System.out.println(false & true);//false System.out.println(\\\"===================================\\\"); // | 或 //两边都是假，结果才是假，如果有一个为真，那么结果就是真。 System.out.println(true | true);//true System.out.println(false | false);//false System.out.println(true | false);//true System.out.println(false | true);//true \"]},\"195\":{\"h\":\"使用场景：\",\"t\":[\"根据固定的场景，来选择使用&还是使用|\",\"用户登录。\",\"用户名输入正确 & 密码输入正确\",\"因为只有用户名和密码同时都正确了，那么才能成功登录，只要有一个失败了都不行。\",\"使用技巧：\",\"当我们需要同时满足左边和右边两种情况时，可以使用且\",\"丈母娘选女婿\",\"丈母娘：女婿啊，你要么买个房子，要么买辆车。就可以把我的小棉袄穿走了。\",\"买个房子 | 买辆车\",\"两个条件中，只要满足其中一个，就可以穿走小棉袄了。\",\"使用技巧：\",\"当两种条件只要满足其中一个的时候，可以使用或\"]},\"196\":{\"h\":\"^（异或）的使用：\",\"t\":[\"在以后用的不多，了解一下即可。\",\"计算规则：如果两边相同，结果为false，如果两边不同，结果为true\",\"代码示例：\",\"//^ //左右不相同，结果才是true，左右相同结果就是false System.out.println(true ^ true);//false System.out.println(false ^ false);//false System.out.println(true ^ false);//true System.out.println(false ^ true);//true \"]},\"197\":{\"h\":\"!（取反）的使用：\",\"t\":[\"是取反，也叫做非。\",\"计算规则：false取反就是true，true取反就是false\",\"温馨提示：取反最多只用一个。\",\"代码示例：\",\"System.out.println(!false);//true System.out.println(!true);//false System.out.println(!!false);//注意点：取反最多只用一个。 \",\"分类： && ||\",\"&&：\",\"运算结果跟&是一模一样的，只不过具有短路效果。\"]},\"198\":{\"h\":\"||：\",\"t\":[\"运算结果跟|是一模一样的。只不过具有短路效果。\"]},\"199\":{\"h\":\"逻辑核心：\",\"t\":[\"当左边不能确定整个表达式的结果，右边才会执行。\",\"当左边能确定整个表达式的结果，那么右边就不会执行了。从而提高了代码的运行效率。\"]},\"200\":{\"h\":\"举例：\",\"t\":[\"用户登录案例\",\"用户名正确 & 密码正确\",\"如果使用一个&，不管用户名是否正确都会去验证密码。\",\"思考：\",\"​ 如果用户名输入正确了，那么我们再判断密码是否正确，是符合业务逻辑的。\",\"​ 但是如果用户名输入错误了，那么现在还有必要去比较密码吗？没有不要了。\",\"​ 如果使用一个&，那么左边和右边不管什么情况下，都会执行。\",\"​ 用户名正确 && 密码正确\",\"​ 如果用户名输入正确了，那么才会验证密码是否输入正确。\",\"​ 如果用户名输入错误了，那么就不会再去验证密码是否正确，最终的结果直接为false。从而提高了程序运行的效率。\",\"丈母娘选女婿\",\"有房 | 有车\",\"首先先看看有没有房，发现有，然后再去看看有没有车。\",\"思考：\",\"​ 既然都有房子，干嘛还要去看车呢？多此一举。\",\"​ 有房 || 有车\",\"​ 首先先看看有没有房，如果有，那么右边就不执行了。最终的结果直接为true。\",\"​ 如果没有房子，才会去看右边有没有车。\"]},\"201\":{\"h\":\"总结：\",\"t\":[\"&& 和 & 、||和|的运行结果都是一模一样的。\",\"但是短路逻辑运算符可以提高程序的运行效率。\"]},\"202\":{\"h\":\"建议：\",\"t\":[\"最为常用： && || ！\",\"又叫做：三元表达式或者问号冒号表达式。\"]},\"203\":{\"h\":\"格式：\",\"t\":[\"关系表达式 ？ 表达式1 ：表达式2 ；\"]},\"204\":{\"h\":\"计算规则：\",\"t\":[\"计算关系表达式的值。\",\"如果关系表达式的值为真，那么执行表达式1。\",\"如果关系表达式的值为假，那么执行表达式2。\"]},\"205\":{\"h\":\"注意点：\",\"t\":[\"三元运算符的最终结果一定要被使用，要么赋值给一个变量，要么直接打印出来。\"]},\"206\":{\"h\":\"案例：\",\"t\":[\"public class OperatorDemo12 { public static void main(String[] args) { //需求：求两个数的较大值 int a = 10; int b = 20; //格式：关系表达式 ？ 表达式1 ： 表达式2 ； //注意点： //三元运算符的最终结果一定要被使用。 //要么赋值给一个变量，要么直接输出。 int max = a > b ? a : b ; System.out.println(max); System.out.println(a > b ? a : b); } } \",\"需求：\",\"动物园里有两只老虎，两只老虎的体重分别为通过键盘录入获得，\",\"请用程序实现判断两只老虎的体重是否相同。\",\"代码示例：\",\"//1.获取两只老虎的体重 Scanner sc = new Scanner(System.in); System.out.println(\\\"请输入第一只老虎的体重\\\"); int weight1 = sc.nextInt(); System.out.println(\\\"请输入第二只老虎的体重\\\"); int weight2 = sc.nextInt(); //2.利用三元运算符求出最终结果 String result = weight1 == weight2 ? \\\"相同\\\" : \\\"不相同\\\"; System.out.println(result); \",\"需求：\",\"一座寺庙里住着三个和尚，已知他们的身高分别为150cm、210cm、165cm。\",\"请用程序实现获取这三个和尚的最高身高。\",\"代码示例：\",\"//1.定义三个变量记录和尚的身高 int height1 = 150; int height2 = 210; int height3 = 165; //2.利用三元运算符求出两个数中的较大值。 int temp = height1 > height2 ? height1 : height2; //3.求出最终的结果 int max = temp > height3 ? temp : height3; System.out.println(max); \",\"在Java中涉及了很多的运算符，每一种运算符都有各自的优先级。但是这些优先级不需要记忆。\",\"咱们只要知道其中一点：小括号优先于所有。\"]},\"207\":{\"h\":\"原码、反码、补码\",\"t\":[\"原码：十进制数据的二进制表现形式，做左边第一位为符号位（0正 1负）\",\"反码：正数的补码反码是其本身，负数的反码是符号位保持不变，其余位按位取反\",\"补码：正数的补码是其本身，负数的补码是在其反码的基础上+1\"]},\"208\":{\"h\":\"计算机使用原码计算存在的问题\",\"t\":[\"使用原码计算存在的弊端： 在利用原码对正数进行计算时是不会有问题的 但是如果是对负数进行计算，结果就会出错，计算得到的实际结果和我们预期的结果刚好是相反的\",\"为了解决上面原码不能计算负数的问题：所以出现了反码 反码：反码的出现就是为了解决原码不能计算负数的问题而出现的 计算规则：正数的反码不变，负数的反码是在源码的基础上，符号位不变，数值取反，0变1 1变0\"]},\"209\":{\"h\":\"计算机使用反码计算存在的问题\",\"t\":[\"使用反码计算存在的弊端： 负数运算的时候，如果结果不跨0，是没有任何问题的，但是如果结果跨0了，跟实际得到的结果就会存在1的偏差\",\"为了解决上面反码计算不能跨0的问题：所以出现了补码 补码：为了解决负数计算时跨0的问题而出现的 计算规则：正数的补码不变，负数的补码在反码的基础上+1，另外补码还能多记录一个特殊值-128，该数据在一个字节下，没有原码和反码\",\"补码需要注意的地方：计算机中的计算和存储都是以补码的形式进行的\",\"一个字节的范围：-128~127\"]},\"210\":{\"h\":\"基本数据类型占位分析\",\"t\":[\"现在看下基本数据类型： byte类型的 10：占1个字节 0000 1010 8位 short类型的10：占2个字节 0000 0000 0000 1010 16位 int类型的 10：占4个字节 0000 0000 0000 0000 0000 0000 0000 1010 32位 long类型的 10：占8个字节 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 1010 64位 由此可以引申出隐式转换的底层实现： \"]},\"211\":{\"h\":\"隐式转换和强制类型转换的底层实现\"},\"212\":{\"h\":\"隐式转换\",\"t\":[\"public class Test() { public static void main(String[] args) { byte a = 10; // byte 是1个字节占8位 二进制表示为：0000 1010 int b = a; // int 是4个字节占32位 二进制表示为：0000 0000 0000 0000 0000 0000 0000 1010 System.out.println(b); } } \"]},\"213\":{\"h\":\"强制转换\",\"t\":[\"public class Test() { public static void main(String[] args) { int a = 300; // int 是4个字节占32位 二进制表示为： 0000 0000 0000 0000 0000 0001 0010 1100 byte b = (byte)a; // byte 是1个字节占8位 二进制表示为：0010 1100 这里就是将前面的24位去掉，所以最终得到的结果就是 十进制的 44，所以出现了精度丢失的情况 System.out.println(b); } } \",\"强制转换还有另外一种比较特殊的情况：（得到的结果刚好是8位）\",\"就是转换后的结果刚好是1个字节，刚好8位，然后第一位又是符号位，也会造成数据精度的丢失\",\"public class Test() { public static void main(String[] args) { int a = 200; // 0000 0000 0000 0000 0000 0000 1100 1000 byte b = (byte)a; // 1100 1000 这边第一位是符号位，所以得到的结果是-56 System.out.println(b); // -56 } } \"]},\"214\":{\"h\":\"其他的运算符\",\"t\":[\"运算符\",\"含义\",\"运算规则\",\"&\",\"逻辑与\",\"0为false 1为true\",\"|\",\"逻辑或\",\"0为false 1为true\",\"<<\",\"左移\",\"向左移动，低位补0\",\">>\",\"右移\",\"向右移动，高位补0或1\",\">>>\",\"无符号右移\",\"向右移动，高位补0\"]},\"215\":{\"h\":\"与或运算符\",\"t\":[\"public class Test() { public static void main(String[] args) { int a = 200; int b = 10; System.out.println(a & b); } } \",\"按位运算，一般不会使用，但是可能会在源码中出现\",\"全true为true，有false则为false\",\"200 ==> 0000 0000 0000 0000 0000 0000 1100 1000\",\"10 ==> & 0000 0000 0000 0000 0000 0000 1100 1000\",\"​ 0000 0000 0000 0000 0000 0000 0000 1000 ==> 8\",\"public class Test() { public static void main(String[] args) { int a = 200; int b = 10; System.out.println(a | b); } } \",\"按位运算，有true则为true\",\"200 ==> 0000 0000 0000 0000 0000 0000 1100 1000\",\"10 ==> | 0000 0000 0000 0000 0000 0000 1100 1000\",\"​ 0000 0000 0000 0000 0000 0000 1100 1010 ==> 202\"]},\"216\":{\"h\":\"左移运算符\",\"t\":[\"public class Test() { public static void main(String[] args) { int a = 200; System.out.println(a << 2); } } \",\"还是先将十进制转换为二进制补码形式：\",\"200 ==> 0000 0000 0000 0000 0000 0000 1100 1000\",\"然后执行向左移两位： 00|00 0000 0000 0000 0000 0000 1100 100000| 向左移两位，然后低位补0\",\"公式：左移1位便在原来值的基础上乘以2 所以这里得到左移两位后的结果为 800\"]},\"217\":{\"h\":\"右移运算符\",\"t\":[\"public class Test() { public static void main(String[] args) { int a = 200; System.out.println(a >> 2); } } \",\"还是先将十进制转换为二进制补码形式：\",\"200 ==> 0000 0000 0000 0000 0000 0000 1100 1000\",\"然后执行向右移两位： 000000 0000 0000 0000 0000 0000 1100 10|00 向右移两位，然后高位补0（因为原来是正数）\",\"公式：右移1位便在原来值的基础上除以2 所以这里得到左移两位后的结果为 50\"]},\"218\":{\"h\":\"无符号右移\",\"t\":[\"和右移基本一致，只是没有了符号位的区分，补的一直是0\"]},\"219\":{\"h\":\"04-Java流程控制语句\"},\"220\":{\"h\":\"第一章 流程控制语句\",\"t\":[\"在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。所以，我们必须清楚每条语句的执行流程。而且，很多时候要通过控制语句的执行顺序来实现我们想要的功能。\"]},\"221\":{\"h\":\"1.1 流程控制语句分类\",\"t\":[\"顺序结构\",\"判断和选择结构(if, switch)\",\"循环结构(for, while, do…while)\"]},\"222\":{\"h\":\"1.2 顺序结构\",\"t\":[\"顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。\",\"顺序结构执行流程图：\",\"1545615769372\"]},\"223\":{\"h\":\"第二章 判断语句：if语句\"},\"224\":{\"h\":\"2.1 if语句格式1\",\"t\":[\"格式： if (关系表达式) { 语句体; } \",\"执行流程：\",\"①首先计算关系表达式的值\",\"②如果关系表达式的值为true就执行语句体\",\"③如果关系表达式的值为false就不执行语句体\",\"④继续执行后面的语句内容\",\"1545616039363\",\"示例：\",\"public class IfDemo { public static void main(String[] args) { System.out.println(\\\"开始\\\"); //定义两个变量 int a = 10; int b = 20; //需求：判断a和b的值是否相等，如果相等，就在控制台输出：a等于b if(a == b) { System.out.println(\\\"a等于b\\\"); } //需求：判断a和c的值是否相等，如果相等，就在控制台输出：a等于c int c = 10; if(a == c) { System.out.println(\\\"a等于c\\\"); } System.out.println(\\\"结束\\\"); } } \"]},\"225\":{\"h\":\"练习1：老丈人选女婿\",\"t\":[\"需求：\",\"键盘录入女婿的酒量，如果大于2斤，老丈人给出回应，否则没有任何回应\",\"代码示例：\",\"//分析： //1.键盘录入女婿的酒量 Scanner sc = new Scanner(System.in); System.out.println(\\\"请输入女婿的酒量\\\"); int wine = sc.nextInt();//5 //2.对酒量进行一个判断即可 if(wine > 2) { System.out.println(\\\"不错哟，小伙子！\\\"); } \"]},\"226\":{\"h\":\"练习2：考试奖励\",\"t\":[\"需求：\",\"键盘录入一个整数，表示小明的考试名次，如果名次为1，小红可以当小明的女朋有了。\",\"代码示例：\",\"//分析： //1.键盘录入一个整数，表示小明的考试名次 Scanner sc = new Scanner(System.in); System.out.println(\\\"请输入小明的名次\\\"); int rank = sc.nextInt(); //2.对小明的考试成绩进行判断即可 if(rank == 1){ System.out.println(\\\"小红成为了小明的女朋友\\\"); } \"]},\"227\":{\"h\":\"第一种格式的细节：\",\"t\":[\"大括号的开头可以另起一行书写，但是还是建议写在第一行的末尾\",\"如果我们要对一个布尔类型的变量进行判断，不要写 ==，直接把变量写在小括号中即可。\",\"如果大括号中的语句体只有一条，那么大括号可以省略不写，如果大括号省略了，那么if只能控制距离他最近的那一条语句。\",\"**建议：**自己不要去写，如果别人这么写了，你要能看懂即可。\"]},\"228\":{\"h\":\"2.2 if语句格式2\",\"t\":[\"格式： if (关系表达式) { 语句体1; } else { 语句体2; } \",\"执行流程：\",\"①首先计算关系表达式的值\",\"②如果关系表达式的值为true就执行语句体1\",\"③如果关系表达式的值为false就执行语句体2\",\"④继续执行后面的语句内容\",\"1545616221283\",\"示例：\",\"public class IfDemo02 { public static void main(String[] args) { System.out.println(\\\"开始\\\"); //定义两个变量 int a = 10; int b = 20; //需求：判断a是否大于b，如果是，在控制台输出：a的值大于b，否则，在控制台输出：a的值不大于b if(a > b) { System.out.println(\\\"a的值大于b\\\"); } else { System.out.println(\\\"a的值不大于b\\\"); } System.out.println(\\\"结束\\\"); } } \"]},\"229\":{\"h\":\"练习1：吃饭\",\"t\":[\"需求：\",\"键盘录入一个整数，表示身上的钱。如果大于等于100块，就是网红餐厅。否则，就吃经济实惠的沙县小吃。\",\"代码示例：\",\"//分析： //1.键盘录入一个整数。表示身上的钱。 Scanner sc = new Scanner(System.in); System.out.println(\\\"请输入一个整数表示身上的钱\\\"); int money = sc.nextInt(); //2.对钱进行判断 if(money >= 100){ System.out.println(\\\"吃网红餐厅\\\"); }else{ System.out.println(\\\"福建大酒店\\\"); } \"]},\"230\":{\"h\":\"练习2：影院选座\",\"t\":[\"需求：\",\"在实际开发中，电影院选座也会使用到if判断。假设某影院售卖了100张票，票的序号为1~100。其中奇数票号坐左侧，偶数票号坐右侧。\",\"键盘录入一个整数表示电影票的票号。\",\"根据不同情况，给出不同的提示：如果票号为奇数，那么打印坐左边。如果票号为偶数，那么打印坐右边。\",\"代码示例：\",\"//分析： //1.键盘录入票号 Scanner sc = new Scanner(System.in); System.out.println(\\\"请输入票号\\\"); int ticket = sc.nextInt(); if(ticket >= 1 && ticket <= 100){ //合法 //2.对票号进行判断 if (ticket % 2 == 0) { //偶数 System.out.println(\\\"坐右边\\\"); } else { //奇数 System.out.println(\\\"坐左边\\\"); } }else{ //票号不合法 System.out.println(\\\"票号不合法\\\"); } \"]},\"231\":{\"h\":\"2.3 if语句格式3\",\"t\":[\"格式： if (关系表达式1) { 语句体1; } else if (关系表达式2) { 语句体2; } … else { 语句体n+1; } \",\"执行流程：\",\"①首先计算关系表达式1的值\",\"②如果值为true就执行语句体1；如果值为false就计算关系表达式2的值\",\"③如果值为true就执行语句体2；如果值为false就计算关系表达式3的值\",\"④…\",\"⑤如果没有任何关系表达式为true，就执行语句体n+1。\",\"1545616667104\"]},\"232\":{\"h\":\"练习1：考试奖励\",\"t\":[\"需求：\",\"​ 小明快要期末考试了，小明爸爸对他说，会根据他不同的考试成绩，送他不同的礼物，\",\"假如你可以控制小明的得分，请用程序实现小明到底该获得什么样的礼物，并在控制台输出。\",\"分析：\",\"​ ①小明的考试成绩未知，可以使用键盘录入的方式获取值\",\"​ ②由于奖励种类较多，属于多种判断，采用if...else...if格式实现\",\"​ ③为每种判断设置对应的条件\",\"​ ④为每种判断设置对应的奖励\",\"代码示例：\",\"//95~100 自行车一辆 //90~94 游乐场玩一天 //80 ~ 89 变形金刚一个 //80 以下 胖揍一顿 //1.键盘录入一个值表示小明的分数 Scanner sc = new Scanner(System.in); System.out.println(\\\"请输入小明的成绩\\\"); int score = sc.nextInt(); //2.对分数的有效性进行判断 if(score >= 0 && score <= 100){ //有效的分数 //3.对小明的分数进行判断，不同情况执行不同的代码 if(score >= 95 && score <= 100){ System.out.println(\\\"送自行车一辆\\\"); }else if(score >= 90 && score <= 94){ System.out.println(\\\"游乐场玩一天\\\"); }else if(score >= 80 && score <= 89){ System.out.println(\\\"变形金刚一个\\\"); }else{ System.out.println(\\\"胖揍一顿\\\"); } }else{ //无效的分数 System.out.println(\\\"分数不合法\\\"); } \"]},\"233\":{\"h\":\"第三章 switch语句\"},\"234\":{\"h\":\"3.1 格式\",\"t\":[\"switch (表达式) { case 1: 语句体1; break; case 2: 语句体2; break; ... default: 语句体n+1; break; } \"]},\"235\":{\"h\":\"3.2\",\"t\":[\"首先计算出表达式的值\",\"其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结 束。\",\"最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束掉。\"]},\"236\":{\"h\":\"练习：运动计划\",\"t\":[\"需求：键盘录入星期数，显示今天的减肥活动。\",\"周一：跑步\",\"周二：游泳\",\"周三：慢走\",\"周四：动感单车\",\"周五：拳击\",\"周六：爬山\",\"周日：好好吃一顿\",\"代码示例：\",\"package a01switch选择语句; import java.util.Scanner; public class SwitchDemo2 { public static void main(String[] args) { //1.键盘录入一个整数表示星期 Scanner sc = new Scanner(System.in); System.out.println(\\\"请输入一个整数表示星期\\\"); int week = sc.nextInt(); //2.书写一个switch语句去跟week进行匹配 switch (week){ case 1: System.out.println(\\\"跑步\\\"); break; case 2: System.out.println(\\\"游泳\\\"); break; case 3: System.out.println(\\\"慢走\\\"); break; case 4: System.out.println(\\\"动感单车\\\"); break; case 5: System.out.println(\\\"拳击\\\"); break; case 6: System.out.println(\\\"爬山\\\"); break; case 7: System.out.println(\\\"好好吃一顿\\\"); break; default: System.out.println(\\\"输入错误，没有这个星期\\\"); break; } } } \"]},\"237\":{\"h\":\"3.3 switch的扩展知识：\",\"t\":[\"default的位置和省略情况\",\"default可以放在任意位置，也可以省略\",\"case穿透\",\"不写break会引发case穿透现象\",\"switch在JDK12的新特性\",\"int number = 10; switch (number) { case 1 -> System.out.println(\\\"一\\\"); case 2 -> System.out.println(\\\"二\\\"); case 3 -> System.out.println(\\\"三\\\"); default -> System.out.println(\\\"其他\\\"); } \",\"switch和if第三种格式各自的使用场景\",\"当我们需要对一个范围进行判断的时候，用if的第三种格式\",\"当我们把有限个数据列举出来，选择其中一个执行的时候，用switch语句\",\"比如：\",\"​ 小明的考试成绩，如果用switch，那么需要写100个case，太麻烦了，所以用if简单。\",\"​ 如果是星期，月份，客服电话中0~9的功能选择就可以用switch\"]},\"238\":{\"h\":\"练习：休息日和工作日\",\"t\":[\"需求：键盘录入星期数，输出工作日、休息日。\",\"(1-5) 工作日，(6-7)休息日。\",\"代码示例：\",\"//分析： //1.键盘录入星期数 Scanner sc = new Scanner(System.in); System.out.println(\\\"请输入星期\\\"); int week = sc.nextInt();//3 //2.利用switch进行匹配 ---------------------------------------------------- 利用case穿透简化代码 switch (week){ case 1: case 2: case 3: case 4: case 5: System.out.println(\\\"工作日\\\"); break; case 6: case 7: System.out.println(\\\"休息日\\\"); break; default: System.out.println(\\\"没有这个星期\\\"); break; } ---------------------------------------------------- 利用JDK12简化代码书写 switch (week) { case 1, 2, 3, 4, 5 -> System.out.println(\\\"工作日\\\"); case 6, 7 -> System.out.println(\\\"休息日\\\"); default -> System.out.println(\\\"没有这个星期\\\"); } \"]},\"239\":{\"h\":\"第四章 循环结构\"},\"240\":{\"h\":\"4.1 for循环结构（掌握）\",\"t\":[\"​ 循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，当反复 执行这个循环体时，需要在合适的时候把循环判断条件修改为false，从而结束循环，否则循环将一直执行下去，形 成死循环。\"]},\"241\":{\"h\":\"4.1.1 for循环格式：\",\"t\":[\"for (初始化语句;条件判断语句;条件控制语句) { 循环体语句; } \",\"格式解释：\",\"初始化语句： 用于表示循环开启时的起始状态，简单说就是循环开始的时候什么样\",\"条件判断语句：用于表示循环反复执行的条件，简单说就是判断循环是否能一直执行下去\",\"循环体语句： 用于表示循环反复执行的内容，简单说就是循环反复执行的事情\",\"条件控制语句：用于表示循环执行中每次变化的内容，简单说就是控制循环是否能执行下去\",\"执行流程：\",\"①执行初始化语句\",\"②执行条件判断语句，看其结果是true还是false\",\"​ 如果是false，循环结束\",\"​ 如果是true，继续执行\",\"③执行循环体语句\",\"④执行条件控制语句\",\"⑤回到②继续\",\"for循环书写技巧：\",\"确定循环的开始条件\",\"确定循环的结束条件\",\"确定循环要重复执行的代码\",\"代码示例：\",\"//1.确定循环的开始条件 //2.确定循环的结束条件 //3.确定要重复执行的代码 //需求：打印5次HelloWorld //开始条件：1 //结束条件：5 //重复代码：打印语句 for (int i = 1; i <= 5; i++) { System.out.println(\\\"HelloWorld\\\"); } \"]},\"242\":{\"h\":\"for循环练习-输出数据\",\"t\":[\"需求：在控制台输出1-5和5-1的数据\",\"示例代码：\",\"public class ForTest01 { public static void main(String[] args) { //需求：输出数据1-5 for(int i=1; i<=5; i++) { System.out.println(i); } System.out.println(\\\"--------\\\"); //需求：输出数据5-1 for(int i=5; i>=1; i--) { System.out.println(i); } } } \"]},\"243\":{\"h\":\"for循环练习-求和\",\"t\":[\"需求：求1-5之间的数据和，并把求和结果在控制台输出\",\"示例代码：\",\"public class ForTest02 { public static void main(String[] args) { //求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0 int sum = 0; //从1开始到5结束的数据，使用循环结构完成 for(int i=1; i<=5; i++) { //将反复进行的事情写入循环结构内部 // 此处反复进行的事情是将数据 i 加到用于保存最终求和的变量 sum 中 sum = sum + i; /* sum += i; sum = sum + i; 第一次：sum = sum + i = 0 + 1 = 1; 第二次：sum = sum + i = 1 + 2 = 3; 第三次：sum = sum + i = 3 + 3 = 6; 第四次：sum = sum + i = 6 + 4 = 10; 第五次：sum = sum + i = 10 + 5 = 15; */ } //当循环执行完毕时，将最终数据打印出来 System.out.println(\\\"1-5之间的数据和是：\\\" + sum); } } \",\"本题要点： \",\"今后遇到的需求中，如果带有求和二字，请立即联想到求和变量\",\"求和变量的定义位置，必须在循环外部，如果在循环内部则计算出的数据将是错误的\"]},\"244\":{\"h\":\"for循环练习-求偶数和\",\"t\":[\"需求：求1-100之间的偶数和，并把求和结果在控制台输出 }\",\"示例代码：\",\"public class ForTest03 { public static void main(String[] args) { //求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0 int sum = 0; //对1-100的数据求和与1-5的数据求和几乎完全一样，仅仅是结束条件不同 for(int i=1; i<=100; i++) { //对1-100的偶数求和，需要对求和操作添加限制条件，判断是否是偶数 if(i%2 == 0) { //sum += i； sum = sum + i; } } //当循环执行完毕时，将最终数据打印出来 System.out.println(\\\"1-100之间的偶数和是：\\\" + sum); } } \"]},\"245\":{\"h\":\"for循环练习-统计次数\",\"t\":[\"需求：\",\"​ 键盘录入两个数字，表示一个范围。\",\"​ 统计这个范围中。\",\"​ 既能被3整除，又能被5整除数字有多少个？\",\"代码示例：\",\" \"]},\"246\":{\"h\":\"4.2 while循环\"},\"247\":{\"h\":\"4.2.1 格式：\",\"t\":[\"初始化语句; while(条件判断语句){ 循环体; 条件控制语句; } \"]},\"248\":{\"h\":\"练习1：打印5次HelloWorld\",\"t\":[\"int i = 1; while(i <= 5){ System.out.println(\\\"HelloWorld\\\"); i++; } System.out.println(i); \"]},\"249\":{\"h\":\"练习2：珠穆朗玛峰\",\"t\":[\"//1.定义一个变量表示珠穆朗玛峰的高度 int height = 8844430; //2.定义一个变量表示纸张的厚度 double paper = 0.1; //定义一个计数器（变量），用来统计折叠的次数 int count = 0; //3.循环折叠纸张 //只有纸张的厚度 < 穆朗玛峰的高度 循环才继续，否则循环就停止 //坑：只有判断为真，循环才会继续 while(paper < height){ //折叠纸张 paper = paper * 2; count++; } //4.打印一下纸张的厚度 System.out.println(count);//27 \"]},\"250\":{\"h\":\"4.3 do...while循环\",\"t\":[\"本知识点了解即可\",\"格式：\",\"初始化语句; do{ 循环体; 条件控制语句; }while(条件判断语句); \",\"特点：\",\"​ 先执行，再判断。\"]},\"251\":{\"h\":\"4.4 三种格式的区别：\",\"t\":[\"​ for和while循环，是先判断，再执行。\",\"​ do...while是先执行，再判断。\",\"​ 当知道循环次数或者循环范围的时候，用for循环。\",\"​ 当不知道循环次数，也不知道循环范围，但是知道循环的结束条件时，用while循环。\"]},\"252\":{\"h\":\"循环高级\"},\"253\":{\"h\":\"1.无限循环\"},\"254\":{\"h\":\"概念：\",\"t\":[\"​ 又叫死循环。循环一直停不下来。\"]},\"255\":{\"h\":\"for格式：\",\"t\":[\"for(;;){ System.out.println(\\\"循环执行一直在打印内容\\\"); } \",\"解释：\",\"初始化语句可以空着不写，表示循环之前不定义任何的控制变量。\",\"条件判断语句可以空着不写，如果不写，默认表示true，循环一直进行。\",\"条件控制语句可以空着不写，表示每次循环体执行完毕后，控制变量不做任何变化。\"]},\"256\":{\"h\":\"while格式：\",\"t\":[\"while(true){ System.out.println(\\\"循环执行一直在打印内容\\\"); } \",\"解释：\",\"​ 小括号里面就不能省略了，true一定要写出来，否则代码会报错。\"]},\"257\":{\"h\":\"do...while格式：\",\"t\":[\"do{ System.out.println(\\\"循环执行一直在打印内容\\\"); }while(true); \",\"解释：\",\"​ 小括号里面就不能省略了，true一定要写出来，否则代码会报错。\"]},\"258\":{\"h\":\"无限循环的注意事项：\",\"t\":[\"最为常用的格式：while\",\"无限循环下面不能再写其他代码了，因为永远执行不到。\"]},\"259\":{\"h\":\"2.条件控制语句\",\"t\":[\"break\",\"continue\"]},\"260\":{\"h\":\"break:\",\"t\":[\"​ 不能单独存在的。可以用在switch和循环中，表示结束，跳出的意思。\",\"代码示例：\",\"//1.吃1~5号包子 for (int i = 1; i <= 5; i++) { System.out.println(\\\"在吃第\\\" + i + \\\"个包子\\\"); //2.吃完第三个的时候就不吃了 if(i == 3){ break;//结束整个循环。 } } \"]},\"261\":{\"h\":\"continue:\",\"t\":[\"​ 不能单独存在的。只能存在于循环当中。\",\"​ 表示：跳过本次循环，继续执行下次循环。\",\"代码示例：\",\"//1.吃1~5号包子 for (int i = 1; i <= 5; i++) { //2.第3个包子有虫子就跳过，继续吃下面的包子 if(i == 3){ //跳过本次循环（本次循环中，下面的代码就不执行了），继续执行下次循环。 continue; } System.out.println(\\\"在吃第\\\" + i + \\\"个包子\\\"); } \"]},\"262\":{\"h\":\"3. Random\",\"t\":[\"Random跟Scanner一样，也是Java提前写好的类，我们不需要关心是如何实现的，只要直接使用就可以了。\"]},\"263\":{\"h\":\"使用步骤：\",\"t\":[\"导包\",\"import java.util.Random; 导包的动作必须出现在类定义的上边。 \",\"创建对象\",\"Random r = new Random (); 上面这个格式里面，只有r是变量名，可以变，其他的都不允许变。 \",\"生成随机数\",\"int number = r.nextInt(随机数的范围); 上面这个格式里面，只有number是变量名，可以变，其他的都不允许变。 随机数范围的特点：从0开始，不包含指定值。比如：参数为10，生成的范围[0,10) \",\"代码示例：\",\"//1.导包 import java.util.Random; public class RandomDemo1 { public static void main(String[] args) { //2.创建对象 Random r = new Random(); //3.生成随机数 int number = r.nextInt(100);//包左不包右，包头不包尾 //0 ~ 99 System.out.println(number); } } \"]},\"264\":{\"h\":\"4. 逢七过\",\"t\":[\"需求：\",\"​ 朋友聚会的时候可能会玩一个游戏：逢7过\",\"​ 游戏规则：从任意一个数字开始报数，当你要报的数字是包含7或者是7的倍数时都要说过：过\",\"​ 使用程序在控制台打印出1-100之间的满足逢七必过规则的数据\",\"举例：\",\"​ 1 2 3 4 5 6 过 8 9 10 11 12 13 过 15 16 过 18 ...\",\"代码示例：\",\"/*朋友聚会的时候可能会玩一个游戏：逢7过 游戏规则：从任意一个数字开始报数，当你要报的数字是包含7或者是7的倍数时都要说过：过 需求：使用程序在控制台打印出1-100之间的满足逢七必过规则的数据*/ //分析： //个位7 十位7 7倍数 //1 2 3 4 5 6 过 8 9 10 11 12 13 过 15 16 过 18 19 20 过.... //69 过 过 过 过 过 过... 80 //1.得到1~100之间的每一个数字 //开始：1 //结束：100 for (int i = 1; i <= 100; i++) { //2.判断每一个数字，如果符合规则，就打印过，如果不符合规则就打印真实的数字 if(i % 10 == 7 || i / 10 % 10 == 7 || i % 7 == 0){ System.out.println(\\\"过\\\"); continue; } System.out.println(i); } \"]},\"265\":{\"h\":\"5. 平方根\",\"t\":[\"需求：\",\"​ 键盘录入一个大于等于2的整数 x ，计算并返回 x 的 平方根 。结果只保留整数部分 ，小数部分将被舍去 。\",\"代码示例：\",\"/*需求：键盘录入一个大于等于2的整数 x ，计算并返回 x 的 平方根 。 结果只保留整数部分 ，小数部分将被舍去 。*/ //分析： //平方根 16的平方根4 // 4的平方根2 // 10 // 1 * 1 = 1 < 10 // 2 * 2 = 4 < 10 // 3 * 3 = 9 < 10 // 4 * 4 = 16 > 10 //推断：10的平方根是在3~4之间。 // 20 // 1 * 1 = 1 < 20 // 2 * 2 = 4 < 20 // 3 * 3 = 9 < 20 // 4 * 4 = 16 < 20 // 5 * 5 = 25 > 20 //推断：20的平方根是在4~5之间。 //在代码当中 //从1开始循环，拿着数字的平方跟原来的数字进行比较 //如果小于的，那么继续往后判断 //如果相等，那么当前数字就是平方根 //如果大于的，那么前一个数字就是平方跟的整数部分 //1.键盘录入一个整数 Scanner sc = new Scanner(System.in); System.out.println(\\\"请输入一个整数\\\"); int number = sc.nextInt(); //2.从1开始循环判断 //开始：1 结束: number for (int i = 1; i <= number; i++) { //用i * i 再跟number进行比较 if(i * i == number){ System.out.println(i + \\\"就是\\\" + number + \\\"的平方根\\\"); //一旦找到了，循环就可以停止了，后面的数字就不需要再找了，提高代码的运行效率。 break; }else if(i * i > number){ System.out.println((i - 1) + \\\"就是\\\" + number + \\\"平方根的整数部分\\\"); break; } } \"]},\"266\":{\"h\":\"6.判断是否为质数\",\"t\":[\"需求：\",\"​ 键盘录入一个正整数 x ，判断该整数是否为一个质数。\",\"代码示例：\",\"//需求：键盘录入一个正整数 x ，判断该整数是否为一个质数。 //质数： //如果一个整数只能被1和本身整除，那么这个数就是质数。否则这个数叫做合数 //7 = 1 * 7 质数 //8 = 1 * 8 2 * 4 合数 //分析： //1.键盘录入一个正整数 //number Scanner sc = new Scanner(System.in); System.out.println(\\\"请输入一个正整数\\\"); int number = sc.nextInt();//9 //定义一个变量，表示标记 //标记着number是否为一个质数 //true： 是一个质数 //false : 不是一个质数 //表示最初就认为number是一个质数 boolean flag = true; //2.判断 //写一个循环，从2开始判断，一直判断到number-1为止 //看这个范围之内，有没有数字可以被number整除 for (int i = 2; i < number; i++) { //i 依次表示这个范围之内的每一个数字 //看number是否能被i整除就可以了 if(number % i == 0){// 9 % 2 = 1 flag = false; //System.out.println(number + \\\"不是一个质数\\\"); break; }/*else{ System.out.println(number + \\\"是一个质数\\\"); }*/ } //只有当这个循环结束了，表示这个范围之内所有的数字都判断完毕了 //此时才能断定number是一个质数 if(flag){ System.out.println(number + \\\"是一个质数\\\"); }else{ System.out.println(number + \\\"不是一个质数\\\"); } \"]},\"267\":{\"h\":\"7. 猜数字小游戏\",\"t\":[\"需求：\",\"​ 程序自动生成一个1-100之间的随机数，在代码中使用键盘录入去猜出这个数字是多少？\",\"要求：\",\"​ 使用循环猜，一直猜中为止。\",\"思路分析：\",\"生成一个1-100之间的随机数\",\"使用键盘录入去猜出这个数字是多少\",\"把反复猜的代码写在循环中\",\"代码示例：\",\"//1.生成一个1-100之间的随机数 Random r = new Random(); int number = r.nextInt(100) + 1;// 0 ~ 99 + 1 --- 1 ~ 100 System.out.println(number); //2.使用键盘录入去猜出这个数字是多少？ Scanner sc = new Scanner(System.in); while(true){ System.out.println(\\\"请输入一个整数\\\"); int guessNumber = sc.nextInt(); //3.比较 if(guessNumber > number){ System.out.println(\\\"您猜的数字大了\\\"); }else if(guessNumber < number){ System.out.println(\\\"您猜的数字小了\\\"); }else{ System.out.println(\\\"恭喜你，猜中了\\\"); break; } } \"]},\"268\":{\"h\":\"05-Java数组\"},\"269\":{\"h\":\"概念：\",\"t\":[\"​ 指的是一种容器，可以同来存储同种数据类型的多个值。\",\"​ 但是数组容器在存储数据的时候，需要结合隐式转换考虑。\",\"比如：\",\"​ 定义了一个int类型的数组。那么boolean。double类型的数据是不能存到这个数组中的，\",\"​ 但是byte类型，short类型，int类型的数据是可以存到这个数组里面的。\",\"建议：\",\"​ 容器的类，和存储的数据类型保持一致。\",\"举例：\",\"​ 整数1 2 3 4 56 就可以使用int类型的数组来存储。\",\"​ 小数1.1 1.2 1.3 1.4 就可以使用double类型的数组来存储。\",\"​ 字符串\\\"aaa\\\" \\\"bbb\\\" \\\"ccc\\\" 就可以使用String类型的数组来存储。\"]},\"270\":{\"h\":\"格式一：\",\"t\":[\"​ 数据类型 [] 数组名\",\"比如：int [] array\"]},\"271\":{\"h\":\"格式二：\",\"t\":[\"​ 数据类型 数组名 []\",\"比如： int array []\"]},\"272\":{\"h\":\"详解：\",\"t\":[\"数据类型：限定了数组以后能存什么类型的数据。\",\"方括号：表示现在定义的是一个数组。\",\"数组名：就是一个名字而已，方便以后使用。\"]},\"273\":{\"h\":\"注意点：\",\"t\":[\"​ 方法括号跟数组名，谁写在前面，谁写在后面都是一样的。\",\"​ 平时习惯性使用第一种方式。\"]},\"274\":{\"h\":\"完整格式：\",\"t\":[\"​ 数据类型[] 数组名 = new 数据类型[]{元素1，元素2，元素3，元素4...};\",\"比如：\",\"​ int[] arr = new int[]{11,22,33};\",\"​ double[] arr = new double[]{1.1,1.2,1.3};\"]},\"275\":{\"h\":\"格式详解：\",\"t\":[\"​ 数据类型：限定了数组以后能存什么类型的数据。\",\"​ 方括号：表示现在定义的是一个数组。\",\"​ 数组名：其实就是名字而已，方便以后使用，在起名字的时候遵循小驼峰命名法。\",\"​ arr namesArr\",\"​ new：就是给数组在内存中开辟了一个空间。\",\"​ 数据类型：限定了数组以后能存什么类型的数据。\",\"​ 前面和后面的数据类型一定要保持一致。\",\"​ int[] arr = new double[]{11,22,33};//错误写法\",\"​ 方括号：表示现在定义的是一个数组。\",\"​ 大括号：表示数组里面的元素。元素也就是存入到数组中的数据。\",\"​ 多个元素之间，一定要用逗号隔开。\"]},\"276\":{\"h\":\"注意点：\",\"t\":[\"等号前后的数据类型必须保持一致。\",\"数组一旦创建之后，长度不能发生变化。\"]},\"277\":{\"h\":\"简化格式:\",\"t\":[\"​ 数据类型[] 数组名 = {元素1，元素2，元素3，元素4...};\",\"比如：\",\"​ int[] array = {1,2,3,4,5};\",\"​ double[] array = {1.1,1.2,1.3};\"]},\"278\":{\"h\":\"练习1：\",\"t\":[\"定义数组存储5个学生的年龄。\",\"1.给数组限定什么类型？ int 2.利用静态初始化完成创建并添加元素 int[] agesArr = new int[]{18,19,20,21,22}; int[] agesArr = {18,19,20,21,22}; \"]},\"279\":{\"h\":\"练习2：\",\"t\":[\"定义数组存储3个学生的姓名。\",\"1.给数组限定什么类型？ String 2.利用静态初始化完成创建并添加元素 String[] namesArr = new String[]{\\\"zhangsan\\\",\\\"lisi\\\",\\\"wangwu\\\"}; String[] namesArr = {\\\"zhangsan\\\",\\\"lisi\\\",\\\"wangwu\\\"}; \"]},\"280\":{\"h\":\"练习3：\",\"t\":[\"定义数组存储4个学生的身高。\",\"1.给数组限定什么类型？ double 2.利用静态初始化完成创建并添加元素 double[] heightsArr = new double[]{1.85,1.82,1.78,1.65}; double[] heightsArr = {1.85,1.82,1.78,1.65}; \",\"int[] arr = {1,2,3,4,5}; System.out.println(arr);//[I@6d03e736 double[] arr2 = {1.1,2.2,3.3}; System.out.println(arr2);//[D@568db2f2 \",\"打印数组的时候，实际出现的是数组的地址值。\",\"数组的地址值：就表示数组在内存中的位置。\",\"以[I@6d03e736为例：\",\"[ ：表示现在打印的是一个数组。\",\"I：表示现在打印的数组是int类型的。\",\"@：仅仅是一个间隔符号而已。\",\"6d03e736：就是数组在内存中真正的地址值。（十六进制的）\",\"但是，我们习惯性会把[I@6d03e736这个整体称之为数组的地址值。\",\"地址值对于我们来京，作用不大，简单了解。\"]},\"281\":{\"h\":\"格式：\",\"t\":[\"​ 数组名[索引];\"]},\"282\":{\"h\":\"作用：\",\"t\":[\"获取数组中对应索引上的值\",\"修改数组中对应索引上的值\",\"一旦修改之后，原来的值就会被覆盖了。\"]},\"283\":{\"h\":\"代码示例：\",\"t\":[\"public class ArrDemo2 { /* 数组中元素访问的格式： 数组名[索引]; 作用： 1.获取指定索引上对应的元素 2.修改指定索引上对应的元素 */ public static void main(String[] args) { int[] arr = {1,2,3,4,5}; //需求1：获取arr数组中，3索引上的值 int number = arr[3]; System.out.println(number); System.out.println(arr[3]); //需求2：将arr数组中，3索引上的值修改为10 arr[3] = 10; System.out.println(\\\"修改之后为:\\\" + arr[3]); } } \",\"​ 也叫角标、下标\",\"​ 就是数组容器中每一个小格子对应的编号。\"]},\"284\":{\"h\":\"索引的特点：\",\"t\":[\"索引一定是从0开始的。\",\"连续不间断。\",\"逐个+1增长。\",\"遍历：就是把数组里面所有的内容一个一个全部取出来。\",\"数组的长度：数组名.length;\",\"通用代码：\",\"for(int i = 0; i < arr.length; i++){ //在循环的过程中，i依次表示数组中的每一个索引 sout(arr[i]);//就可以把数组里面的每一个元素都获取出来，并打印在控制台上了。 } \"]},\"285\":{\"h\":\"格式：\",\"t\":[\"​ 数据类型[] 数组名 = new 数据类型[数组的长度];\"]},\"286\":{\"h\":\"举例：\",\"t\":[\"//1.定义一个数组，存3个人的年龄，年龄未知 int[] agesArr = new int[3]; //2.定义一个数组，存班级10名学生的考试成绩，考试成绩暂时未知，考完才知道。 int[] scoresArr = new int[10]; \"]},\"287\":{\"h\":\"数组的默认初始化值：\",\"t\":[\"整数类型：0\",\"小数类型：0.0\",\"布尔类型：false\",\"字符类型：'\\\\u0000'\",\"引用类型：null\",\"静态初始化：int[] arr = {1,2,3,4,5};\",\"动态初始化：int[] arr = new int[3];\",\"静态初始化：手动指定数组的元素，系统会根据元素的个数，计算出数组的长度。\",\"动态初始化：手动指定数组长度，由系统给出默认初始化值。\"]},\"288\":{\"h\":\"使用场景：\",\"t\":[\"只明确元素个数，但是不明确具体的数据，推荐使用动态初始化。\",\"已经明确了要操作的所有数据，推荐使用静态初始化。\"]},\"289\":{\"h\":\"举例：\",\"t\":[\"使用数组来存储键盘录入的5个整数。\",\"int[] arr = new int[5];\",\"将全班的学生成绩存入数组中，已知学生成绩为：66,77,88,99,100\",\"int[] arr = new int[5];\",\"arr[0] = 66;\",\"arr[1] = 77;\",\"... 虽然可以实现，但是太麻烦了。\",\"建议使用静态初始化：int[] arr = {66,77,88,99,100};\",\"当访问了数组中不存在的索引，就会引发索引越界异常。\",\"避免：\",\"​ 针对于任意一个数组，索引的范围： 最小索引：0 最大索引：数组的长度 - 1 ​ 数组名.length - 1\",\"public class ArrDemo6 { public static void main(String[] args) { int[] arr = {1,2,3,4,5,5,5,5,5}; //用索引来访问数组中的元素 System.out.println(arr[1]); System.out.println(arr[10]);//ArrayIndexOutOfBoundsException } } \"]},\"290\":{\"h\":\"练习1：求和\",\"t\":[\"需求：定义一个数组，存储1,2,3,4,5\",\"遍历数组得到每一个元素，求数组里面所有的数据和\",\"代码示例：\",\"/*定义一个数组，存储1,2,3,4,5 遍历数组得到每一个元素，求数组里面所有的数据和*/ //分析： //1.定义一个数组，并添加数据1,2,3,4,5 int[] arr = {1,2,3,4,5}; //求和变量 int sum = 0; //2.遍历数组得到每一个数据，累加求和 for (int i = 0; i < arr.length; i++) { //i 依次表示数组里面的每一个索引 //arr[i] 依次表示数组里面的每一个元素 sum = sum + arr[i]; } //当循环结束之后，sum的值就是累加之后的结果 System.out.println(sum); \"]},\"291\":{\"h\":\"练习2：统计个数\",\"t\":[\"需求：定义一个数组，存储1,2,3,4,5,6,7,8,9,10\",\"遍历数组得到每一个元素，统计数组里面一共有多少个能被3整除的数字\",\"代码示例：\",\"//分析： //1.定义一个数组 存储1,2,3,4,5,6,7,8,9,10 int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; //定义一个变量，用来统计次数 int count = 0; //2.遍历数组得到每一个元素 for (int i = 0; i < arr.length; i++) { //i 表示数组里面的每一个索引 //arr[i] 表示数组里面的每一个元素 //3.判断当前的元素是否为3的倍数，如果是那么统计变量就需要自增一次。 if(arr[i] % 3 == 0){ // System.out.println(arr[i]); count++; } } //当循环结束之后，就表示数组里面所有的数字都判断完毕了，直接打印count即可 System.out.println(\\\"数组中能被3整除的数字有\\\" + count + \\\"个\\\"); \"]},\"292\":{\"h\":\"练习3：变化数据\",\"t\":[\"需求：\",\"定义一个数组，存储1,2,3,4,5,6,7,8,9,10\",\"遍历数组得到每一个元素。\",\"要求：\",\"1，如果是奇数，则将当前数字扩大两倍\",\"2，如果是偶数，则将当前数字变成二分之一\",\"代码示例：\",\"//分析： //1.定义一个数组，存1,2,3,4,5,6,7,8,9,10 int[] arr = {1,2,3,4,5,6,7,8,9,10}; //2.遍历数组得到每一个元素 for (int i = 0; i < arr.length; i++) { //i 依次表示数组里面的每一个索引 //arr[i] 依次表示数组里面的每一个元素 //3.对每一个元素进行判断 if(arr[i] % 2 == 0){ //偶数 变成二分之一 arr[i] = arr[i] / 2; }else{ //奇数 扩大两倍 arr[i] = arr[i] * 2; } } //遍历数组 //一个循环尽量只做一件事情。 for (int i = 0; i < arr.length; i++) { System.out.println(arr[i]); } \"]},\"293\":{\"h\":\"练习4：求最值\",\"t\":[\"需求：求数组中的最大值\",\"代码示例：\",\"//定义数组求最大值：33,5,22,44,55 //扩展问题： //1.根据求最大值的思路，自己改写一下求最小智 //2.为什么max要记录为arr[0],默认值不能为0吗？ //不能写0 //max的初始化值一定要是数组中的值。 //3.循环中开始条件一定是0吗？ //循环的开始条件如果为0，那么第一次循环的时候是自己跟自己比了一下，对结果没有任何影响，但是效率偏低 //为了提高效率，减少一次循环的次数，循环开始条件可以写1. //1.定义数组用来存储5个值 int[] arr = {33,5,22,44,55}; //2.定义一个变量max用来存储最大值 //临时认为0索引的数据是最大的 int max = arr[0]; //3.循环获取数组中的每一个元素 //拿着每一个元素跟max进行比较 for (int i = 1; i < arr.length; i++) { //i 索引 arr[i] 元素 if(arr[i] > max){ max = arr[i]; } } //4.当循环结束之后，max记录的就是数组中的最大值 System.out.println(max);//55 \"]},\"294\":{\"h\":\"练习5：统计个数\",\"t\":[\"需求：生成10个1~100之间的随机数存入数组。\",\"1）求出所有数据的和\",\"2）求所有数据的平均数\",\"3）统计有多少个数据比平均值小\",\"代码示例：\",\"//分析： //1.定义数组 int[] arr = new int[10]; //2.把随机数存入到数组当中 Random r = new Random(); for (int i = 0; i < arr.length; i++) { //每循环一次，就会生成一个新的随机数 int number = r.nextInt(100) + 1; //把生成的随机数添加的数组当中 //数组名[索引] = 数据; arr[i] = number; } // 1）求出所有数据的和 //定义求和变量 int sum = 0; for (int i = 0; i < arr.length; i++) { //循环得到每一个元素 //并把元素累加到sum当中 sum = sum + arr[i]; } System.out.println(\\\"数组中所有数据的和为：\\\" + sum); //2）求所有数据的平均数 int avg = sum / arr.length; System.out.println(\\\"数组中平均数为：\\\" + avg); //3）统计有多少个数据比平均值小 int count = 0; for (int i = 0; i < arr.length; i++) { if(arr[i] < avg){ count++; } } //当循环结束之后，就表示我已经找到了所有的比平均数小的数据 System.out.println(\\\"在数组中，一共有\\\" + count + \\\"个数据，比平均数小\\\"); //遍历数组，验证答案 for (int i = 0; i < arr.length; i++) { System.out.print(arr[i] + \\\" \\\"); } \"]},\"295\":{\"h\":\"练习6：交换数据\",\"t\":[\"需求：定义一个数组，存入1,2,3,4,5。按照要求交换索引对应的元素。\",\"交换前：1,2,3,4,5\",\"交换后：5,2,3,4,1\",\"代码示例：\",\"//1.定义数组存储数据 int[] arr = {1,2,3,4,5}; //2.利用循环去交换数据 for(int i = 0,j = arr.length - 1; i < j; i++,j--){ //交换变量i和变量j指向的元素 int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } //当循环结束之后，那么数组中的数据就实现了头尾交换 for (int i = 0; i < arr.length; i++) { System.out.print(arr[i] + \\\" \\\"); } \"]},\"296\":{\"h\":\"练习7：打乱数据\",\"t\":[\"需求：定义一个数组，存入1~5。要求打乱数组中所有数据的顺序。\",\"代码示例：\",\"//1.定义数组存储1~5 int[] arr = {1, 2, 3, 4, 5}; //2.循环遍历数组，从0索引开始打乱数据的顺序 Random r = new Random(); for (int i = 0; i < arr.length; i++) { //生成一个随机索引 int randomIndex = r.nextInt(arr.length); //拿着随机索引指向的元素 跟 i 指向的元素进行交换 int temp = arr[i]; arr[i] = arr[randomIndex]; arr[randomIndex] = temp; } //当循环结束之后，那么数组中所有的数据已经打乱顺序了 for (int i = 0; i < arr.length; i++) { System.out.print(arr[i] + \\\" \\\"); } \"]},\"297\":{\"h\":\"06-Java方法\"},\"298\":{\"h\":\"1. 方法概述\"},\"299\":{\"h\":\"1.1 方法的概念\",\"t\":[\"方法（method）是程序中最小的执行单元\",\"注意：\",\"方法必须先创建才可以使用，该过程成为方法定义\",\"方法创建后并不是直接可以运行的，需要手动使用后，才执行，该过程成为方法调用\",\"为什么需要方法：\",\"植物大战僵尸，现在有不同的植物，都需要发射子弹，发射子弹的代码需要20行，每次新加一个植物都需要写20行代码，非常的麻烦；所以用一个箱子把发射子弹的代码装起来，有新的植物时直接使用打包好的代码即可\",\"使用方法的好处：\",\"提高代码的复用性\",\"提高代码的可维护性\",\"总结：\",\"什么是方法？\",\"方法是程序中最小的执行单元。\",\"实际开发中，什么时候用到方法？\",\"重复的代码、具有独立功能的代码可以抽取到方法中。\",\"实际开发中，方法有什么好处？\",\"可以提高代码的复用性\",\"可以提高代码的可维护性\"]},\"300\":{\"h\":\"2. 方法的定义和调用\"},\"301\":{\"h\":\"2.1 无参数方法定义和调用\",\"t\":[\"定义格式：\",\"public static void 方法名 ( ) { // 方法体; } \",\"范例：\",\"public static void method ( ) { // 方法体; } \",\"调用格式：\",\"方法名(); \",\"范例：\",\"method(); \",\"注意：方法必须先定义，后调用，否则程序将报错\"]},\"302\":{\"h\":\"2.3 无参数方法的练习\",\"t\":[\"需求：设计一个方法用于打印两个数中的较大数\",\"思路： \",\"①定义一个方法，用于打印两个数字中的较大数，例如getMax()\",\"②方法中定义两个变量，用于保存两个数字\",\"③使用分支语句分两种情况对两个数字的大小关系进行处理\",\"④在main()方法中调用定义好的方法\",\"代码：\",\"public class MethodTest { public static void main(String[] args) { //在main()方法中调用定义好的方法 getMax(); } //定义一个方法，用于打印两个数字中的较大数，例如getMax() public static void getMax() { //方法中定义两个变量，用于保存两个数字 int a = 10; int b = 20; //使用分支语句分两种情况对两个数字的大小关系进行处理 if(a > b) { System.out.println(a); } else { System.out.println(b); } } } \"]},\"303\":{\"h\":\"3. 带参数方法定义和调用\"},\"304\":{\"h\":\"3.1 带参数方法定义和调用\",\"t\":[\"定义格式：\",\"参数：由数据类型和变量名组成 - 数据类型 变量名\",\"参数范例：int a\",\"public static void 方法名 (参数1) { 方法体; } public static void 方法名 (参数1, 参数2, 参数3...) { 方法体; } \",\"范例：\",\"public static void isEvenNumber(int number){ ... } public static void getMax(int num1, int num2){ ... } \",\"注意：\",\"方法定义时，参数中的数据类型与变量名都不能缺少，缺少任意一个程序将报错\",\"方法定义时，多个参数之间使用逗号( ，)分隔\",\"调用格式：\",\"方法名(参数)； 方法名(参数1,参数2); \",\"范例：\",\"isEvenNumber(10); getMax(10,20); \",\"方法调用时，参数的数量与类型必须与方法定义中的设置相匹配，否则程序将报错\"]},\"305\":{\"h\":\"3.2 形参和实参\",\"t\":[\"形参：方法定义中的参数，等同于变量定义格式，例如：int number\",\"实参：方法调用中的参数，等同于使用变量或常量，例如： 10 number\",\"方法定义的小技巧：\",\"我要干什么？（决定方法体）\",\"我干这件事情需要什么才能完成？（决定形式参数）\"]},\"306\":{\"h\":\"3.3 带参数方法练习\",\"t\":[\"需求：设计一个方法用于打印两个数中的较大数，数据来自于方法参数 }\",\"思路： \",\"①定义一个方法，用于打印两个数字中的较大数，例如getMax()\",\"②为方法定义两个参数，用于接收两个数字\",\"③使用分支语句分两种情况对两个数字的大小关系进行处理\",\"④在main()方法中调用定义好的方法（使用常量）\",\"⑤在main()方法中调用定义好的方法（使用变量）\",\"代码：\",\"public class MethodTest { public static void main(String[] args) { //在main()方法中调用定义好的方法（使用常量） getMax(10,20); //调用方法的时候，人家要几个，你就给几个，人家要什么类型的，你就给什么类型的 //getMax(30); //getMax(10.0,20.0); //在main()方法中调用定义好的方法（使用变量） int a = 10; int b = 20; getMax(a, b); } //定义一个方法，用于打印两个数字中的较大数，例如getMax() //为方法定义两个参数，用于接收两个数字 public static void getMax(int a, int b) { //使用分支语句分两种情况对两个数字的大小关系进行处理 if(a > b) { System.out.println(a); } else { System.out.println(b); } } } \"]},\"307\":{\"h\":\"4. 带返回值方法的定义和调用\"},\"308\":{\"h\":\"4.1 带返回值方法定义和调用\",\"t\":[\"定义格式\",\"public static 数据类型 方法名 ( 参数 ) { return 数据 ; } \",\"范例\",\"public static boolean isEvenNumber( int number ) { return true ; } public static int getMax( int a, int b ) { return 100 ; } \",\"注意： \",\"方法定义时return后面的返回值与方法定义上的数据类型要匹配，否则程序将报错\",\"调用格式\",\"方法名 ( 参数 ) ; 数据类型 变量名 = 方法名 ( 参数 ) ; \",\"范例\",\"isEvenNumber ( 5 ) ; boolean flag = isEvenNumber ( 5 ); \",\"注意： \",\"方法的返回值通常会使用变量接收，否则该返回值将无意义\",\"总结：\",\"什么时候用到有返回值的方法？ ==> 在调用处要根据方法的结果，去编写另外一段代码。\",\"有返回值方法的定义格式\",\"public static 返回值类型 方法名(参数) { 方法体; return返回值; } \",\"有返回值方法的调用格式：直接调用，赋值调用，输出调用\",\"有返回值方法中参数的运行过程\"]},\"309\":{\"h\":\"4.2 带返回值方法练习1\",\"t\":[\"需求：设计一个方法可以获取两个数的较大值，数据来自于参数\",\"思路：\",\"①定义一个方法，用于获取两个数字中的较大数\",\"②使用分支语句分两种情况对两个数字的大小关系进行处理\",\"③根据题设分别设置两种情况下对应的返回结果\",\"④在main()方法中调用定义好的方法并使用变量保存\",\"⑤在main()方法中调用定义好的方法并直接打印结果\",\"代码：\",\"public class MethodTest { public static void main(String[] args) { //在main()方法中调用定义好的方法并使用变量保存 int result = getMax(10,20); System.out.println(result); //在main()方法中调用定义好的方法并直接打印结果 System.out.println(getMax(10,20)); } //定义一个方法，用于获取两个数字中的较大数 public static int getMax(int a, int b) { //使用分支语句分两种情况对两个数字的大小关系进行处理 //根据题设分别设置两种情况下对应的返回结果 if(a > b) { return a; } else { return b; } } } \"]},\"310\":{\"h\":\"4.3 带返回值方法练习2\",\"t\":[\"需求：定义一个方法，求一家商场每个季度的营业额。根据方法结果再计算出全年营业额。\",\"代码示例：\",\"package com.itheima.demo; public class MethodDemo9 { public static void main(String[] args) { /*需求：定义一个方法，求一家商场每个季度的营业额。 根据方法结果再计算出全年营业额。*/ int sum1 = getSum(10, 20, 30); int sum2 = getSum(10, 20, 30); int sum3 = getSum(10, 20, 30); int sum4 = getSum(10, 20, 30); int sum = sum1 + sum2 + sum3 + sum4; System.out.println(sum); } //心得： //1.我要干嘛？ 决定了方法体 每个季度的营业额 //2.我干这件事情，需要什么才能完成？ 决定了形参 需要三个月的营业额 a b c //3.我干完这件事情，看调用处是否需要使用方法的结果。 决定了返回值 //如果需要使用，那么必须返回 //如果不需要使用，可以返回也可以不返回 public static int getSum(int month1,int month2,int month3){ int sum = month1 + month2 + month3; //因为方法的调用处，需要继续使用这个结果 //所以我们必须要把sum返回 return sum; } } \"]},\"311\":{\"h\":\"4.4 带返回值方法练习3\",\"t\":[\"需求：键盘录入两个圆的半径（整数），比较两个圆的面积。\",\"代码示例：\",\"import java.util.Scanner; public class MethodDemo10 { public static void main(String[] args) { //需求：键盘录入两个圆的半径（整数），比较两个圆的面积。 //键盘录入圆的半径 Scanner sc = new Scanner(System.in); System.out.println(\\\"请输入圆的半径\\\"); int radii1 = sc.nextInt(); System.out.println(\\\"请输入第二个圆的半径\\\"); int radii2 = sc.nextInt(); double area1 = getArea(radii1); double area2 = getArea(radii2); if(area1 > area2){ System.out.println(\\\"第一个圆更大\\\"); }else{ System.out.println(\\\"第二个圆更大\\\"); } } //心得： //1.我要干嘛？ 求圆的面积 //2.我干这件事情，需要什么才能完成？ 半径 //3.方法的调用处，是否需要继续使用方法的结果 要比较 public static double getArea(int radii) { double area = 3.14 * radii * radii; return area; } } \"]},\"312\":{\"h\":\"5. 方法的注意事项\"},\"313\":{\"h\":\"5.1 方法的注意事项\",\"t\":[\"方法不能嵌套定义\",\"示例代码：\",\"public class MethodDemo { public static void main(String[] args) { } public static void methodOne() { public static void methodTwo() { // 这里会引发编译错误!!! } } } \",\"void表示无返回值，可以省略return，也可以单独的书写return，后面不加数据\",\"示例代码：\",\"public class MethodDemo { public static void main(String[] args) { } public static void methodTwo() { //return 100; 编译错误，因为没有具体返回值类型 return; //System.out.println(100); return语句后面不能跟数据或代码 } } \",\"方法不调用就不执行\",\"方法与方法之间是平级关系，不能互相嵌套定义\",\"方法的编写顺序和执行顺序无关\",\"方法的返回值类型为void，表示该方法没有返回值，没有返回值的方法可以省略return语句不写。如果要编写return，后面不能跟具体的数据。\",\"return关键字\",\"方法没有返回值：可以省略不写。如果书写，表示结束方法\",\"方法有返回值：必须要写。表示结束方法和返回结果\"]},\"314\":{\"h\":\"5.2 方法的通用格式\",\"t\":[\"格式：\",\"public static 返回值类型 方法名(参数) { 方法体; return 数据 ; } \",\"解释：\",\"格式\",\"解释\",\"public static\",\"修饰符，目前先记住这个格式\",\"返回值类型\",\"方法操作完毕之后返回的数据的数据类型如果方法操作完毕，没有数据返回，这里写void，而且方法体中一般不写return\",\"方法名\",\"调用方法时候使用的标识\",\"参数\",\"由数据类型和变量名组成，多个参数之间用逗号隔开\",\"方法体\",\"完成功能的代码块\",\"return\",\"如果方法操作完毕，有数据返回，用于把数据返回给调用者\",\"定义方法时，要做到两个明确\",\"明确返回值类型：主要是明确方法操作完毕之后是否有数据返回，如果没有，写void；如果有，写对应的数据类型\",\"明确参数：主要是明确参数的类型和数量\",\"调用方法时的注意：\",\"void类型的方法，直接调用即可\",\"非void类型的方法，推荐用变量接收调用\"]},\"315\":{\"h\":\"6. 方法重载\"},\"316\":{\"h\":\"6.1 方法重载\",\"t\":[\"方法重载概念\",\"方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载\",\"多个方法在同一个类中\",\"多个方法具有相同的方法名\",\"多个方法的参数不相同，类型不同或者数量不同**（参数列表不同 ==> 个数、类型、顺序）**\",\"注意：\",\"重载仅对应方法的定义，与方法的调用无关，调用方式参照标准格式\",\"重载仅针对同一个类中方法的名称与参数进行识别，与返回值无关，换句话说不能通过返回值来判定两个方法是否相互构成重载\",\"简单记忆：\",\"同一个类中，方法名相同，参数不同的方法。与返回值无关。（两同、一不同） 参数不同：个数不同、类型不同、顺序不同\",\"方法的重载虚拟机怎么来进行区分调用的是哪一个？ ==> Java虚拟机会通过参数的不同来区分同名的方法\",\"正确范例：\",\"public class MethodDemo { public static void fn(int a) { //方法体 } public static int fn(double a) { //方法体 } } public class MethodDemo { public static float fn(int a) { //方法体 } public static int fn(int a , int b) { //方法体 } } \",\"错误范例：\",\"public class MethodDemo { public static void fn(int a) { //方法体 } public static int fn(int a) { /*错误原因：重载与返回值无关*/ //方法体 } } public class MethodDemo01 { public static void fn(int a) { //方法体 } } public class MethodDemo02 { public static int fn(double a) { /*错误原因：这是两个类的两个fn方法*/ //方法体 } } \"]},\"317\":{\"h\":\"6.2 方法重载练习\",\"t\":[\"需求：使用方法重载的思想，设计比较两个整数是否相同的方法，兼容全整数类型（byte,short,int,long）\",\"思路：\",\"①定义比较两个数字的是否相同的方法compare()方法，参数选择两个int型参数\",\"②定义对应的重载方法，变更对应的参数类型，参数变更为两个long型参数\",\"③定义所有的重载方法，两个byte类型与两个short类型参数\",\"④完成方法的调用，测试运行结果\",\"代码：\",\"public class MethodTest { public static void main(String[] args) { //调用方法 System.out.println(compare(10, 20)); System.out.println(compare((byte) 10, (byte) 20)); System.out.println(compare((short) 10, (short) 20)); System.out.println(compare(10L, 20L)); } //int public static boolean compare(int a, int b) { System.out.println(\\\"int\\\"); return a == b; } //byte public static boolean compare(byte a, byte b) { System.out.println(\\\"byte\\\"); return a == b; } //short public static boolean compare(short a, short b) { System.out.println(\\\"short\\\"); return a == b; } //long public static boolean compare(long a, long b) { System.out.println(\\\"long\\\"); return a == b; } } \"]},\"318\":{\"h\":\"7.3 数组遍历\",\"t\":[\"需求：设计一个方法用于数组遍历，要求遍历的结果是在一行上的。例如：[11, 22, 33, 44, 55]\",\"思路：\",\"①因为要求结果在一行上输出，所以这里需要在学习一个新的输出语句System.out.print(“内容”);\",\"System.out.println(“内容”); 输出内容并换行\",\"System.out.print(“内容”); 输出内容不换行\",\"System.out.println(); 起到换行的作用\",\"②定义一个数组，用静态初始化完成数组元素初始化\",\"③定义一个方法，用数组遍历通用格式对数组进行遍历\",\"④用新的输出语句修改遍历操作\",\"⑤调用遍历方法\",\"代码：\",\"public class Test1 { public static void main(String[] args) { /* //先打印数据，再进行换行 System.out.println(\\\"aaa\\\"); //只打印不换行 System.out.print(\\\"bbb\\\"); System.out.print(\\\"ddd\\\"); //不打印任何内容，只换行 System.out.println(); System.out.print(\\\"cc\\\");*/ //设计一个方法用于数组遍历，要求遍历的结果是在一行上的。例如：[11, 22, 33, 44, 55] int[] arr = {1,2,3,4,5}; printArr(arr); } //1.我要遍历数组 //2.需要什么？ 数组 //3.调用处是否需要使用方法的结果。 public static void printArr(int[] arr){ System.out.print(\\\"[\\\"); for (int i = 0; i < arr.length; i++) { if(i == arr.length - 1){ System.out.println(arr[i] + \\\"]\\\"); }else{ System.out.print(arr[i] + \\\", \\\"); } } } } \"]},\"319\":{\"h\":\"7.4 数组最大值\",\"t\":[\"需求：设计一个方法用于获取数组中元素的最大值\",\"思路：\",\"①定义一个数组，用静态初始化完成数组元素初始化\",\"②定义一个方法，用来获取数组中的最大值，最值的认知和讲解我们在数组中已经讲解过了\",\"③调用获取最大值方法，用变量接收返回结果\",\"④把结果输出在控制台\",\"代码：\",\"public class MethodTest02 { public static void main(String[] args) { //定义一个数组，用静态初始化完成数组元素初始化 int[] arr = {12, 45, 98, 73, 60}; //调用获取最大值方法，用变量接收返回结果 int number = getMax(arr); //把结果输出在控制台 System.out.println(\\\"number:\\\" + number); } //定义一个方法，用来获取数组中的最大值 /* 两个明确： 返回值类型：int 参数：int[] arr */ public static int getMax(int[] arr) { int max = arr[0]; for(int x=1; x<arr.length; x++) { if(arr[x] > max) { max = arr[x]; } } return max; } } \"]},\"320\":{\"h\":\"7.6 获取索引\",\"t\":[\"需求：定义一个方法获取数字，在数组中的索引位置，将结果返回给调用处，如果有重复的，只要获取第一个即可。\",\"代码示例：\",\"package com.itheima.demo; public class Test4 { public static void main(String[] args) { //定义一个方法获取数字，在数组中的索引位置，将结果返回给调用处 //如果有重复的，只要获取第一个即可 int[] arr = {1,2,3,4,5}; int index = contains(arr, 3); System.out.println(index); } //1. 我要干嘛？判断数组中的某一个数是否存在 //2. 需要什么？数组 数字 //3. 调用处是否需要继续使用？返回 //获取number在arr中的位置 public static int contains(int[] arr, int number) { //遍历arr得到每一个元素 for (int i = 0; i < arr.length; i++) { //拿着每一个元素跟number比较 if(arr[i] == number){ //如果相等，表示找到了 return i; } } //当循环结束之后，如果还不能返回索引，表示数组中不存在该数据 //可以返回-1 return -1; } } \"]},\"321\":{\"h\":\"07-Java面向对象\",\"t\":[\"面向对象的一个介绍：\",\"面向：拿、找\",\"对象：能干活的东西\",\"面向对象编程：拿东西过来做对应的事情\",\"带着一些问题进行学习：\",\"为什么要使用面向对象编程？\",\"面向对象编程到底学什么？\"]},\"322\":{\"h\":\"Java为什么要使用面向对象的方式来编程？\",\"t\":[\"我们要洗衣服时，就是用的洗衣机帮我们完成这件事情\",\"我们要扫地时，可以找扫地机器人帮我们完成这件事事情\",\"跟朋友聊天时，可以通过手机帮我们完成这件事情\",\"符合人类思维习惯，让编程更简单，更好理解\",\"image-20231224225553701\"]},\"323\":{\"h\":\"在Java中面向对象到底学什么？\",\"t\":[\"学习获取已有的对象并使用\",\"学习如何自己设计对象并使用 ==> 面向对象的语法\"]},\"324\":{\"h\":\"1. 类和对象\"},\"325\":{\"h\":\"1.1 类和对象的理解\",\"t\":[\"客观存在的事物皆为对象 ，所以我们也常常说万物皆对象。\",\"类 \",\"类的理解 \",\"类是对现实生活中一类具有共同属性和行为的事物的抽象\",\"类是对象的数据类型，类是具有相同属性和行为的一组对象的集合\",\"简单理解：类就是对现实事物的一种描述\",\"类的组成 \",\"属性：指事物的特征，例如：手机事物（品牌，价格，尺寸）\",\"行为：指事物能执行的操作，例如：手机事物（打电话，发短信）\",\"类和对象的关系 \",\"类：类是对现实生活中一类具有共同属性和行为的事物的抽象\",\"对象：是能够看得到摸的着的真实存在的实体\",\"简单理解：类是对事物的一种描述，对象则为具体存在的事物\"]},\"326\":{\"h\":\"1.2 类的定义\",\"t\":[\"类的组成是由属性和行为两部分组成\",\"属性：在类中通过成员变量来体现（类中方法外的变量）\",\"行为：在类中通过成员方法来体现（和前面的方法相比去掉static关键字即可）\",\"类的定义步骤：\",\"①定义类\",\"②编写类的成员变量\",\"③编写类的成员方法\",\"public class 类名 { // 成员变量 变量1的数据类型 变量1； 变量2的数据类型 变量2; … // 成员方法 方法1; 方法2; } \",\"示例代码：\",\"/* 手机类： 类名： 手机(Phone) 成员变量： 品牌(brand) 价格(price) 成员方法： 打电话(call) 发短信(sendMessage) */ public class Phone { //成员变量 String brand; int price; //成员方法 public void call() { System.out.println(\\\"打电话\\\"); } public void sendMessage() { System.out.println(\\\"发短信\\\"); } } \"]},\"327\":{\"h\":\"1.3 对象的使用\",\"t\":[\"创建对象的格式： \",\"类名 对象名 = new 类名();\",\"调用成员的格式： \",\"对象名.成员变量\",\"对象名.成员方法();\",\"示例代码\",\"/* 创建对象 格式：类名 对象名 = new 类名(); 范例：Phone p = new Phone(); 使用对象 1：使用成员变量 格式：对象名.变量名 范例：p.brand 2：使用成员方法 格式：对象名.方法名() 范例：p.call() */ public class PhoneDemo { public static void main(String[] args) { //创建对象 Phone p = new Phone(); //使用成员变量 System.out.println(p.brand); System.out.println(p.price); p.brand = \\\"小米\\\"; p.price = 2999; System.out.println(p.brand); System.out.println(p.price); //使用成员方法 p.call(); p.sendMessage(); } } \"]},\"328\":{\"h\":\"1.4 学生对象-练习\",\"t\":[\"需求：首先定义一个学生类，然后定义一个学生测试类，在学生测试类中通过对象完成成员变量和成员方法的使用\",\"分析： \",\"成员变量：姓名，年龄…\",\"成员方法：学习，做作业…\",\"示例代码：\",\"public class Student { //成员变量 String name; int age; //成员方法 public void study() { System.out.println(\\\"好好学习，天天向上\\\"); } public void doHomework() { System.out.println(\\\"键盘敲烂，月薪过万\\\"); } } /* 学生测试类 */ public class StudentDemo { public static void main(String[] args) { //创建对象 Student s = new Student(); //使用对象 System.out.println(s.name + \\\",\\\" + s.age); s.name = \\\"林青霞\\\"; s.age = 30; System.out.println(s.name + \\\",\\\" + s.age); s.study(); s.doHomework(); } } \",\"定义类的补充注意事项：\",\"类名首字母建议大写，需要见名知意，驼峰模式。\",\"一个Java文件中可以定义多个class类，且只能一个类是public修饰，而且public修饰的类名必须成为代码文件名。实际开发中建议还是一个文件定义一个class类\",\"成员变量的完整定义格式是：修饰符 数据类型 变量名称 = 初始化值；一般无需指定初始化值，因为其存在默认值。\",\"基本类型和引用类型对象的默认值：\",\"image-20231224231307531\"]},\"329\":{\"h\":\"2. 对象内存图\"},\"330\":{\"h\":\"2.1 单个对象内存图\",\"t\":[\"成员变量使用过程\",\"1\",\"成员方法调用过程\",\"2\"]},\"331\":{\"h\":\"2.2 多个对象内存图\",\"t\":[\"成员变量使用过程\",\"3\",\"成员方法调用过程\",\"4\",\"总结：\",\"多个对象在堆内存中，都有不同的内存划分，成员变量存储在各自的内存区域中，成员方法多个对象共用的一份\"]},\"332\":{\"h\":\"3. 成员变量和局部变量\"},\"333\":{\"h\":\"3.1 成员变量和局部变量的区别\",\"t\":[\"类中位置不同：成员变量（类中方法外）局部变量（方法内部或方法声明上）\",\"内存中位置不同：成员变量（堆内存）局部变量（栈内存）\",\"生命周期不同：成员变量（随着对象的存在而存在，随着对象的消失而消失）局部变量（随着方法的调用而存在，醉着方法的调用完毕而消失）\",\"初始化值不同：成员变量（有默认初始化值）局部变量（没有默认初始化值，必须先定义，赋值才能使用）\"]},\"334\":{\"h\":\"4. 封装\"},\"335\":{\"h\":\"4.1 封装思想\",\"t\":[\"封装概述 ==>是面向对象三大特征之一（封装，继承，多态）对象代表什么，就得封装对应的数据，并提供数据对应的行为\",\"封装代码实现\",\"将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问\",\"成员变量private，提供对应的getXxx()/setXxx()方法\",\"封装的好处： 让编程变得很简单，有什么事，找对象，调方法就行。 降低我们的学习成本，可以少学、少记，或者说压根不用学，不用记对象有哪些方法，有需要时去找就行\"]},\"336\":{\"h\":\"4.2 private关键字\",\"t\":[\"private是一个修饰符，可以用来修饰成员（成员变量，成员方法）\",\"被private修饰的成员，只能在本类进行访问，针对private修饰的成员变量，如果需要被其他类使用，提供相应的操作\",\"提供“get变量名()”方法，用于获取成员变量的值，方法用public修饰\",\"提供“set变量名(参数)”方法，用于设置成员变量的值，方法用public修饰\",\"示例代码：\",\"/* 学生类 */ class Student { //成员变量 String name; private int age; //提供get/set方法 public void setAge(int a) { if(a<0 || a>120) { System.out.println(\\\"你给的年龄有误\\\"); } else { age = a; } } public int getAge() { return age; } //成员方法 public void show() { System.out.println(name + \\\",\\\" + age); } } /* 学生测试类 */ public class StudentDemo { public static void main(String[] args) { //创建对象 Student s = new Student(); //给成员变量赋值 s.name = \\\"林青霞\\\"; s.setAge(30); //调用show方法 s.show(); } } \"]},\"337\":{\"h\":\"4.3 private的使用\",\"t\":[\"需求：定义标准的学生类，要求name和age使用private修饰，并提供set和get方法以及便于显示数据的show方法，测试类中创建对象并使用，最终控制台输出 林青霞，30\",\"示例代码：\",\"/* 学生类 */ class Student { //成员变量 private String name; private int age; //get/set方法 public void setName(String n) { name = n; } public String getName() { return name; } public void setAge(int a) { age = a; } public int getAge() { return age; } public void show() { System.out.println(name + \\\",\\\" + age); } } /* 学生测试类 */ public class StudentDemo { public static void main(String[] args) { //创建对象 Student s = new Student(); //使用set方法给成员变量赋值 s.setName(\\\"林青霞\\\"); s.setAge(30); s.show(); //使用get方法获取成员变量的值 System.out.println(s.getName() + \\\"---\\\" + s.getAge()); System.out.println(s.getName() + \\\",\\\" + s.getAge()); } } \",\"总结：\",\"private关键字是一个权限修饰符\",\"可以修饰成员（成员变量和成员方法)\",\"被private修饰的成员只能在本类中才能访问\",\"针对private修饰的成员变量，如果需要被其他类使用，提供相应的操作\",\"提供 setXxx(参数) 方法，用于给成员变量赋值，方法用public修饰\",\"提供 getXxx() 方法，用于获取成员变量的值，方法用public修饰\"]},\"338\":{\"h\":\"4.4 this关键字\",\"t\":[\"this修饰的变量用于指代成员变量，其主要作用是（区分局部变量和成员变量的重名问题）\",\"方法的形参如果与成员变量同名，不带this修饰的变量指的是形参，而不是成员变量\",\"方法的形参没有与成员变量同名，不带this修饰的变量指的是成员变量\",\"public class Student { private String name; private int age; public void setName(String name) { this.name = name; } public String getName() { return name; } public void setAge(int age) { this.age = age; } public int getAge() { return age; } public void show() { System.out.println(name + \\\",\\\" + age); } } \",\"总结：\",\"就近原则\",\"System.out.println(age);\",\"System.out.println(this.age);\",\"this的作用？ ==> 可以区别成员变量和局部变量\",\"this的本质和内存图（扩展内容讲解）\"]},\"339\":{\"h\":\"5. 构造方法\"},\"340\":{\"h\":\"5.1 构造方法概述\",\"t\":[\"构造方法是一种特殊的方法，也叫构造器、构造函数\",\"作用：在创建对象的时候给成员变量进行初始化的 就是给对象中的成员变量进行赋值的\",\"作用：创建对象 Student stu = new Student();\",\"格式：\",\"public class 类名{ 修饰符 类名( 参数 ) { } } \",\"功能：主要是完成对象数据的初始化\",\"示例代码：\",\"class Student { private String name; private int age; //构造方法 public Student() { System.out.println(\\\"无参构造方法\\\"); } public void show() { System.out.println(name + \\\",\\\" + age); } } /* 测试类 */ public class StudentDemo { public static void main(String[] args) { //创建对象 Student s = new Student(); s.show(); } } \"]},\"341\":{\"h\":\"5.2 构造方法的注意事项\",\"t\":[\"构造方法的创建\",\"如果没有定义构造方法，系统将给出一个默认的无参数构造方法\",\"如果定义了构造方法，系统将不再提供默认的构造方法\",\"构造方法的重载\",\"如果自定义了带参构造方法，还要使用无参数构造方法，就必须再写一个无参数构造方法\",\"推荐的使用方式\",\"无论是否使用，都手工书写无参数构造方法\",\"**重要功能！ –> ** 可以使用带参构造，为成员变量进行初始化\"]},\"342\":{\"h\":\"5.3 构造方法的特点\",\"t\":[\"方法名与类名相同，大小写也要一致\",\"没有返回值类型，没有void关键字\",\"没有具体的返回值（不能由return带回结果数据）\"]},\"343\":{\"h\":\"5.4 （重要）构造方法的执行时机\",\"t\":[\"是在创建对象的时候由虚拟机调用，不能手动调用构造方法\",\"每创建一次对象，就会调用一次构造方法\",\"总结：\",\"构造方法的作用?\",\"创造对象的时候，由虚拟机自动调用，给成员变量进行初始化的。\",\"构造方法有几种，各自的作用是什么?\",\"无参数构造方法：初始化的对象时，成员变量的数据均采用默认值。\",\"有参数构造方法：在初始化对象的时候，同时可以为对象进行赋值。\",\"构造方法有哪些注意事项?\",\"任何类定义出来，默认就自带了无参数构造器，写不写都有。\",\"一旦定义了有参数构造器，无参数构造器就没有了，此时就需要自己写无参数构造器了。\",\"建议在任何时候都手动写上空参和带全部参数的构造方法\",\"注意:\",\"构造方法存在的误区：构造方法就是用来创建对象的 这句话是错误的！\",\"构造方法真正的作用：在创造对象的时候，虚拟机会自动调用构造方法，作用是给成员变量进行初始化的。\",\"示例代码\",\"/* 学生类 */ class Student { private String name; private int age; public Student() {} public Student(String name) { this.name = name; } public Student(int age) { this.age = age; } public Student(String name,int age) { this.name = name; this.age = age; } public void show() { System.out.println(name + \\\",\\\" + age); } } /* 测试类 */ public class StudentDemo { public static void main(String[] args) { //创建对象 Student s1 = new Student(); s1.show(); //public Student(String name) Student s2 = new Student(\\\"林青霞\\\"); s2.show(); //public Student(int age) Student s3 = new Student(30); s3.show(); //public Student(String name,int age) Student s4 = new Student(\\\"林青霞\\\",30); s4.show(); } } \"]},\"344\":{\"h\":\"5.3 标准类制作\",\"t\":[\"类名需要见名知意\",\"成员变量使用private修饰\",\"提供至少两个构造方法（无参构造方法、带全部参数的构造方法）\",\"get和set方法 ==> 提供每一个成员变量对应的setXxx()/getXxx()\",\"如果还有其他行为，也需要写上\"]},\"345\":{\"h\":\"5.4 练习1\",\"t\":[\"需求：定义标准学生类，要求分别使用空参和有参构造方法创建对象，空参创建的对象通过setXxx赋值，有参创建的对象直接赋值，并通过show方法展示数据。\",\"示例代码：\",\"class Student { //成员变量 private String name; private int age; //构造方法 public Student() { } public Student(String name, int age) { this.name = name; this.age = age; } //成员方法 public void setName(String name) { this.name = name; } public String getName() { return name; } public void setAge(int age) { this.age = age; } public int getAge() { return age; } public void show() { System.out.println(name + \\\",\\\" + age); } } /* 创建对象并为其成员变量赋值的两种方式 1:无参构造方法创建对象后使用setXxx()赋值 2:使用带参构造方法直接创建带有属性值的对象 */ public class StudentDemo { public static void main(String[] args) { //无参构造方法创建对象后使用setXxx()赋值 Student s1 = new Student(); s1.setName(\\\"林青霞\\\"); s1.setAge(30); s1.show(); //使用带参构造方法直接创建带有属性值的对象 Student s2 = new Student(\\\"林青霞\\\",30); s2.show(); } } \"]},\"346\":{\"h\":\"5.4 练习2\",\"t\":[\"111\",\"public class User { //1.私有化全部的成员变量 //2.空参构造 //3.带全部参数的构造 //4.针对于每一个私有化的成员变量都要提供其对应的get和set方法 //5.如果当前事物还有其他行为，那么也要写出来，比如学生的吃饭，睡觉等行为 private String username;//用户名 private String password;//密码 private String email;//邮箱 private char gender;//性别 private int age;//年龄 //空参构造方法 public User() { } //带全部参数的构造 public User(String username, String password, String email, char gender, int age) { this.username = username; this.password = password; this.email = email; this.gender = gender; this.age = age; } //get和set public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public char getGender() { return gender; } public void setGender(char gender) { this.gender = gender; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public void eat(){ System.out.println(username + \\\"在吃饭\\\"); } } public class Test { public static void main(String[] args) { //写一个标准的javabean类 //咱们在课后只要能把这个标准的javabean能自己写出来，那么就表示今天的知识点就ok了 //利用空参构造创建对象 User u1 = new User(); //如果利用空参创建对象，还想赋值只能用set方法赋值 u1.setUsername(\\\"zhangsan\\\"); u1.setPassword(\\\"1234qwer\\\"); u1.setEmail(\\\"itheima@itcast.cn\\\"); u1.setGender('男'); u1.setAge(23); //获取属性的值并打印 System.out.println(u1.getUsername() + \\\", \\\" + u1.getPassword() + \\\", \\\" + u1.getEmail() + \\\", \\\" + u1.getGender() + \\\", \\\" + u1.getAge()); u1.eat(); System.out.println(\\\"=============================\\\"); //简单的办法 //利用带全部参数的构造来创建对象 //快捷键:ctrl + p User u2 = new User(\\\"lisi\\\",\\\"12345678\\\",\\\"lisi@itcast.cn\\\",'女',24); System.out.println(u2.getUsername() + \\\", \\\" + u2.getPassword() + \\\", \\\" + u2.getEmail() + \\\", \\\" + u2.getGender() + \\\", \\\" + u2.getAge()); u2.eat(); } } \"]},\"347\":{\"h\":\"08-Java字符串常用API\"},\"348\":{\"h\":\"1.API\"},\"349\":{\"h\":\"1.1API概述\",\"t\":[\"什么是API ==> API (Application Programming Interface) ：应用程序编程接口\",\"java中的API\",\"指的就是 JDK 中提供的各种功能的 Java类，这些类将底层的实现封装了起来，我们不需要关心这些类是如何实现的，只需要学习这些类如何使用即可，我们可以通过帮助文档来学习这些API如何使用。\"]},\"350\":{\"h\":\"1.2如何使用API帮助文档\",\"t\":[\"打开帮助文档\",\"01\",\"找到索引选项卡中的输入框\",\"02\",\"在输入框中输入Random\",\"03\",\"看类在哪个包下\",\"04\",\"看类的描述\",\"05\",\"看构造方法\",\"06\",\"看成员方法\",\"07\"]},\"351\":{\"h\":\"2.String类\"},\"352\":{\"h\":\"2.1String类概述\",\"t\":[\"String 类代表字符串，Java 程序中的所有字符串文字（例如“abc”）都被实现为此类的实例。也就是说，Java 程序中所有的双引号字符串，都是 String 类的对象。String 类在 java.lang 包下，所以使用的时候不需要导包！\"]},\"353\":{\"h\":\"2.2String类的特点\",\"t\":[\"字符串不可变，它们的值在创建后不能被更改\",\"虽然 String 的值是不可变的，但是它们可以被共享\",\"字符串效果上相当于字符数组( char[] )，但是底层原理是字节数组( byte[] )\",\"注意：字符串的内容是不会发生改变的，它的对象在创建后不能被更改\"]},\"354\":{\"h\":\"2.3String类的构造方法\",\"t\":[\"常用的构造方法\",\"方法名\",\"说明\",\"public String()\",\"创建一个空白字符串对象，不含有任何内容\",\"public String(String original)\",\"根据传入的字符串，创建字符串对象\",\"public String(char[] chs)\",\"根据字符数组的内容，来创建字符串对象\",\"public String(byte[] bys)\",\"根据字节数组的内容，来创建字符串对象 应用场景：网络中传输的数据都是以字节的形式进行传输的\",\"String s = “abc”;\",\"直接赋值的方式创建字符串对象，内容就是abc\",\"示例代码\",\"public class StringDemo01 { public static void main(String[] args) { //public String()：创建一个空白字符串对象，不含有任何内容 String s1 = new String(); System.out.println(\\\"s1:\\\" + s1); //public String(char[] chs)：根据字符数组的内容，来创建字符串对象 char[] chs = {'a', 'b', 'c'}; String s2 = new String(chs); System.out.println(\\\"s2:\\\" + s2); //public String(byte[] bys)：根据字节数组的内容，来创建字符串对象 byte[] bys = {97, 98, 99}; String s3 = new String(bys); System.out.println(\\\"s3:\\\" + s3); //String s = “abc”; 直接赋值的方式创建字符串对象，内容就是abc String s4 = \\\"abc\\\"; System.out.println(\\\"s4:\\\" + s4); } } \"]},\"355\":{\"h\":\"2.4创建字符串对象两种方式的区别\",\"t\":[\"通过构造方法创建 ==> 通过 new 创建的字符串对象，每一次 new 都会申请一个内存空间，虽然内容相同，但是地址值不同\",\"直接赋值方式创建 ==> 以“”方式给出的字符串，只要字符序列相同(顺序和大小写)，无论在程序代码中出现几次，JVM 都只会建立一个 String 对象，并在字符串池中维护\"]},\"356\":{\"h\":\"2.5字符串的比较\"},\"357\":{\"h\":\"2.5.1 ==号的作用\",\"t\":[\"比较基本数据类型：比较的是具体的值\",\"比较引用数据类型：比较的是对象地址值\"]},\"358\":{\"h\":\"2.5.2 equals方法的作用\",\"t\":[\"方法介绍\",\"public boolean equals(String s) 比较两个字符串内容是否相同、区分大小写 public boolean equalslgnoreCase(String s) 忽略大小写的比较 \",\"示例代码\",\"public class StringDemo02 { public static void main(String[] args) { //构造方法的方式得到对象 char[] chs = {'a', 'b', 'c'}; String s1 = new String(chs); String s2 = new String(chs); //直接赋值的方式得到对象 String s3 = \\\"abc\\\"; String s4 = \\\"abc\\\"; //比较字符串对象地址是否相同 System.out.println(s1 == s2); System.out.println(s1 == s3); System.out.println(s3 == s4); System.out.println(\\\"--------\\\"); //比较字符串内容是否相同 System.out.println(s1.equals(s2)); System.out.println(s1.equals(s3)); System.out.println(s3.equals(s4)); } } \"]},\"359\":{\"h\":\"2.6用户登录案例\"},\"360\":{\"h\":\"2.6.1案例需求\",\"t\":[\"已知用户名和密码，请用程序实现模拟用户登录。总共给三次机会，登录之后，给出相应的提示\"]},\"361\":{\"h\":\"2.6.2代码实现\",\"t\":[\"public class Test1登录案例 { public static void main(String[] args) { //1.定义两个变量用来记录正确的用户名和密码 String rightUsername = \\\"itheima\\\"; String rightPassword = \\\"1234qwer\\\"; //2.键盘录入用户名和密码 //ctrl + alt + T 选择包裹方式 for (int i = 0; i < 3; i++) {//0 1 2 Scanner sc = new Scanner(System.in); System.out.println(\\\"请输入用户名\\\"); String username = sc.next(); System.out.println(\\\"请输入密码\\\"); String password = sc.next(); //3.判断比较 if (username.equals(rightUsername) && password.equals(rightPassword)) { System.out.println(\\\"登录成功\\\"); //如果正确，循环结束 break; } else { //最后一次机会 if(i == 2){ System.out.println(\\\"账户\\\" + username + \\\"被锁定，请联系黑马程序员官方小姐姐：XXXXXXX\\\"); }else{ //不是最后一次机会 System.out.println(\\\"用户名或密码错误，登录失败,还剩下\\\" + (2 - i) + \\\"次机会\\\");//2 1 0 } } } } } \"]},\"362\":{\"h\":\"2.7遍历字符串案例\"},\"363\":{\"h\":\"2.7.1案例需求\",\"t\":[\"键盘录入一个字符串，使用程序实现在控制台遍历该字符串\"]},\"364\":{\"h\":\"2.7.2直接遍历字符串\",\"t\":[\"public class Test2字符串直接遍历 { public static void main(String[] args) { //两个方法： //charAt()：会根据索引获取对应的字符 //length(): 会返回字符串的长度 //1.键盘录入一个字符串 Scanner sc = new Scanner(System.in); System.out.println(\\\"请输入字符串\\\"); String str = sc.next(); System.out.println(str); //2.遍历 for (int i = 0; i < str.length(); i++) { //i 依次表示字符串的每一个索引 //索引的范围：0 ~ 长度-1 //根据索引获取字符串里面的每一个字符 //ctrl + alt + V 自动生成左边的接受变量 char c = str.charAt(i); System.out.println(c);s } } } \"]},\"365\":{\"h\":\"2.8统计字符次数案例\"},\"366\":{\"h\":\"2.8.1案例需求\",\"t\":[\"键盘录入一个字符串，统计该字符串中大写字母字符，小写字母字符，数字字符出现的次数(不考虑其他字符)\"]},\"367\":{\"h\":\"2.8.2代码实现\",\"t\":[\"public class Test4统计个数 { public static void main(String[] args) { //键盘录入一个字符串，统计大写，小写，数字出现的次数 //1.键盘录入一个字符串 Scanner sc = new Scanner(System.in); System.out.println(\\\"请输入一个字符串\\\"); String str = sc.next(); //2.统计 --- 计数器count //此时我要统计的有3样东西，所以要定义3个计数器分别进行统计 int bigCount = 0; int smallCount = 0; int numberCount = 0; //得到这个字符串里面每一个字符 for (int i = 0; i < str.length(); i++) { //i 表示字符串中的索引 //c 表示字符串中的每一个字符 char c = str.charAt(i); //对c进行判断 if (c >= 'a' && c <= 'z') { smallCount++; }else if(c >= 'A' && c <= 'Z'){ bigCount++; }else if(c >= '0' && c <= '9'){ numberCount++; } } //3.当循环结束之后，三个变量记录的就是对应的个数 System.out.println(\\\"大写字符有:\\\" + bigCount + \\\"个\\\"); System.out.println(\\\"小写字符有:\\\" + smallCount + \\\"个\\\"); System.out.println(\\\"数字字符有:\\\" + numberCount + \\\"个\\\"); } } \"]},\"368\":{\"h\":\"2.9字符串拼接案例\"},\"369\":{\"h\":\"2.9.1案例需求\",\"t\":[\"定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回，调用该方法，并在控制台输出结果。例如，数组为 int[] arr = {1,2,3}; ，执行方法后的输出结果为：[1, 2, 3]\"]},\"370\":{\"h\":\"2.9.2代码实现\",\"t\":[\"public class Test5数组拼接成字符串 { public static void main(String[] args) { //定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回，调用该方法， //并在控制台输出结果。例如，数组为 int[] arr = {1,2,3}; //执行方法后的输出结果为：[1, 2, 3] int[] arr = {1, 2, 3, 4, 5}; String str = arrToString(arr); System.out.println(str); } //作用：把一个数组变成字符串 public static String arrToString(int[] arr) { String s = \\\"\\\"; //拼接左括号 s = s + \\\"[\\\"; //此时是拿着长度为0的字符串，跟[进行拼接，产生一个新的字符串。 //把新的字符串再赋值给s，此时变量s记录的就是新的字符串\\\"[\\\"的地址值 //下面我想得到数组里面的每一个元素并进行拼接 //那么就需要遍历数组，得到每一个元素才行 for (int i = 0; i < arr.length; i++) { //假设第一次循环:i = 0 获取的就是0索引上的元素 //在拼接的时候：\\\"[\\\" + 1 + \\\", \\\" 拼接完毕之后产生一个新的字符串 \\\"[1, \\\" //第二次循环：i = 1 获取的就是1索引上的元素 //在拼接的时候： 此时s就是第一次循环结束后拼接完毕的结果：\\\"[1, \\\" //在拼接的时候：\\\"[1, \\\" + 2 + \\\", \\\" 拼接完毕之后产生一个新的字符串 \\\"[1, 2, \\\" //... if(i == arr.length - 1){ //如果是最后一个元素，那么不需要拼接逗号空格 s = s + arr[i]; }else{ //如果不是最后一个元素，需要拼接元素和逗号空格 s = s + arr[i] + \\\", \\\"; } } //等循环结束之后，再拼接最后一个右括号 s = s + \\\"]\\\"; return s; } //用来遍历数组 public static void printArr(int[] arr) { System.out.print(\\\"[\\\"); for (int i = 0; i < arr.length; i++) { if (i == arr.length - 1) { System.out.print(arr[i]); } else { System.out.print(arr[i] + \\\", \\\"); } } System.out.println(\\\"]\\\"); //[1, 2, 3, 4, 5] //我们现在要知道，这个最终结果是怎么来的？ //从到右依次打印得来的。 } } \"]},\"371\":{\"h\":\"2.10字符串反转案例\"},\"372\":{\"h\":\"2.10.1案例需求\",\"t\":[\"定义一个方法，实现字符串反转。键盘录入一个字符串，调用该方法后，在控制台输出结果\",\"例如，键盘录入 abc，输出结果 cba\"]},\"373\":{\"h\":\"2.10.2代码实现\",\"t\":[\"public class Test6反转字符串 { public static void main(String[] args) { /*定义一个方法，实现字符串反转。键盘录入一个字符串，调用该方法后，在控制台输出结果 例如，键盘录入 abc，输出结果 cba*/ //1.定义一个字符串 Scanner sc = new Scanner(System.in); System.out.println(\\\"请输入一个字符串\\\"); String str = sc.next(); //2.定义一个方法，反转字符串 //abc ---> cba //可以把字符串倒着遍历，再拼接 String result = reverse(str); System.out.println(result); } //注释：方法的作用就是反转字符串 //把传递进来的字符串进行反转 public static String reverse(String str){//abc //核心思想：倒着遍历并进行拼接就可以了 //fori :正着遍历 forr：倒着遍历 String s = \\\"\\\"; for (int i = str.length() - 1; i >= 0; i--) { //i 依次表示字符串里面的每一个索引（倒着的） //我们就可以拿到里面的每一个字符并拼接 s = s + str.charAt(i); } //把倒着拼接之后的结果返回即可 return s; } } \"]},\"374\":{\"h\":\"2.11 金额转换\"},\"375\":{\"h\":\"2.11.1 案例需求\",\"t\":[\"把2135变成：零佰零拾零万贰仟壹佰叁拾伍元\",\"把789变成：零佰零拾零万零仟柒佰捌拾玖元\"]},\"376\":{\"h\":\"2.11.2 代码实现\",\"t\":[\"package com.itheima.stringdemo; import java.util.Scanner; public class StringDemo9 { public static void main(String[] args) { //1.键盘录入一个金额 Scanner sc = new Scanner(System.in); int money; while (true) { System.out.println(\\\"请录入一个金额\\\"); money = sc.nextInt(); if (money >= 0 && money <= 9999999) { break; } else { System.out.println(\\\"金额无效\\\"); } } //定义一个变量用来表示钱的大写 String moneyStr = \\\"\\\"; //2.得到money里面的每一位数字,再转成中文 while (true) {//2135 //从右往左获取数据，因为右侧是数据的个位 int ge = money % 10; String capitalNumber = getCapitalNumber(ge); //把转换之后的大写拼接到moneyStr当中 moneyStr = capitalNumber + moneyStr; //第一次循环 ： \\\"伍\\\" + \\\"\\\" = \\\"伍\\\" //第二次循环 ： \\\"叁\\\" + \\\"伍\\\" = \\\"叁伍\\\" //去掉刚刚获取的数据 money = money / 10; //如果数字上的每一位全部获取到了，那么money记录的就是0，此时循环结束 if (money == 0) { break; } } //3.在前面补0，补齐7位 int count = 7 - moneyStr.length(); for (int i = 0; i < count; i++) { moneyStr = \\\"零\\\" + moneyStr; } System.out.println(moneyStr);//零零零贰壹叁伍 //4.插入单位 //定义一个数组表示单位 String[] arr = {\\\"佰\\\",\\\"拾\\\",\\\"万\\\",\\\"仟\\\",\\\"佰\\\",\\\"拾\\\",\\\"元\\\"}; // 零 零 零 贰 壹 叁 伍 //遍历moneyStr，依次得到 零 零 零 贰 壹 叁 伍 //然后把arr的单位插入进去 String result = \\\"\\\"; for (int i = 0; i < moneyStr.length(); i++) { char c = moneyStr.charAt(i); //把大写数字和单位拼接到result当中 result = result + c + arr[i]; } //5.打印最终结果 System.out.println(result); } //定义一个方法把数字变成大写的中文 //1 -- 壹 public static String getCapitalNumber(int number) { //定义数组，让数字跟大写的中文产生一个对应关系 String[] arr = {\\\"零\\\", \\\"壹\\\", \\\"贰\\\", \\\"叁\\\", \\\"肆\\\", \\\"伍\\\", \\\"陆\\\", \\\"柒\\\", \\\"捌\\\", \\\"玖\\\"}; //返回结果 return arr[number]; } } \"]},\"377\":{\"h\":\"2.12 手机号屏蔽\",\"t\":[\"需求：以字符串的形式从键盘接受一个手机号，将中间四位号码屏蔽\",\"最终效果为：131****9468\",\"代码实现：\",\"public class Test8手机号屏蔽 { public static void main(String[] args) { /*以字符串的形式从键盘接受一个手机号，将中间四位号码屏蔽 最终效果为：131****9468*/ //1.键盘录入一个手机号码 Scanner sc = new Scanner(System.in); System.out.println(\\\"请输入手机号码\\\"); String phoneNumber = sc.next();//13112349408 //2.截取手机号码中的前三位 String star = phoneNumber.substring(0, 3); //3.截取手机号码中的最后四位 //此时我用substring方法，是用1个参数的，还是两个参数的？1个参数的会更好 //因为现在我要截取到最后，所以建议使用1个参数的。 String end = phoneNumber.substring(7); //4.拼接 String result = star + \\\"****\\\" + end; System.out.println(result); } } \"]},\"378\":{\"h\":\"2.13 敏感词替换\",\"t\":[\"需求1：键盘录入一个 字符串，如果字符串中包含（TMD），则使用***替换\",\"public class Test9敏感词替换 { public static void main(String[] args) { //1.定义一个变量表示骂人的话 String talk = \\\"后裔你玩什么啊，TMD\\\"; //2.把这句话中的敏感词进行替换 String result = talk.replace(\\\"TMD\\\", \\\"***\\\"); //3.打印 System.out.println(talk); System.out.println(result); } } \",\"需求2：如果要替换的敏感词比较多怎么办？\",\"public class Test10多个敏感词替换 { public static void main(String[] args) { //实际开发中，敏感词会有很多很多 //1.先键盘录入要说的话 Scanner sc = new Scanner(System.in); System.out.println(\\\"请输入要说的话\\\"); String talk = sc.next();//后裔你玩什么啊，TMD,GDX,ctmd,ZZ //2.定义一个数组用来存多个敏感词 String[] arr = {\\\"TMD\\\",\\\"GDX\\\",\\\"ctmd\\\",\\\"ZZ\\\",\\\"lj\\\",\\\"FW\\\",\\\"nt\\\"}; //3.把说的话中所有的敏感词都替换为*** for (int i = 0; i < arr.length; i++) { //i 索引 //arr[i] 元素 --- 敏感词 talk = talk.replace(arr[i],\\\"***\\\"); } //4.打印结果 System.out.println(talk);//后裔你玩什么啊，***,***,***,*** } } \"]},\"379\":{\"h\":\"2.14 身份证信息查看\",\"t\":[\"身份证的每一位都是有固定的含义：\",\"1、2位：省份\",\"3、4位：城市\",\"5、6位：区县\",\"7-14位：出生年、月、日\",\"15、16位：所在地派出所\",\"17位：性别（奇数男性，偶数女性）\",\"18位：个人信息码（随机产生）\",\"要求打印内容方式如下：\",\"​ 人物信息为：\",\"​ 出生年月日：XXXX年X月X日\",\"​ 性别为：男/女\",\"package com.itheima.stringdemo; public class StringDemo11 { public static void main(String[] args) { //1.定义一个字符串记录身份证号码 String id = \\\"321281202001011234\\\"; //2.获取出生年月日 String year = id.substring(6, 10); String month = id.substring(10, 12); String day = id.substring(12, 14); System.out.println(\\\"人物信息为：\\\"); System.out.println(\\\"出生年月日:\\\" + year + \\\"年\\\" + month + \\\"月\\\" + day + \\\"日\\\"); //3.获取性别 char gender = id.charAt(16);//'3' ---> 3 //利用ASCII码表进行转换 //'0' ---> 48 //'1' ---> 49 //'2' ---> 50 //'3' ---> 51 //'4' ---> 52 //'5' ---> 53 //'6' ---> 54 //'7' ---> 55 //'8' ---> 56 //'9' ---> 57 int num = gender - 48; if(num % 2 == 0){ System.out.println(\\\"性别为:女\\\"); }else{ System.out.println(\\\"性别为:男\\\"); } } } \"]},\"380\":{\"h\":\"3.StringBuilder\",\"t\":[\"StringBuilder 可以看成是一个容器，创建之后里面的内容是可变的。\",\"当我们在拼接字符串和反转字符串的时候会使用到\",\"使用StringBuilder的场景：\",\"字符串的拼接\",\"字符串的反转\"]},\"381\":{\"h\":\"3.1 基本使用\",\"t\":[\"public class StringBuilderDemo3 { public static void main(String[] args) { //1.创建对象 StringBuilder sb = new StringBuilder(\\\"abc\\\"); //2.添加元素 /*sb.append(1); sb.append(2.3); sb.append(true);*/ //反转 sb.reverse(); //获取长度 int len = sb.length(); System.out.println(len); //打印 //普及： //因为StringBuilder是Java已经写好的类 //java在底层对他做了一些特殊处理。 //打印对象不是地址值而是属性值。 System.out.println(sb); } } \",\"注意：StringBuilder在打印其对象时，打印的是属性值（因为Java在底层对其做了一些特殊处理）\"]},\"382\":{\"h\":\"3.2 链式编程\",\"t\":[\"方法返回的是自身对象，可以直接去调用自身其他的方法\",\"public class StringBuilderDemo4 { public static void main(String[] args) { //1.创建对象 StringBuilder sb = new StringBuilder(); //2.添加字符串 sb.append(\\\"aaa\\\").append(\\\"bbb\\\").append(\\\"ccc\\\").append(\\\"ddd\\\"); System.out.println(sb);//aaabbbcccddd //3.再把StringBuilder变回字符串 String str = sb.toString(); System.out.println(str);//aaabbbcccddd } } \"]},\"383\":{\"h\":\"3.3 练习1：对称字符串\",\"t\":[\"需求：键盘接受一个字符串，程序判断出该字符串是否是对称字符串，并在控制台打印是或不是\",\"对称字符串：123321、111 非对称字符串：123123 \",\"代码示例：\",\"public class StringBuilderDemo6 { //使用StringBuilder的场景： //1.字符串的拼接 //2.字符串的反转 public static void main(String[] args) { //1.键盘录入一个字符串 Scanner sc = new Scanner(System.in); System.out.println(\\\"请输入一个字符串\\\"); String str = sc.next(); //2.反转键盘录入的字符串 String result = new StringBuilder().append(str).reverse().toString(); //3.比较 if(str.equals(result)){ System.out.println(\\\"当前字符串是对称字符串\\\"); }else{ System.out.println(\\\"当前字符串不是对称字符串\\\"); } } } \"]},\"384\":{\"h\":\"3.4 练习2：拼接字符串\",\"t\":[\"需求：定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回。\",\"​ 调用该方法，并在控制台输出结果。\",\"​ 例如：数组为int[] arr = {1,2,3};\",\"​ 执行方法后的输出结果为：[1, 2, 3]\",\"代码示例:\",\"package com.itheima.stringbuilderdemo; public class StringBuilderDemo7 { public static void main(String[] args) { //1.定义数组 int[] arr = {1,2,3}; //2.调用方法把数组变成字符串 String str = arrToString(arr); System.out.println(str); } public static String arrToString(int[] arr){ StringBuilder sb = new StringBuilder(); sb.append(\\\"[\\\"); for (int i = 0; i < arr.length; i++) { if(i == arr.length - 1){ sb.append(arr[i]); }else{ sb.append(arr[i]).append(\\\", \\\"); } } sb.append(\\\"]\\\"); return sb.toString(); } } \"]},\"385\":{\"h\":\"4. StringJoiner\",\"t\":[\"StringJoiner跟StringBuilder一样，也可以看成是一个容器，创建之后里面的内容是可变的。\",\"作用：提高字符串的操作效率，而且代码编写特别简洁，但是目前市场上很少有人用。\",\"JDK8出现的\",\"基本使用：\",\"//1.创建一个对象，并指定中间的间隔符号 StringJoiner sj = new StringJoiner(\\\"---\\\"); //2.添加元素 sj.add(\\\"aaa\\\").add(\\\"bbb\\\").add(\\\"ccc\\\"); //3.打印结果 System.out.println(sj);//aaa---bbb---ccc \",\"//1.创建对象 StringJoiner sj = new StringJoiner(\\\", \\\",\\\"[\\\",\\\"]\\\"); //2.添加元素 sj.add(\\\"aaa\\\").add(\\\"bbb\\\").add(\\\"ccc\\\"); int len = sj.length(); System.out.println(len);//15 //3.打印 System.out.println(sj);//[aaa, bbb, ccc] String str = sj.toString(); System.out.println(str);//[aaa, bbb, ccc] \"]},\"386\":{\"h\":\"关于字符串的小扩展：\",\"t\":[\"字符串存储的内存原理\",\"String s = “abc”；直接赋值\",\"特点：\",\"​ 此时字符串abc是存在字符串常量池中的。\",\"​ 先检查字符串常量池中有没有字符串abc，如果有，不会创建新的，而是直接复用。如果没有abc，才会创建一个新的。\",\"所以，直接赋值的方式，代码简单，而且节约内存。\",\"new出来的字符串\",\"看到new关键字，一定是在堆里面开辟了一个小空间。\",\"String s1 = new String（“abc”）；\",\"String s2 = “abc”；\",\"s1记录的是new出来的，在堆里面的地址值。\",\"s2是直接赋值的，所以记录的是字符串常量池中的地址值。\",\"==号比较的到底是什么？\",\"如果比较的是基本数据类型：比的是具体的数值是否相等。\",\"如果比较的是引用数据类型：比的是地址值是否相等。\",\"结论：==只能用于比较基本数据类型。不能比较引用数据类型。\"]},\"387\":{\"h\":\"09-Java集合\"},\"388\":{\"h\":\"1.ArrayList\"},\"389\":{\"h\":\"集合和数组的优势对比：\",\"t\":[\"长度可变\",\"添加数据的时候不需要考虑索引，默认将数据添加到末尾\"]},\"390\":{\"h\":\"1.1 ArrayList类概述\",\"t\":[\"什么是集合：提供一种存储空间可变的存储模型，存储的数据容量可以发生改变\",\"ArrayList集合的特点：长度可以变化，只能存储引用数据类型。\",\"泛型的使用：用于约束集合中存储元素的数据类型\"]},\"391\":{\"h\":\"1.2 ArrayList类常用方法\"},\"392\":{\"h\":\"1.2.1 构造方法\",\"t\":[\"方法名\",\"说明\",\"public ArrayList()\",\"创建一个空的集合对象\"]},\"393\":{\"h\":\"1.2.2 成员方法\",\"t\":[\"方法名\",\"说明\",\"public boolean add(要添加的元素)\",\"将指定的元素追加到此集合的末尾\",\"public boolean remove(要删除的元素)\",\"删除指定元素,返回值表示是否删除成功\",\"public E remove(int index)\",\"删除指定索引处的元素，返回被删除的元素\",\"public E set(int index,E element)\",\"修改指定索引处的元素，返回被修改的元素\",\"public E get(int index)\",\"返回指定索引处的元素\",\"public int size()\",\"返回集合中的元素的个数\"]},\"394\":{\"h\":\"1.2.3 示例代码\",\"t\":[\"public class ArrayListDemo02 { public static void main(String[] args) { //创建集合 ArrayList<String> array = new ArrayList<String>(); //添加元素 array.add(\\\"hello\\\"); array.add(\\\"world\\\"); array.add(\\\"java\\\"); //public boolean remove(Object o)：删除指定的元素，返回删除是否成功 // System.out.println(array.remove(\\\"world\\\")); // System.out.println(array.remove(\\\"javaee\\\")); //public E remove(int index)：删除指定索引处的元素，返回被删除的元素 // System.out.println(array.remove(1)); //IndexOutOfBoundsException // System.out.println(array.remove(3)); //public E set(int index,E element)：修改指定索引处的元素，返回被修改的元素 // System.out.println(array.set(1,\\\"javaee\\\")); //IndexOutOfBoundsException // System.out.println(array.set(3,\\\"javaee\\\")); //public E get(int index)：返回指定索引处的元素 // System.out.println(array.get(0)); // System.out.println(array.get(1)); // System.out.println(array.get(2)); //System.out.println(array.get(3)); //？？？？？？ 自己测试 //public int size()：返回集合中的元素的个数 System.out.println(array.size()); //输出集合 System.out.println(\\\"array:\\\" + array); } } \"]},\"395\":{\"h\":\"1.3 ArrayList存储字符串并遍历\"},\"396\":{\"h\":\"1.3.1 案例需求\",\"t\":[\"创建一个存储字符串的集合，存储3个字符串元素，使用程序实现在控制台遍历该集合\"]},\"397\":{\"h\":\"1.3.2 代码实现\",\"t\":[\"public class ArrayListDemo3 { public static void main(String[] args) { //1.创建集合对象 ArrayList<String> list = new ArrayList<>(); //2.添加元素 list.add(\\\"aaa\\\"); list.add(\\\"bbb\\\"); list.add(\\\"ccc\\\"); list.add(\\\"ddd\\\"); //3.遍历 //快捷键: list.fori 正向遍历 //list.forr 倒着遍历 System.out.print(\\\"[\\\"); for (int i = 0; i < list.size(); i++) { //i 依次表示集合里面的每一个索引 if(i == list.size() - 1){ //最大索引 System.out.print(list.get(i)); }else{ //非最大索引 System.out.print(list.get(i) + \\\", \\\"); } } System.out.print(\\\"]\\\"); } } \"]},\"398\":{\"h\":\"1.4 ArrayList存储学生对象并遍历\"},\"399\":{\"h\":\"1.4.1 案例需求\",\"t\":[\"创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合\"]},\"400\":{\"h\":\"1.4.2 代码实现\",\"t\":[\"public class ArrayListDemo4 { public static void main(String[] args) { //1.创建集合对象，用来存储数据 ArrayList<Student> list = new ArrayList<>(); //2.创建学生对象 Student s1 = new Student(\\\"zhangsan\\\",16); Student s2 = new Student(\\\"lisi\\\",15); Student s3 = new Student(\\\"wangwu\\\",18); //3.把学生对象添加到集合中 list.add(s1); list.add(s2); list.add(s3); //4.遍历 for (int i = 0; i < list.size(); i++) { //i 依次表示集合中的每一个索引 Student stu = list.get(i); System.out.println(stu.getName() + \\\", \\\" + stu.getAge()); } } } \"]},\"401\":{\"h\":\"1.5 查找用户的索引\",\"t\":[\"需求：\",\"1，main方法中定义一个集合，存入三个用户对象。\",\"用户属性为：id，username，password\",\"2，要求：定义一个方法，根据id查找对应的学生信息。\",\"如果存在，返回索引\",\"如果不存在，返回-1\",\"代码示例：\",\"public class ArrayListDemo6 { public static void main(String[] args) { /*需求： 1，main方法中定义一个集合，存入三个用户对象。 用户属性为：id，username，password 2，要求：定义一个方法，根据id查找对应的学生信息。 如果存在，返回索引 如果不存在，返回-1*/ //1.创建集合对象 ArrayList<User> list = new ArrayList<>(); //2.创建用户对象 User u1 = new User(\\\"heima001\\\", \\\"zhangsan\\\", \\\"123456\\\"); User u2 = new User(\\\"heima002\\\", \\\"lisi\\\", \\\"1234\\\"); User u3 = new User(\\\"heima003\\\", \\\"wangwu\\\", \\\"1234qwer\\\"); //3.把用户对象添加到集合当中 list.add(u1); list.add(u2); list.add(u3); //4.调用方法，通过id获取对应的索引 int index = getIndex(list, \\\"heima001\\\"); System.out.println(index); } //1.我要干嘛？ 根据id查找对应的学生信息 //2.我干这件事情需要什么才能完成？ 集合 id //3.方法的调用处是否需要继续使用方法的结果？ //要用必须返回，不要用可以返回也可以不返回 //明确说明需要有返回值 int public static int getIndex(ArrayList<User> list, String id) { //遍历集合得到每一个元素 for (int i = 0; i < list.size(); i++) { User u = list.get(i); String uid = u.getId(); if(uid.equals(id)){ return i; } } //因为只有当集合里面所有的元素都比较完了，才能断定id是不存在的。 return -1; } } \"]},\"402\":{\"h\":\"1.6 判断用户的是否存在\",\"t\":[\"public class ArrayListDemo5 { public static void main(String[] args) { /* 需求： 1，main方法中定义一个集合，存入三个用户对象。 用户属性为：id，username，password 2，要求：定义一个方法，根据id查找对应的学生信息。 如果存在，返回true 如果不存在，返回false*/ //1.定义集合 ArrayList<User> list = new ArrayList<>(); //2.创建对象 User u1 = new User(\\\"heima001\\\",\\\"zhangsan\\\",\\\"123456\\\"); User u2 = new User(\\\"heima002\\\",\\\"lisi\\\",\\\"12345678\\\"); User u3 = new User(\\\"heima003\\\",\\\"wangwu\\\",\\\"1234qwer\\\"); //3.把用户对象添加到集合当中 list.add(u1); list.add(u2); list.add(u3); //4.调用方法，查询id是否存在 boolean result = contains(list, \\\"heima001\\\"); System.out.println(result); } //定义在测试类中的方法需要加static //1.我要干嘛？ 我要根据id查询学生是否存在 //2.我干这件事情，需要什么才能完成？ 集合 id //3.方法的调用处是否需要使用方法的结果？ //如果要用，必须返回，如果不用，可以返回也可以不返回 //但是本题明确说明需要返回 public static boolean contains(ArrayList<User> list, String id){ //循环遍历集合，得到集合里面的每一个元素 //再进行判断 for (int i = 0; i < list.size(); i++) { //i 索引 list.get(i); 元素 User u = list.get(i); //判断id是否存在，我是拿着谁跟谁比较 //需要把用户对象里面的id拿出来再进行比较。 String uid = u.getId(); if(id.equals(uid)){ return true;//return 关键字：作用就是结束方法。 } } //只有当集合里面所有的元素全部比较完毕才能认为是不存在的。 return false; } } \"]},\"403\":{\"h\":\"10-Java面向对象进阶\"},\"404\":{\"h\":\"1.1 如何定义类\",\"t\":[\"类的定义格式如下:\",\"修饰符 class 类名 { // 1.成员变量（属性） // 2.成员方法 (行为) // 3.构造方法 （初始化类的对象数据的） } \",\"例如:\",\"public class Student { // 1.成员变量 public String name ; public char sex ; // '男' '女' public int age; } \"]},\"405\":{\"h\":\"1.2 如何通过类创建对象\",\"t\":[\"类名 对象名称 = new 类名(); \",\"例如:\",\"Student stu = new Student(); \"]},\"406\":{\"h\":\"1.3 封装\"},\"407\":{\"h\":\"1.3.1 封装的步骤\",\"t\":[\"1.使用 private 关键字来修饰成员变量。\",\"2.使用public修饰getter和setter方法。\"]},\"408\":{\"h\":\"1.3.2 封装的步骤实现\",\"t\":[\"private修饰成员变量\",\"public class Student { private String name; private int age; } \",\"public修饰getter和setter方法\",\"public class Student { private String name; private int age; public void setName(String n) { name = n; } public String getName() { return name; } public void setAge(int a) { if (a > 0 && a <200) { age = a; } else { System.out.println(\\\"年龄非法！\\\"); } } public int getAge() { return age; } } \"]},\"409\":{\"h\":\"1.4 构造方法\"},\"410\":{\"h\":\"1.4.1 构造方法的作用\",\"t\":[\"在创建对象的时候，给成员变量进行初始化。\",\"初始化即赋值的意思。\"]},\"411\":{\"h\":\"1.4.2 构造方法的格式\",\"t\":[\"修饰符 类名(形参列表) { // 构造体代码，执行代码 } \"]},\"412\":{\"h\":\"1.4.3 构造方法的应用\",\"t\":[\"首先定义一个学生类，代码如下：\",\"public class Student { // 1.成员变量 public String name; public int age; // 2.构造方法 public Student() { System.out.println(\\\"无参数构造方法被调用\\\")； } } \",\"接下来通过调用构造方法得到两个学生对象。\",\"public class CreateStu02 { public static void main(String[] args) { // 创建一个学生对象 // 类名 变量名称 = new 类名(); Student s1 = new Student(); // 使用对象访问成员变量，赋值 s1.name = \\\"张三\\\"; s1.age = 20 ; // 使用对象访问成员变量 输出值 System.out.println(s1.name); System.out.println(s1.age); Student s2 = new Student(); // 使用对象访问成员变量 赋值 s2.name = \\\"李四\\\"; s2.age = 18 ; System.out.println(s2.name); System.out.println(s2.age); } } \"]},\"413\":{\"h\":\"1.5 this关键字的作用\"},\"414\":{\"h\":\"1.5.1 this关键字的作用\",\"t\":[\"this代表所在类的当前对象的引用（地址值），即代表当前对象。\"]},\"415\":{\"h\":\"1.5.2 this关键字的应用\"},\"416\":{\"h\":\"1.5.2.1 用于普通的gettter与setter方法\",\"t\":[\"this出现在实例方法中，谁调用这个方法（哪个对象调用这个方法），this就代表谁（this就代表哪个对象）。\",\"public class Student { private String name; private int age; public void setName(String name) { this.name = name; } public String getName() { return name; } public void setAge(int age) { if (age > 0 && age < 200) { this.age = age; } else { System.out.println(\\\"年龄非法！\\\"); } } public int getAge() { return age; } } \"]},\"417\":{\"h\":\"1.5.2.2 用于构造方法中\",\"t\":[\"this出现在构造方法中，代表构造方法正在初始化的那个对象。\",\"public class Student { private String name; private int age; // 无参数构造方法 public Student() {} // 有参数构造方法 public Student(String name,int age) { this.name = name; this.age = age; } } \"]},\"418\":{\"h\":\"2.1 概述\",\"t\":[\"以前我们定义过如下类：\",\"public class Student { // 成员变量 public String name; public char sex; // '男' '女' public int age; // 无参数构造方法 public Student() { } // 有参数构造方法 public Student(String a) { } } \",\"我们已经知道面向对象中，存在类和对象的概念，我们在类中定义了一些成员变量，例如name,age,sex ,结果发现这些成员变量，每个对象都存在（因为每个对象都可以访问）。\",\"而像name ,age , sex确实是每个学生对象都应该有的属性，应该属于每个对象。\",\"所以Java中成员（变量和方法）等是存在所属性的，Java是通过static关键字来区分的。static关键字在Java开发非常的重要，对于理解面向对象非常关键。\",\"关于 static 关键字的使用，它可以用来修饰的成员变量和成员方法，被static修饰的成员是属于类的是放在静态区中，没有static修饰的成员变量和方法则是属于对象的。我们上面案例中的成员变量都是没有static修饰的，所以属于每个对象。\"]},\"419\":{\"h\":\"2.2 定义格式和使用\",\"t\":[\"static是静态的意思。 static可以修饰成员变量或者修饰方法。\"]},\"420\":{\"h\":\"2.2.1 静态变量及其访问\",\"t\":[\"有static修饰成员变量，说明这个成员变量是属于类的，这个成员变量称为类变量或者静态成员变量。 直接用 类名访问即可。因为类只有一个，所以静态成员变量在内存区域中也只存在一份。所有的对象都可以共享这个变量。\",\"如何使用呢\",\"例如现在我们需要定义传智全部的学生类，那么这些学生类的对象的学校属性应该都是“传智”，这个时候我们可以把这个属性定义成static修饰的静态成员变量。\",\"定义格式\",\"修饰符 static 数据类型 变量名 = 初始值； \",\"举例\",\"public class Student { public static String schoolName = \\\"传智播客\\\"； // 属于类，只有一份。 // ..... } \",\"静态成员变量的访问:\",\"格式：类名.静态变量\",\"public static void main(String[] args){ System.out.println(Student.schoolName); // 传智播客 Student.schoolName = \\\"黑马程序员\\\"; System.out.println(Student.schoolName); // 黑马程序员 } \"]},\"421\":{\"h\":\"2.2.2 实例变量及其访问\",\"t\":[\"无static修饰的成员变量属于每个对象的， 这个成员变量叫实例变量，之前我们写成员变量就是实例成员变量。\",\"需要注意的是：实例成员变量属于每个对象，必须创建类的对象才可以访问。\",\"格式：对象.实例成员变量\"]},\"422\":{\"h\":\"2.2.3 静态方法及其访问\",\"t\":[\"有static修饰成员方法，说明这个成员方法是属于类的，这个成员方法称为类方法或者静态方法。 直接用 类名访问即可。因为类只有一个，所以静态方法在内存区域中也只存在一份。所有的对象都可以共享这个方法。\",\"与静态成员变量一样，静态方法也是直接通过类名.方法名称即可访问。\",\"举例\",\"public class Student{ public static String schoolName = \\\"传智播客\\\"； // 属于类，只有一份。 // ..... public static void study(){ System.out.println(\\\"我们都在黑马程序员学习\\\"); } } \",\"静态成员变量的访问:\",\"格式：类名.静态方法\",\"public static void main(String[] args){ Student.study(); } \"]},\"423\":{\"h\":\"2.2.4 实例方法及其访问\",\"t\":[\"无static修饰的成员方法属于每个对象的，这个成员方法也叫做实例方法。\",\"需要注意的是：实例方法是属于每个对象，必须创建类的对象才可以访问。\",\"格式：对象.实例方法\",\"示例：\",\"public class Student { // 实例变量 private String name; // 2.方法：行为 // 无 static修饰，实例方法。属于每个对象，必须创建对象调用 public void run(){ System.out.println(\\\"学生可以跑步\\\"); } // 无 static修饰，实例方法 public void sleep(){ System.out.println(\\\"学生睡觉\\\"); } public static void study(){ } } \",\"public static void main(String[] args){ // 创建对象 Student stu = new Student ; stu.name = \\\"徐干\\\"; // Student.sleep();// 报错，必须用对象访问。 stu.sleep(); stu.run(); } \"]},\"424\":{\"h\":\"2.3 小结\",\"t\":[\"1.当 static 修饰成员变量或者成员方法时，该变量称为静态变量，该方法称为静态方法。该类的每个对象都共享同一个类的静态变量和静态方法。任何对象都可以更改该静态变量的值或者访问静态方法。但是不推荐这种方式去访问。因为静态变量或者静态方法直接通过类名访问即可，完全没有必要用对象去访问。\",\"2.无static修饰的成员变量或者成员方法，称为实例变量，实例方法，实例变量和实例方法必须创建类的对象，然后通过对象来访问。\",\"3.static修饰的成员属于类，会存储在静态区，是随着类的加载而加载的，且只加载一次，所以只有一份，节省内存。存储于一块固定的内存区域（静态区），所以，可以直接被类名调用。它优先于对象存在，所以，可以被所有对象共享。\",\"4.无static修饰的成员，是属于对象，对象有多少个，他们就会出现多少份。所以必须由对象调用。\"]},\"425\":{\"h\":\"2.4 static 的注意事项\",\"t\":[\"静态方法只能访问静态变量和静态方法\",\"非静态方法可以访问静态变量或者静态方法，也可以访问非静态的成员变量和非静态的成员方法\",\"静态方法中是没有this关键字\",\"总结：\",\"静态方法中，只能访问静态。\",\"非静态方法可以访问所有。\",\"静态方法中没有this关键字。\"]},\"426\":{\"h\":\"重新认识一下main方法\",\"t\":[\"public class HelloWorld { public static void main(String[] args) { System.out.println(\\\"Hello World\\\"); } } \",\"public：被JVM调用，访问权限足够大。\",\"static：被JVM调用，不用创建对象，直接类名访问；因为main方法是静态的，所以测试类中其他方法也需要是静态的。\",\"void：被JVM调用，不需要给JVM返回值。\",\"main：一个通用的名称，虽然不是关键字，但是被JVM识别。\",\"String[] args：以前用于接收键盘录入数据的，现在没用。\"]},\"427\":{\"h\":\"3.1 概述\"},\"428\":{\"h\":\"3.1.1 引入\",\"t\":[\"假如我们要定义如下类: 学生类,老师类和工人类，分析如下。\",\"学生类 属性:姓名,年龄 行为:吃饭,睡觉\",\"老师类 属性:姓名,年龄，薪水 行为:吃饭,睡觉，教书\",\"班主任 属性:姓名,年龄，薪水 行为:吃饭,睡觉，管理\",\"如果我们定义了这三个类去开发一个系统，那么这三个类中就存在大量重复的信息（属性:姓名，年龄。行为：吃饭，睡觉）。这样就导致了相同代码大量重复，代码显得很臃肿和冗余，那么如何解决呢？\",\"假如多个类中存在相同属性和行为时，我们可以将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那一个类即可。如图所示：\",\"其中，多个类可以称为子类，单独被继承的那一个类称为父类、超类（superclass）或者基类。\"]},\"429\":{\"h\":\"3.1.2 继承的含义\",\"t\":[\"继承描述的是事物之间的所属关系，这种关系是：is-a 的关系。例如，兔子属于食草动物，食草动物属于动物。可见，父类更通用，子类更具体。我们通过继承，可以使多种事物之间形成一种关系体系。\",\"继承：就是子类继承父类的属性和行为，使得子类对象可以直接具有与父类相同的属性、相同的行为。子类可以直接访问父类中的非私有的属性和行为。\"]},\"430\":{\"h\":\"3.1.3 继承的好处\",\"t\":[\"提高代码的复用性（减少代码冗余，相同代码重复利用）。\",\"使类与类之间产生了关系。\",\"可以把多个子类中重复的代码抽取到父类中了，提高代码的复用性。\",\"子类可以在父类的基础上，增加其他的功能，使子类更强大。\"]},\"431\":{\"h\":\"3.2 继承的格式\",\"t\":[\"通过 extends 关键字，可以声明一个子类继承另外一个父类，定义格式如下：\",\"class 父类 { ... } class 子类 extends 父类 { ... } \",\"需要注意：Java是单继承的，一个类只能继承一个直接父类，跟现实世界很像，但是Java中的子类是更加强大的。\",\"单继承：一个子类只能继承一个父类\",\"不支持多继承：子类不能同时继承多个父类\",\"多层继承：子类A继承父类B，，父类B继可以承父类C\",\"直接父类间接父类 Object 超类\"]},\"432\":{\"h\":\"3.3 继承案例\"},\"433\":{\"h\":\"3.3.1 案例\",\"t\":[\"请使用继承定义以下类:\",\"学生类 属性:姓名,年龄 行为:吃饭,睡觉\",\"老师类 属性:姓名,年龄，薪水 行为:吃饭,睡觉，教书\",\"班主任 属性:姓名,年龄，薪水 行为:吃饭,睡觉，管理\"]},\"434\":{\"h\":\"3.3.2 案例图解分析\",\"t\":[\"核心：共性内容抽取、子类是父类的一种\",\"在画图时，从下往上画，下面是子类，上面是父类 ==> 需要把子类中共性的内容抽取到父类中\",\"书写代码时，从上往下写\",\"老师类，学生类，还有班主任类，实际上都是属于人类的，我们可以定义一个人类，把他们相同的属性和行为都定义在人类中，然后继承人类即可，子类特有的属性和行为就定义在子类中了。\",\"如下图所示。\"]},\"435\":{\"h\":\"3.3.3 案例代码实现\",\"t\":[\"1.父类Human类\",\"public class Human { // 合理隐藏 private String name ; private int age ; // 合理暴露 public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } } \",\"2.子类Teacher类\",\"public class Teacher extends Human { // 工资 private double salary ; // 特有方法 public void teach(){ System.out.println(\\\"老师在认真教技术！\\\")； } public double getSalary() { return salary; } public void setSalary(double salary) { this.salary = salary; } } \",\"3.子类Student类\",\"public class Student extends Human{ } \",\"4.子类BanZhuren类\",\"public class Teacher extends Human { // 工资 private double salary ; // 特有方法 public void admin(){ System.out.println(\\\"班主任强调纪律问题！\\\")； } public double getSalary() { return salary; } public void setSalary(double salary) { this.salary = salary; } } \",\"5.测试类\",\"public class Test { public static void main(String[] args) { Teacher dlei = new Teacher(); dlei.setName(\\\"播仔\\\"); dlei.setAge(\\\"31\\\"); dlei.setSalary(1000.99); System.out.println(dlei.getName()); System.out.println(dlei.getAge()); System.out.println(dlei.getSalary()); dlei.teach(); BanZhuRen linTao = new BanZhuRen(); linTao.setName(\\\"灵涛\\\"); linTao.setAge(\\\"28\\\"); linTao.setSalary(1000.99); System.out.println(linTao.getName()); System.out.println(linTao.getAge()); System.out.println(linTao.getSalary()); linTao.admin(); Student xugan = new Student(); xugan.setName(\\\"播仔\\\"); xugan.setAge(\\\"31\\\"); //xugan.setSalary(1000.99); // xugan没有薪水属性，报错！ System.out.println(xugan.getName()); System.out.println(xugan.getAge()); } } \"]},\"436\":{\"h\":\"3.3.4 小结\",\"t\":[\"1.继承实际上是子类相同的属性和行为可以定义在父类中，子类特有的属性和行为由自己定义，这样就实现了相同属性和行为的重复利用，从而提高了代码复用。\",\"2.子类继承父类，就可以直接得到父类的成员变量和方法。是否可以继承所有成分呢？请看下节！\"]},\"437\":{\"h\":\"3.4 子类不能继承的内容\"},\"438\":{\"h\":\"3.4.1 引入\",\"t\":[\"并不是父类的所有内容都可以给子类继承的：\",\"子类不能继承父类的构造方法。\",\"值得注意的是子类可以继承父类的私有成员（成员变量，方法），只是子类无法直接访问而已，可以通过getter/setter方法访问父类的private成员变量。\"]},\"439\":{\"h\":\"3.4.1 演示代码\",\"t\":[\"public class Demo03 { public static void main(String[] args) { Zi z = new Zi(); System.out.println(z.num1); // System.out.println(z.num2); // 私有的子类无法使用 // 通过getter/setter方法访问父类的private成员变量 System.out.println(z.getNum2()); z.show1(); // z.show2(); // 私有的子类无法使用 } } class Fu { public int num1 = 10; private int num2 = 20; public void show1() { System.out.println(\\\"show1\\\"); } private void show2() { System.out.println(\\\"show2\\\"); } public int getNum2() { return num2; } public void setNum2(int num2) { this.num2 = num2; } } class Zi extends Fu { } \"]},\"440\":{\"h\":\"3.5 继承后的特点—成员变量\",\"t\":[\"当类之间产生了继承关系后，其中各类中的成员变量，又产生了哪些影响呢？\"]},\"441\":{\"h\":\"3.5.1 成员变量不重名\",\"t\":[\"如果子类父类中出现不重名的成员变量，这时的访问是没有影响的。代码如下：\",\"class Fu { // Fu中的成员变量 int num = 5; } class Zi extends Fu { // Zi中的成员变量 int num2 = 6; // Zi中的成员方法 public void show() { // 访问父类中的num System.out.println(\\\"Fu num=\\\"+num); // 继承而来，所以直接访问。 // 访问子类中的num2 System.out.println(\\\"Zi num2=\\\"+num2); } } class Demo04 { public static void main(String[] args) { // 创建子类对象 Zi z = new Zi(); // 调用子类中的show方法 z.show(); } } 演示结果： Fu num = 5 Zi num2 = 6 \"]},\"442\":{\"h\":\"3.5.2 成员变量重名\",\"t\":[\"如果子类父类中出现重名的成员变量，这时的访问是有影响的。代码如下：\",\"class Fu1 { // Fu中的成员变量。 int num = 5; } class Zi1 extends Fu1 { // Zi中的成员变量 int num = 6; public void show() { // 访问父类中的num System.out.println(\\\"Fu num=\\\" + num); // 访问子类中的num System.out.println(\\\"Zi num=\\\" + num); } } class Demo04 { public static void main(String[] args) { // 创建子类对象 Zi1 z = new Zi1(); // 调用子类中的show方法 z1.show(); } } 演示结果： Fu num = 6 Zi num = 6 \",\"子父类中出现了同名的成员变量时，子类会优先访问自己对象中的成员变量。如果此时想访问父类成员变量如何解决呢？我们可以使用super关键字。\"]},\"443\":{\"h\":\"3.5.3 super访问父类成员变量\",\"t\":[\"子父类中出现了同名的成员变量时，在子类中需要访问父类中非私有成员变量时，需要使用super 关键字，修饰父类成员变量，类似于之前学过的 this 。\",\"需要注意的是：super代表的是父类对象的引用，this代表的是当前对象的引用。\",\"使用格式：\",\"super.父类成员变量名 \",\"子类方法需要修改，代码如下：\",\"class Fu { // Fu中的成员变量。 int num = 5; } class Zi extends Fu { // Zi中的成员变量 int num = 6; public void show() { int num = 1; // 访问方法中的num System.out.println(\\\"method num=\\\" + num); // 访问子类中的num System.out.println(\\\"Zi num=\\\" + this.num); // 访问父类中的num System.out.println(\\\"Fu num=\\\" + super.num); } } class Demo04 { public static void main(String[] args) { // 创建子类对象 Zi1 z = new Zi1(); // 调用子类中的show方法 z1.show(); } } 演示结果： method num=1 Zi num=6 Fu num=5 \",\"小贴士：Fu 类中的成员变量是非私有的，子类中可以直接访问。若Fu 类中的成员变量私有了，子类是不能直接访问的。通常编码时，我们遵循封装的原则，使用private修饰成员变量，那么如何访问父类的私有成员变量呢？对！可以在父类中提供公共的getXxx方法和setXxx方法。\"]},\"444\":{\"h\":\"3.6 继承后的特点—成员方法\",\"t\":[\"当类之间产生了关系，其中各类中的成员方法，又产生了哪些影响呢？\"]},\"445\":{\"h\":\"3.6.1 成员方法不重名\",\"t\":[\"如果子类父类中出现不重名的成员方法，这时的调用是没有影响的。对象调用方法时，会先在子类中查找有没有对应的方法，若子类中存在就会执行子类中的方法，若子类中不存在就会执行父类中相应的方法。代码如下：\",\"class Fu { public void show() { System.out.println(\\\"Fu类中的show方法执行\\\"); } } class Zi extends Fu { public void show2() { System.out.println(\\\"Zi类中的show2方法执行\\\"); } } public class Demo05 { public static void main(String[] args) { Zi z = new Zi(); //子类中没有show方法，但是可以找到父类方法去执行 z.show(); z.show2(); } } \"]},\"446\":{\"h\":\"3.6.2 成员方法重名\",\"t\":[\"如果子类父类中出现重名的成员方法，则创建子类对象调用该方法的时候，子类对象会优先调用自己的方法。\",\"代码如下：\",\"class Fu { public void show() { System.out.println(\\\"Fu show\\\"); } } class Zi extends Fu { //子类重写了父类的show方法 public void show() { System.out.println(\\\"Zi show\\\"); } } public class ExtendsDemo05{ public static void main(String[] args) { Zi z = new Zi(); // 子类中有show方法，只执行重写后的show方法 z.show(); // Zi show } } \"]},\"447\":{\"h\":\"3.7 方法重写\"},\"448\":{\"h\":\"3.7.1 概念\",\"t\":[\"方法重写 ：子类中出现与父类一模一样的方法时（返回值类型，方法名和参数列表都相同），会出现覆盖效果，也称为重写或者复写。声明不变，重新实现。\"]},\"449\":{\"h\":\"3.7.2 使用场景与案例\",\"t\":[\"发生在子父类之间的关系。 子类继承了父类的方法，但是子类觉得父类的这方法不足以满足自己的需求，子类重新写了一个与父类同名的方法，以便覆盖父类的该方 法。\",\"例如：我们定义了一个动物类代码如下：\",\"public class Animal { public void run(){ System.out.println(\\\"动物跑的很快！\\\"); } public void cry(){ System.out.println(\\\"动物都可以叫~~~\\\"); } } \",\"然后定义一个猫类，猫可能认为父类cry()方法不能满足自己的需求\",\"代码如下：\",\"public class Cat extends Animal { public void cry(){ System.out.println(\\\"我们一起学猫叫，喵喵喵！喵的非常好听！\\\"); } } public class Test { public static void main(String[] args) { // 创建子类对象 Cat ddm = new Cat()； // 调用父类继承而来的方法 ddm.run(); // 调用子类重写的方法 ddm.cry(); } } \"]},\"450\":{\"h\":\"3.7.2 @Override重写注解\",\"t\":[\"@Override:注解，重写注解校验！\",\"这个注解标记的方法，就说明这个方法必须是重写父类的方法，否则编译阶段报错。\",\"建议重写都加上这个注解，一方面可以提高代码的可读性，一方面可以防止重写出错！\",\"加上后的子类代码形式如下：\",\"public class Cat extends Animal { // 声明不变，重新实现 // 方法名称与父类全部一样，只是方法体中的功能重写写了！ @Override public void cry(){ System.out.println(\\\"我们一起学猫叫，喵喵喵！喵的非常好听！\\\"); } } \"]},\"451\":{\"h\":\"3.7.3 注意事项\",\"t\":[\"方法重写是发生在子父类之间的关系。\",\"子类方法覆盖父类方法，必须要保证权限大于等于父类权限。\",\"子类方法覆盖父类方法，返回值类型、函数名和参数列表都要一模一样。\"]},\"452\":{\"h\":\"3.7.4 方法重写的本质\",\"t\":[\"子类覆盖了从父类继承下来的虚方法表中的方法\"]},\"453\":{\"h\":\"3.7.5 方法重写的注意事项和要求\",\"t\":[\"重写方法的名称、形参列表必须与父类中的一致。\",\"子类重写父类方法时，访问权限子类必须大于等于父类（暂时了解：空着不写 < protected < public) 访问权限\",\"子类重写父类方法时，返回值类型子类必须小于等于父类 返回值\",\"建议：重写的方法尽量和父类保持一致。\",\"只有被添加到虚方法表中的方法才能被重写。（私有修饰的和public修饰的final修饰的不能加入到虚方法表中）\"]},\"454\":{\"h\":\"3.8 继承后的特点—构造方法\"},\"455\":{\"h\":\"3.8.1 引入\",\"t\":[\"当类之间产生了关系，其中各类中的构造方法，又产生了哪些影响呢？ 首先我们要回忆两个事情，构造方法的定义格式和作用。\",\"构造方法的名字是与类名一致的。所以子类是无法继承父类构造方法的。\",\"构造方法的作用是初始化对象成员变量数据的。所以子类的初始化过程中，必须先执行父类的初始化动作。子类的构造方法中默认有一个super() ，表示调用父类的构造方法，父类成员变量初始化后，才可以给子类使用。（先有爸爸，才能有儿子）\",\"继承后子类构方法器特点:子类所有构造方法的第一行都会默认先调用父类的无参构造方法\"]},\"456\":{\"h\":\"3.8.2 案例演示\",\"t\":[\"按如下需求定义类:\",\"人类 成员变量: 姓名,年龄 成员方法: 吃饭\",\"学生类 成员变量: 姓名,年龄,成绩 成员方法: 吃饭\",\"代码如下：\",\"class Person { private String name; private int age; public Person() { System.out.println(\\\"父类无参\\\"); } // getter/setter省略 } class Student extends Person { private double score; public Student() { //super(); // 调用父类无参,默认就存在，可以不写，必须再第一行 System.out.println(\\\"子类无参\\\"); } public Student(double score) { //super(); // 调用父类无参,默认就存在，可以不写，必须再第一行 this.score = score; System.out.println(\\\"子类有参\\\"); } } public class Demo07 { public static void main(String[] args) { Student s1 = new Student(); System.out.println(\\\"----------\\\"); Student s2 = new Student(99.9); } } 输出结果： 父类无参 子类无参 ---------- 父类无参 子类有参 \"]},\"457\":{\"h\":\"3.8.3 小结\",\"t\":[\"子类构造方法执行的时候，都会在第一行默认先调用父类无参数构造方法一次。\",\"子类构造方法的第一行都隐含了一个**super()**去调用父类无参数构造方法，**super()**可以省略不写。\"]},\"458\":{\"h\":\"3.9 super(...)和this(...)\"},\"459\":{\"h\":\"3.9.1 引入\",\"t\":[\"请看上节中的如下案例：\",\"class Person { private String name; private int age; public Person() { System.out.println(\\\"父类无参\\\"); } // getter/setter省略 } class Student extends Person { private double score; public Student() { //super(); // 调用父类无参构造方法,默认就存在，可以不写，必须再第一行 System.out.println(\\\"子类无参\\\"); } public Student(double score) { //super(); // 调用父类无参构造方法,默认就存在，可以不写，必须再第一行 this.score = score; System.out.println(\\\"子类有参\\\"); } // getter/setter省略 } public class Demo07 { public static void main(String[] args) { // 调用子类有参数构造方法 Student s2 = new Student(99.9); System.out.println(s2.getScore()); // 99.9 System.out.println(s2.getName()); // 输出 null System.out.println(s2.getAge()); // 输出 0 } } \",\"我们发现，子类有参数构造方法只是初始化了自己对象中的成员变量score，而父类中的成员变量name和age依然是没有数据的，怎么解决这个问题呢，我们可以借助与super(...)去调用父类构造方法，以便初始化继承自父类对象的name和age.\"]},\"460\":{\"h\":\"3.9.2 super和this的用法格式\",\"t\":[\"super和this完整的用法如下，其中this，super访问成员我们已经接触过了。\",\"this.成员变量 -- 本类的 super.成员变量 -- 父类的 this.成员方法名() -- 本类的 super.成员方法名() -- 父类的 \",\"接下来我们使用调用构造方法格式：\",\"super(...) -- 调用父类的构造方法，根据参数匹配确认 this(...) -- 调用本类的其他构造方法，根据参数匹配确认 \"]},\"461\":{\"h\":\"3.9.3 super(....)用法演示\",\"t\":[\"代码如下：\",\"class Person { private String name =\\\"凤姐\\\"; private int age = 20; public Person() { System.out.println(\\\"父类无参\\\"); } public Person(String name , int age){ this.name = name ; this.age = age ; } // getter/setter省略 } class Student extends Person { private double score = 100; public Student() { //super(); // 调用父类无参构造方法,默认就存在，可以不写，必须再第一行 System.out.println(\\\"子类无参\\\"); } public Student(String name ， int age，double score) { super(name ,age);// 调用父类有参构造方法Person(String name , int age)初始化name和age this.score = score; System.out.println(\\\"子类有参\\\"); } // getter/setter省略 } public class Demo07 { public static void main(String[] args) { // 调用子类有参数构造方法 Student s2 = new Student(\\\"张三\\\"，20，99); System.out.println(s2.getScore()); // 99 System.out.println(s2.getName()); // 输出 张三 System.out.println(s2.getAge()); // 输出 20 } } \",\"注意：\",\"子类的每个构造方法中均有默认的super()，调用父类的空参构造。手动调用父类构造会覆盖默认的super()。\",\"super() 和 this() 都必须是在构造方法的第一行，所以不能同时出现。\",\"super(..)是根据参数去确定调用父类哪个构造方法的。\"]},\"462\":{\"h\":\"3.9.4 super(...)案例图解\",\"t\":[\"父类空间优先于子类对象产生\",\"在每次创建子类对象时，先初始化父类空间，再创建其子类对象本身。目的在于子类对象中包含了其对应的父类空间，便可以包含其父类的成员，如果父类成员非private修饰，则子类可以随意使用父类成员。代码体现在子类的构造七调用时，一定先调用父类的构造方法。理解图解如下：\"]},\"463\":{\"h\":\"3.9.5 this(...)用法演示\",\"t\":[\"this(...)\",\"默认是去找本类中的其他构造方法，根据参数来确定具体调用哪一个构造方法。\",\"为了借用其他构造方法的功能。\",\"package com.itheima._08this和super调用构造方法; /** * this(...): * 默认是去找本类中的其他构造方法，根据参数来确定具体调用哪一个构造方法。 * 为了借用其他构造方法的功能。 * */ public class ThisDemo01 { public static void main(String[] args) { Student xuGan = new Student(); System.out.println(xuGan.getName()); // 输出:徐干 System.out.println(xuGan.getAge());// 输出:21 System.out.println(xuGan.getSex());// 输出： 男 } } class Student{ private String name ; private int age ; private char sex ; public Student() { // 很弱，我的兄弟很牛逼啊，我可以调用其他构造方法：Student(String name, int age, char sex) this(\\\"徐干\\\",21,'男'); } public Student(String name, int age, char sex) { this.name = name ; this.age = age ; this.sex = sex ; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public char getSex() { return sex; } public void setSex(char sex) { this.sex = sex; } } \"]},\"464\":{\"h\":\"3.9.6 小结\",\"t\":[\"子类的每个构造方法中均有默认的super()，调用父类的空参构造。手动调用父类构造会覆盖默认的super()。\",\"super() 和 this() 都必须是在构造方法的第一行，所以不能同时出现。\",\"super(..)和this(...)是根据参数去确定调用父类哪个构造方法的。\",\"super(..)可以调用父类构造方法初始化继承自父类的成员变量的数据。\",\"this(..)可以调用本类中的其他构造方法。\"]},\"465\":{\"h\":\"3.10 继承的特点\",\"t\":[\"Java只支持单继承，不支持多继承。\",\"// 一个类只能有一个父类，不可以有多个父类。 class A {} class B {} class C1 extends A {} // ok // class C2 extends A, B {} // error \",\"一个类可以有多个子类。\",\"// A可以有多个子类 class A {} class C1 extends A {} class C2 extends A {} \",\"可以多层继承。\",\"class A {} class C1 extends A {} class D extends C1 {} \",\"顶层父类是Object类。所有的类默认继承Object，作为父类。\"]},\"466\":{\"h\":\"4. 关于今天知识的小结：\",\"t\":[\"会写一个继承结构下的标准Javabean即可\",\"需求：\",\"​ 猫：属性，姓名，年龄，颜色\",\"​ 狗：属性，姓名，年龄，颜色，吼叫\",\"分享书写技巧：\",\"​ 1.在大脑中要区分谁是父，谁是子\",\"​ 2.把共性写到父类中，独有的东西写在子类中\",\"​ 3.开始编写标准Javabean（从上往下写）\",\"​ 4.在测试类中，创建对象并赋值调用\",\"代码示例：\",\"package com.itheima.test4; public class Animal { //姓名，年龄，颜色 private String name; private int age; private String color; public Animal() { } public Animal(String name, int age, String color) { this.name = name; this.age = age; this.color = color; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public String getColor() { return color; } public void setColor(String color) { this.color = color; } } public class Cat extends Animal{ //因为猫类中没有独有的属性。 //所以此时不需要写私有的成员变量 //空参 public Cat() { } //需要带子类和父类中所有的属性 public Cat(String name, int age, String color) { super(name,age,color); } } public class Dog extends Animal{ //Dog ：吼叫 private String wang; //构造 public Dog() { } //带参构造：带子类加父类所有的属性 public Dog(String name, int age, String color,String wang) { //共性的属性交给父类赋值 super(name,age,color); //独有的属性自己赋值 this.wang = wang; } public String getWang() { return wang; } public void setWang(String wang) { this.wang = wang; } } public class Demo { public static void main(String[] args) { //Animal ： 姓名，年龄，颜色 //Cat : //Dog ：吼叫 //创建狗的对象 Dog d = new Dog(\\\"旺财\\\",2,\\\"黑色\\\",\\\"嗷呜~~\\\"); System.out.println(d.getName()+\\\", \\\" + d.getAge() + \\\", \\\" + d.getColor() + \\\", \\\" + d.getWang()); //创建猫的对象 Cat c = new Cat(\\\"中华田园猫\\\",3,\\\"黄色\\\"); System.out.println(c.getName() + \\\", \\\" + c.getAge() + \\\", \\\" + c.getColor()); } } \"]},\"467\":{\"h\":\"总结\",\"t\":[\"总结\",\"继承中成员方法的访问特点：\",\"this调用：就近原则。 super调用：直接找父类。\",\"什么是方法重写？\",\"在继承体系中，子类出现了和父类中一模一样的方法声明，我们就称子类的这个方法是重写的方法。\",\"方法重写建议加上哪个注解，有什么好处？\",\"@Override 注解可以校验重写是否正确，同时可读性好。\",\"重写方法有哪些基本要求？\",\"子类重写的方法尽量跟父类中的方法保持一致。\",\"只有虚方法表里面的方法可以被重写。\",\"方法重写的本质？\",\"覆盖虚方法表中的方法（非private、static、final修饰）\"]},\"468\":{\"h\":\"继承中变量、方法的访问特点\"},\"469\":{\"h\":\"成员变量的访问特点\"},\"470\":{\"h\":\"成员方法的访问特点\"},\"471\":{\"h\":\"构造方法的访问特点\",\"t\":[\"父类中的构造方法不会被子类继承。\",\"子类中所有的构造方法默认先访问父类中的无参构造，再执行自己。\",\"为什么要先访问父类中的无参构造器？\",\"子类在初始化的时候，有可能会使用到父类中的数据，如果父类没有完成初始化，子类将无法使用父类的数据。\",\"子类初始化之前，一定要调用父类构造方法先完成父类数据空间的初始化。\",\"那么应该怎么去调用父类的构造方法？\",\"子类构造方法的第一行语句默认都是：super()，不写也存在，且必须在第一行。\",\"总结\",\"子类不能继承父类的构造方法，但是可以通过super调用。\",\"子类构造方法的第一行，有一个默认的super()。\",\"默认先访问父类中无参的构造方法，再执行自己。\",\"如果想要访问父类有参构造，必须手动书写。\"]},\"472\":{\"h\":\"什么时候会用到继承？\",\"t\":[\"当类与类之间，存在相同（共性）的内容，并满足子类是父类中的一种，就可以考虑使用继承，来优化代码。\",\"小结：\",\"什么是继承、继承的好处？\",\"继承是面向对象三大特征之一，可以让类跟类之间产生子父的关系。 可以把多个子类中重复的代码抽取到父类中，子类可以直接使用，减少代码冗余，提高代码的复用性\",\"继承的格式？\",\"public class 子类 extends 父类{}\",\"继承后子类的特点？\",\"子类可以得到父类的属性和行为，子类可以使用。 子类可以在父类的基础上新增其他功能，子类更强大。\"]},\"473\":{\"h\":\"子类到底能继承父类中的哪些内容？（内存图/内存分析工具）\",\"t\":[\"误区1：父类私有的东西，子类就无法继承\",\"误区2：父类中非私有的成员，就被子类继承下来了\"]},\"474\":{\"h\":\"构造方法是否可以被继承？\"},\"475\":{\"h\":\"1.1 多态的形式\",\"t\":[\"多态是继封装、继承之后，面向对象的第三大特性。\",\"多态是出现在继承或者实现关系中的。\",\"多态体现的格式：\",\"父类类型 变量名 = new 子类/实现类构造器; 变量名.方法名(); \",\"多态的前提：有继承关系，子类对象是可以赋值给父类类型的变量。例如Animal是一个动物类型，而Cat是一个猫类型。Cat继承了Animal，Cat对象也是Animal类型，自然可以赋值给父类类型的变量。\"]},\"476\":{\"h\":\"1.2 多态的使用场景\",\"t\":[\"如果没有多态，在下图中register方法只能传递学生对象，其他的Teacher和administrator对象是无法传递给register方法方法的，在这种情况下，只能定义三个不同的register方法分别接收学生，老师和管理员。\",\"有了多态之后，方法的形参就可以定义为共同的父类Person。\",\"要注意的是：\",\"当一个方法的形参是一个类，我们可以传递这个类所有的子类对象。\",\"当一个方法的形参是一个接口，我们可以传递这个接口所有的实现类对象（后面会学）。\",\"而且多态还可以根据传递的不同对象来调用不同类中的方法。\",\"代码示例：\",\"父类： public class Person { private String name; private int age; 空参构造 带全部参数的构造 get和set方法 public void show(){ System.out.println(name + \\\", \\\" + age); } } 子类1： public class Administrator extends Person { @Override public void show() { System.out.println(\\\"管理员的信息为：\\\" + getName() + \\\", \\\" + getAge()); } } 子类2： public class Student extends Person{ @Override public void show() { System.out.println(\\\"学生的信息为：\\\" + getName() + \\\", \\\" + getAge()); } } 子类3： public class Teacher extends Person{ @Override public void show() { System.out.println(\\\"老师的信息为：\\\" + getName() + \\\", \\\" + getAge()); } } 测试类： public class Test { public static void main(String[] args) { //创建三个对象，并调用register方法 Student s = new Student(); s.setName(\\\"张三\\\"); s.setAge(18); Teacher t = new Teacher(); t.setName(\\\"王建国\\\"); t.setAge(30); Administrator admin = new Administrator(); admin.setName(\\\"管理员\\\"); admin.setAge(35); register(s); register(t); register(admin); } //这个方法既能接收老师，又能接收学生，还能接收管理员 //只能把参数写成这三个类型的父类 public static void register(Person p){ p.show(); } } \"]},\"477\":{\"h\":\"1.3 多态的定义和前提\",\"t\":[\"多态： 是指同一行为，具有多个不同表现形式。\",\"从上面案例可以看出，Cat和Dog都是动物，都是吃这一行为，但是出现的效果（表现形式）是不一样的。\",\"前提【重点】\",\"有继承或者实现关系\",\"方法的重写【意义体现：不重写，无意义】\",\"父类引用指向子类对象【格式体现】\",\"父类类型：指子类对象继承的父类类型，或者实现的父接口类型。\"]},\"478\":{\"h\":\"1.4 多态的运行特点\",\"t\":[\"调用成员变量时：编译看左边，运行看左边\",\"调用成员方法时：编译看左边，运行看右边\",\"代码示例：\",\"Fu f = new Zi()； //编译看左边的父类中有没有name这个属性，没有就报错 //在实际运行的时候，把父类name属性的值打印出来 System.out.println(f.name); //编译看左边的父类中有没有show这个方法，没有就报错 //在实际运行的时候，运行的是子类中的show方法 f.show(); \"]},\"479\":{\"h\":\"多态的优势\",\"t\":[\"在多态形式下，右边对象可以实现解耦合，便于扩展和维护。\",\"Person p = new Sstudent(); p.work(); //业务逻辑发生改变时，后续代码无需修改 \",\"定义方法的时候，使用父类型作为参数，可以接收所有子类对象，体现多态的扩展性与便利。\"]},\"480\":{\"h\":\"1.5 多态的弊端\",\"t\":[\"我们已经知道多态编译阶段是看左边父类类型的，如果子类有些独有的功能，此时多态的写法就无法访问子类独有功能了。\",\"class Animal{ public void eat()｛ System.out.println(\\\"动物吃东西！\\\") ｝ } class Cat extends Animal { public void eat() { System.out.println(\\\"吃鱼\\\"); } public void catchMouse() { System.out.println(\\\"抓老鼠\\\"); } } class Dog extends Animal { public void eat() { System.out.println(\\\"吃骨头\\\"); } } class Test{ public static void main(String[] args){ Animal a = new Cat(); a.eat(); a.catchMouse();//编译报错，编译看左边，Animal没有这个方法 } } \"]},\"481\":{\"h\":\"1.6 引用类型转换\"},\"482\":{\"h\":\"1.6.1 为什么要转型\",\"t\":[\"多态的写法就无法访问子类独有功能了。\",\"当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误。也就是说，不能调用子类拥有，而父类没有的方法。编译都错误，更别说运行了。这也是多态给我们带来的一点\\\"小麻烦\\\"。所以，想要调用子类特有的方法，必须做向下转型。\",\"回顾基本数据类型转换\",\"自动转换: 范围小的赋值给范围大的.自动完成:double d = 5;\",\"强制转换: 范围大的赋值给范围小的,强制转换:int i = (int)3.14\",\"​ 多态的转型分为向上转型（自动转换）与向下转型（强制转换）两种。\"]},\"483\":{\"h\":\"1.6.2 向上转型（自动转换）\",\"t\":[\"向上转型：多态本身是子类类型向父类类型向上转换（自动转换）的过程，这个过程是默认的。 当父类引用指向一个子类对象时，便是向上转型。 使用格式：\",\"父类类型 变量名 = new 子类类型(); 如：Animal a = new Cat(); \",\"**原因是：父类类型相对与子类来说是大范围的类型，Animal是动物类，是父类类型。Cat是猫类，是子类类型。Animal类型的范围当然很大，包含一切动物。**所以子类范围小可以直接自动转型给父类类型的变量。\"]},\"484\":{\"h\":\"1.6.3 向下转型（强制转换）\",\"t\":[\"向下转型：父类类型向子类类型向下转换的过程，这个过程是强制的。 一个已经向上转型的子类对象，将父类引用转为子类引用，可以使用强制类型转换的格式，便是向下转型。\",\"使用格式：\",\"子类类型 变量名 = (子类类型) 父类变量名; 如:Aniaml a = new Cat(); Cat c =(Cat) a; \"]},\"485\":{\"h\":\"1.6.4 案例演示\",\"t\":[\"当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误。也就是说，不能调用子类拥有，而父类没有的方法。编译都错误，更别说运行了。这也是多态给我们带来的一点\\\"小麻烦\\\"。所以，想要调用子类特有的方法，必须做向下转型。\",\"转型演示，代码如下：\",\"定义类：\",\"abstract class Animal { abstract void eat(); } class Cat extends Animal { public void eat() { System.out.println(\\\"吃鱼\\\"); } public void catchMouse() { System.out.println(\\\"抓老鼠\\\"); } } class Dog extends Animal { public void eat() { System.out.println(\\\"吃骨头\\\"); } public void watchHouse() { System.out.println(\\\"看家\\\"); } } \",\"定义测试类：\",\"public class Test { public static void main(String[] args) { // 向上转型 Animal a = new Cat(); a.eat(); // 调用的是 Cat 的 eat // 向下转型 Cat c = (Cat)a; c.catchMouse(); // 调用的是 Cat 的 catchMouse } } \"]},\"486\":{\"h\":\"1.6.5 转型的异常\",\"t\":[\"转型的过程中，一不小心就会遇到这样的问题，请看如下代码：\",\"public class Test { public static void main(String[] args) { // 向上转型 Animal a = new Cat(); a.eat(); // 调用的是 Cat 的 eat // 向下转型 Dog d = (Dog)a; d.watchHouse(); // 调用的是 Dog 的 watchHouse 【运行报错】 } } \",\"这段代码可以通过编译，但是运行时，却报出了 ClassCastException ，类型转换异常！这是因为，明明创建了Cat类型对象，运行时，当然不能转换成Dog对象的。\"]},\"487\":{\"h\":\"1.6.6 instanceof关键字\",\"t\":[\"为了避免ClassCastException的发生，Java提供了 instanceof 关键字，给引用变量做类型的校验，格式如下：\",\"变量名 instanceof 数据类型 如果变量属于该数据类型或者其子类类型，返回true。 如果变量不属于该数据类型或者其子类类型，返回false。 \",\"所以，转换前，我们最好先做一个判断，代码如下：\",\"public class Test { public static void main(String[] args) { // 向上转型 Animal a = new Cat(); a.eat(); // 调用的是 Cat 的 eat // 向下转型 if (a instanceof Cat){ Cat c = (Cat)a; c.catchMouse(); // 调用的是 Cat 的 catchMouse } else if (a instanceof Dog){ Dog d = (Dog)a; d.watchHouse(); // 调用的是 Dog 的 watchHouse } } } \"]},\"488\":{\"h\":\"1.6.7 instanceof新特性\",\"t\":[\"JDK14的时候提出了新特性，把判断和强转合并成了一行\",\"//新特性 //先判断a是否为Dog类型，如果是，则强转成Dog类型，转换之后变量名为d //如果不是，则不强转，结果直接是false if(a instanceof Dog d){ d.lookHome(); }else if(a instanceof Cat c){ c.catchMouse(); }else{ System.out.println(\\\"没有这个类型，无法转换\\\"); } \"]},\"489\":{\"h\":\"1.7 综合练习\",\"t\":[\"需求：根据需求完成代码: 1.定义狗类 属性： 年龄，颜色 行为: eat(String something)(something表示吃的东西) 看家lookHome方法(无参数) 2.定义猫类 属性： 年龄，颜色 行为: eat(String something)方法(something表示吃的东西) 逮老鼠catchMouse方法(无参数) 3.定义Person类//饲养员 属性： 姓名，年龄 行为： keepPet(Dog dog,String something)方法 功能：喂养宠物狗，something表示喂养的东西 行为： keepPet(Cat cat,String something)方法 功能：喂养宠物猫，something表示喂养的东西 生成空参有参构造，set和get方法 4.定义测试类(完成以下打印效果): keepPet(Dog dog,String somethind)方法打印内容如下： 年龄为30岁的老王养了一只黑颜色的2岁的狗 2岁的黑颜色的狗两只前腿死死的抱住骨头猛吃 keepPet(Cat cat,String somethind)方法打印内容如下： 年龄为25岁的老李养了一只灰颜色的3岁的猫 3岁的灰颜色的猫眯着眼睛侧着头吃鱼 5.思考： 1.Dog和Cat都是Animal的子类，以上案例中针对不同的动物，定义了不同的keepPet方法，过于繁琐，能否简化，并体会简化后的好处？ 2.Dog和Cat虽然都是Animal的子类，但是都有其特有方法，能否想办法在keepPet中调用特有方法？ \",\"画图分析：\",\"代码示例：\",\"//动物类（父类） public class Animal { private int age; private String color; public Animal() { } public Animal(int age, String color) { this.age = age; this.color = color; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public String getColor() { return color; } public void setColor(String color) { this.color = color; } public void eat(String something){ System.out.println(\\\"动物在吃\\\" + something); } } //猫类（子类） public class Cat extends Animal { public Cat() { } public Cat(int age, String color) { super(age, color); } @Override public void eat(String something) { System.out.println(getAge() + \\\"岁的\\\" + getColor() + \\\"颜色的猫眯着眼睛侧着头吃\\\" + something); } public void catchMouse(){ System.out.println(\\\"猫抓老鼠\\\"); } } //狗类（子类） public class Dog extends Animal { public Dog() { } public Dog(int age, String color) { super(age, color); } //行为 //eat(String something)(something表示吃的东西) //看家lookHome方法(无参数) @Override public void eat(String something) { System.out.println(getAge() + \\\"岁的\\\" + getColor() + \\\"颜色的狗两只前腿死死的抱住\\\" + something + \\\"猛吃\\\"); } public void lookHome(){ System.out.println(\\\"狗在看家\\\"); } } //饲养员类 public class Person { private String name; private int age; public Person() { } public Person(String name, int age) { this.name = name; this.age = age; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } //饲养狗 /* public void keepPet(Dog dog, String something) { System.out.println(\\\"年龄为\\\" + age + \\\"岁的\\\" + name + \\\"养了一只\\\" + dog.getColor() + \\\"颜色的\\\" + dog.getAge() + \\\"岁的狗\\\"); dog.eat(something); } //饲养猫 public void keepPet(Cat cat, String something) { System.out.println(\\\"年龄为\\\" + age + \\\"岁的\\\" + name + \\\"养了一只\\\" + cat.getColor() + \\\"颜色的\\\" + cat.getAge() + \\\"岁的猫\\\"); cat.eat(something); }*/ //想要一个方法，能接收所有的动物，包括猫，包括狗 //方法的形参：可以写这些类的父类 Animal public void keepPet(Animal a, String something) { if(a instanceof Dog d){ System.out.println(\\\"年龄为\\\" + age + \\\"岁的\\\" + name + \\\"养了一只\\\" + a.getColor() + \\\"颜色的\\\" + a.getAge() + \\\"岁的狗\\\"); d.eat(something); }else if(a instanceof Cat c){ System.out.println(\\\"年龄为\\\" + age + \\\"岁的\\\" + name + \\\"养了一只\\\" + c.getColor() + \\\"颜色的\\\" + c.getAge() + \\\"岁的猫\\\"); c.eat(something); }else{ System.out.println(\\\"没有这种动物\\\"); } } } //测试类 public class Test { public static void main(String[] args) { //创建对象并调用方法 /* Person p1 = new Person(\\\"老王\\\",30); Dog d = new Dog(2,\\\"黑\\\"); p1.keepPet(d,\\\"骨头\\\"); Person p2 = new Person(\\\"老李\\\",25); Cat c = new Cat(3,\\\"灰\\\"); p2.keepPet(c,\\\"鱼\\\");*/ //创建饲养员的对象 Person p = new Person(\\\"老王\\\",30); Dog d = new Dog(2,\\\"黑\\\"); Cat c = new Cat(3,\\\"灰\\\"); p.keepPet(d,\\\"骨头\\\"); p.keepPet(c,\\\"鱼\\\"); } } \"]},\"490\":{\"h\":\"2.1 包\",\"t\":[\"​ 包在操作系统中其实就是一个文件夹。包是用来分门别类的管理技术，不同的技术类放在不同的包下，方便管理和维护。\",\"在IDEA项目中，建包的操作如下：\",\"包名的命名规范：\",\"路径名.路径名.xxx.xxx // 例如：com.itheima.oa \",\"包名一般是公司域名的倒写。例如：黑马是www.itheima.com,包名就可以定义成com.itheima.技术名称。\",\"包名必须用”.“连接。\",\"包名的每个路径名必须是一个合法的标识符，而且不能是Java的关键字。\"]},\"491\":{\"h\":\"2.2 导包\",\"t\":[\"什么时候需要导包？\",\"​ 情况一：在使用Java中提供的非核心包中的类时\",\"​ 情况二：使用自己写的其他包中的类时\",\"什么时候不需要导包？\",\"​ 情况一：在使用Java核心包（java.lang）中的类时\",\"​ 情况二：在使用自己写的同一个包中的类时\"]},\"492\":{\"h\":\"2.3 使用不同包下的相同类怎么办？\",\"t\":[\"假设demo1和demo2中都有一个Student该如何使用？\",\"代码示例：\",\"//使用全类名的形式即可。 //全类名：包名 + 类名 //拷贝全类名的快捷键：选中类名crtl + shift + alt + c 或者用鼠标点copy，再点击copy Reference com.itheima.homework.demo1.Student s1 = new com.itheima.homework.demo1.Student(); com.itheima.homework.demo2.Student s2 = new com.itheima.homework.demo2.Student(); \"]},\"493\":{\"h\":\"3.1 权限修饰符\",\"t\":[\"​ 在Java中提供了四种访问权限，使用不同的访问权限修饰符修饰时，被修饰的内容会有不同的访问权限，我们之前已经学习过了public 和 private，接下来我们研究一下protected和默认修饰符的作用。\",\"public：公共的，所有地方都可以访问。\",\"protected：本类 ，本包，其他包中的子类都可以访问。\",\"默认（没有修饰符）：本类 ，本包可以访问。\",\"注意：默认是空着不写，不是default\",\"private：私有的，当前类可以访问。 public > protected > 默认 > private\"]},\"494\":{\"h\":\"3.2 不同权限的访问能力\",\"t\":[\"public\",\"protected\",\"默认\",\"private\",\"同一类中\",\"√\",\"√\",\"√\",\"√\",\"同一包中的类\",\"√\",\"√\",\"√\",\"不同包的子类\",\"√\",\"√\",\"不同包中的无关类\",\"√\",\"可见，public具有最大权限。private则是最小权限。\",\"编写代码时，如果没有特殊的考虑，建议这样使用权限：\",\"成员变量使用private ，隐藏细节。\",\"构造方法使用 public ，方便创建对象。\",\"成员方法使用public ，方便调用方法。\",\"小贴士：不加权限修饰符，就是默认权限\"]},\"495\":{\"h\":\"4.1 概述\",\"t\":[\"学习了继承后，我们知道，子类可以在父类的基础上改写父类内容，比如，方法重写。\",\"如果有一个方法我不想别人去改写里面内容，该怎么办呢？\",\"Java提供了final 关键字，表示修饰的内容不可变。\",\"final： 不可改变，最终的含义。可以用于修饰类、方法和变量。 \",\"类：被修饰的类，不能被继承。\",\"方法：被修饰的方法，不能被重写。\",\"变量：被修饰的变量，有且仅能被赋值一次。\"]},\"496\":{\"h\":\"4.2 使用方式\"},\"497\":{\"h\":\"4.2.1 修饰类\",\"t\":[\"final修饰的类，不能被继承。\",\"格式如下：\",\"final class 类名 { } \",\"代码:\",\"final class Fu { } // class Zi extends Fu {} // 报错,不能继承final的类 \",\"查询API发现像 public final class String 、public final class Math 、public final class Scanner 等，很多我们学习过的类，都是被final修饰的，目的就是供我们使用，而不让我们所以改变其内容。\"]},\"498\":{\"h\":\"4.2.2 修饰方法\",\"t\":[\"final修饰的方法，不能被重写。 格式如下：\",\"修饰符 final 返回值类型 方法名(参数列表){ //方法体 } \",\"代码:\",\"class Fu2 { final public void show1() { System.out.println(\\\"Fu2 show1\\\"); } public void show2() { System.out.println(\\\"Fu2 show2\\\"); } } class Zi2 extends Fu2 { // @Override // public void show1() { // System.out.println(\\\"Zi2 show1\\\"); // } @Override public void show2() { System.out.println(\\\"Zi2 show2\\\"); } } \"]},\"499\":{\"h\":\"4.2.3 修饰变量-局部变量\",\"t\":[\"局部变量——基本类型 基本类型的局部变量，被final修饰后，只能赋值一次，不能再更改。代码如下：\",\"public class FinalDemo1 { public static void main(String[] args) { // 声明变量，使用final修饰 final int a; // 第一次赋值 a = 10; // 第二次赋值 a = 20; // 报错,不可重新赋值 // 声明变量，直接赋值，使用final修饰 final int b = 10; // 第二次赋值 b = 20; // 报错,不可重新赋值 } } \",\"思考，下面两种写法，哪种可以通过编译？\",\"写法1：\",\"final int c = 0; for (int i = 0; i < 10; i++) { c = i; System.out.println(c); } \",\"写法2：\",\"for (int i = 0; i < 10; i++) { final int c = i; System.out.println(c); } \",\"根据 final 的定义，写法1报错！写法2，为什么通过编译呢？因为每次循环，都是一次新的变量c。这也是大家需要注意的地方。\"]},\"500\":{\"h\":\"4.2.4 修饰变量-成员变量\",\"t\":[\"成员变量涉及到初始化的问题，初始化方式有显示初始化和构造方法初始化，只能选择其中一个：\",\"显示初始化(在定义成员变量的时候立马赋值)（常用）；\",\"public class Student { final int num = 10; } \",\"构造方法初始化(在构造方法中赋值一次)（不常用，了解即可）。\",\"注意：每个构造方法中都要赋值一次！\",\"public class Student { final int num = 10; final int num2; public Student() { this.num2 = 20; // this.num2 = 20; } public Student(String name) { this.num2 = 20; // this.num2 = 20; } } \",\"被final修饰的常量名称，一般都有书写规范，所有字母都大写。\"]},\"501\":{\"h\":\"5.1 局部代码块\",\"t\":[\"用于早点结束变量生命周期 提前结束变量的生命周期（已淘汰）\"]},\"502\":{\"h\":\"5.2 构造代码块：\",\"t\":[\"抽取构造方法中的重复代码（不够灵活）\",\"写在成员位置的代码块\",\"作用：可以把多个构造方法中重复的代码抽取出来\",\"执行时机：我们在创建本类对象的时候会先执行构造代码块再执行构造方法\",\"如果想在多个构造方法中使用相同的代码，可以使用下面这两种方式：\",\"调用其他构造器\",\"写成一个方法，在每个构造器中进行调用\"]},\"503\":{\"h\":\"5.3 静态代码块\",\"t\":[\"数据初始化（重点）\",\"需要通过static关键字修饰，随着类的加载而加载，并且自动触发、只执行一次\",\"作用：在类加载的时候，做一些数据初始化的时候使用。\"]},\"504\":{\"h\":\"1.1 概述\"},\"505\":{\"h\":\"1.1.1 抽象类引入\",\"t\":[\"父类中的方法，被它的子类们重写，子类各自的实现都不尽相同。那么父类的方法声明和方法主体，只有声明还有意义，而方法主体则没有存在的意义了(因为子类对象会调用自己重写的方法)。换句话说，父类可能知道子类应该有哪个功能，但是功能具体怎么实现父类是不清楚的（由子类自己决定），父类只需要提供一个没有方法体的定义即可，具体实现交给子类自己去实现。我们把没有方法体的方法称为抽象方法。Java语法规定，包含抽象方法的类就是抽象类。\",\"抽象方法 ：没有方法体的方法。\",\"抽象类：包含抽象方法的类。\"]},\"506\":{\"h\":\"1.2 abstract使用格式\",\"t\":[\"abstract是抽象的意思，用于修饰方法方法和类，修饰的方法是抽象方法，修饰的类是抽象类。\"]},\"507\":{\"h\":\"1.2.1 抽象方法\",\"t\":[\"使用abstract 关键字修饰方法，该方法就成了抽象方法，抽象方法只包含一个方法名，而没有方法体。\",\"定义格式：\",\"修饰符 abstract 返回值类型 方法名 (参数列表)； \",\"代码举例：\",\"public abstract void run()； \"]},\"508\":{\"h\":\"1.2.2 抽象类\",\"t\":[\"如果一个类包含抽象方法，那么该类必须是抽象类。注意：抽象类不一定有抽象方法，但是有抽象方法的类必须定义成抽象类。\",\"定义格式：\",\"abstract class 类名字 { } \",\"代码举例：\",\"public abstract class Animal { public abstract void run()； } \"]},\"509\":{\"h\":\"1.2.3 抽象类的使用\",\"t\":[\"要求：继承抽象类的子类必须重写父类所有的抽象方法。否则，该子类也必须声明为抽象类。\",\"代码举例：\",\"// 父类,抽象类 abstract class Employee { private String id; private String name; private double salary; public Employee() { } public Employee(String id, String name, double salary) { this.id = id; this.name = name; this.salary = salary; } // 抽象方法 // 抽象方法必须要放在抽象类中 abstract public void work(); } // 定义一个子类继承抽象类 class Manager extends Employee { public Manager() { } public Manager(String id, String name, double salary) { super(id, name, salary); } // 2.重写父类的抽象方法 @Override public void work() { System.out.println(\\\"管理其他人\\\"); } } // 定义一个子类继承抽象类 class Cook extends Employee { public Cook() { } public Cook(String id, String name, double salary) { super(id, name, salary); } @Override public void work() { System.out.println(\\\"厨师炒菜多加点盐...\\\"); } } // 测试类 public class Demo10 { public static void main(String[] args) { // 创建抽象类,抽象类不能创建对象 // 假设抽象类让我们创建对象,里面的抽象方法没有方法体,无法执行.所以不让我们创建对象 // Employee e = new Employee(); // e.work(); // 3.创建子类 Manager m = new Manager(); m.work(); Cook c = new Cook(\\\"ap002\\\", \\\"库克\\\", 1); c.work(); } } \",\"此时的方法重写，是子类对父类抽象方法的完成实现，我们将这种方法重写的操作，也叫做实现方法。\"]},\"510\":{\"h\":\"1.3 抽象类的特征\",\"t\":[\"抽象类的特征总结起来可以说是 有得有失\",\"有得：抽象类得到了拥有抽象方法的能力。\",\"有失：抽象类失去了创建对象的能力。\",\"其他成员（构造方法，实例方法，静态方法等）抽象类都是具备的。\"]},\"511\":{\"h\":\"1.4 抽象类的细节\",\"t\":[\"不需要背，只要当idea报错之后，知道如何修改即可。\",\"关于抽象类的使用，以下为语法上要注意的细节，虽然条目较多，但若理解了抽象的本质，无需死记硬背。\",\"抽象类不能创建对象，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象。\",\"理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。\",\"抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的。\",\"理解：子类的构造方法中，有默认的super()，需要访问父类构造方法。\",\"抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。\",\"理解：未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。\",\"抽象类的子类，必须重写抽象父类中所有的抽象方法，否则子类也必须定义成抽象类，编译无法通过而报错。\",\"理解：假设不重写所有抽象方法，则类中可能包含抽象方法。那么创建对象后，调用抽象的方法，没有意义。\",\"抽象类存在的意义是为了被子类继承。\",\"理解：抽象类中已经实现的是模板中确定的成员，抽象类不确定如何实现的定义成抽象方法，交给具体的子类去实现。\"]},\"512\":{\"h\":\"1.5 抽象类存在的意义\",\"t\":[\"​ 抽象类存在的意义是为了被子类继承，否则抽象类将毫无意义。抽象类可以强制让子类，一定要按照规定的格式进行重写。\",\"总结\",\"抽象类的作用是什么样的？\",\"抽取共性时，无法确定方法体，就把方法定义为抽象的。\",\"强制让子类按照某种格式重写。\",\"抽象方法所在的类，必须是抽象类。\",\"抽象类和抽象方法的格式？\",\"public abstract 返回值类型 方法名 (参数列表);\",\"public abstract class 类名{}\",\"继承抽象类有哪些要注意？\",\"要么重写抽象类中的所有抽象方法\",\"要么是抽象类\"]},\"513\":{\"h\":\"2.1 概述\",\"t\":[\"我们已经学完了抽象类，抽象类中可以用抽象方法，也可以有普通方法，构造方法，成员变量等。那么什么是接口呢？接口是更加彻底的抽象，JDK7之前，包括JDK7，接口中全部是抽象方法。接口同样是不能创建对象的。\"]},\"514\":{\"h\":\"2.2 定义格式\",\"t\":[\"//接口的定义格式： interface 接口名称{ // 抽象方法 } // 接口的声明：interface // 接口名称：首字母大写，满足“驼峰模式” \"]},\"515\":{\"h\":\"2.3 接口成分的特点\",\"t\":[\"在JDK7，包括JDK7之前，接口中的只有包含：抽象方法和常量\"]},\"516\":{\"h\":\"2.3.1.抽象方法\",\"t\":[\"​ 注意：接口中的抽象方法默认会自动加上public abstract修饰程序员无需自己手写！！ ​ 按照规范：以后接口中的抽象方法建议不要写上public abstract。因为没有必要啊，默认会加上。\"]},\"517\":{\"h\":\"2.3.2 常量\",\"t\":[\"在接口中定义的成员变量默认会加上： public static final修饰。也就是说在接口中定义的成员变量实际上是一个常量。这里是使用public static final修饰后，变量值就不可被修改，并且是静态化的变量可以直接用接口名访问，所以也叫常量。常量必须要给初始值。常量命名规范建议字母全部大写，多个单词用下划线连接。\"]},\"518\":{\"h\":\"2.3.3 案例演示\",\"t\":[\"public interface InterF { // 抽象方法！ // public abstract void run(); void run(); // public abstract String getName(); String getName(); // public abstract int add(int a , int b); int add(int a , int b); // 它的最终写法是： // public static final int AGE = 12 ; int AGE = 12; //常量 String SCHOOL_NAME = \\\"黑马程序员\\\"; } \"]},\"519\":{\"h\":\"2.4 基本的实现\"},\"520\":{\"h\":\"2.4.1 实现接口的概述\",\"t\":[\"类与接口的关系为实现关系，即类实现接口，该类可以称为接口的实现类，也可以称为接口的子类。实现的动作类似继承，格式相仿，只是关键字不同，实现使用 implements关键字。\"]},\"521\":{\"h\":\"2.4.2 实现接口的格式\",\"t\":[\"/**接口的实现： 在Java中接口是被实现的，实现接口的类称为实现类。 实现类的格式:*/ class 类名 implements 接口1,接口2,接口3...{ } \",\"从上面格式可以看出，接口是可以被多实现的。大家可以想一想为什么呢？\"]},\"522\":{\"h\":\"2.4.3 类实现接口的要求和意义\",\"t\":[\"必须重写实现的全部接口中所有抽象方法。\",\"如果一个类实现了接口，但是没有重写完全部接口的全部抽象方法，这个类也必须定义成抽象类。\",\"意义：接口体现的是一种规范，接口对实现类是一种强制性的约束，要么全部完成接口申明的功能，要么自己也定义成抽象类。这正是一种强制性的规范。\"]},\"523\":{\"h\":\"2.4.4 类与接口基本实现案例\",\"t\":[\"假如我们定义一个运动员的接口（规范），代码如下：\",\"/** 接口：接口体现的是规范。 * */ public interface SportMan { void run(); // 抽象方法，跑步。 void law(); // 抽象方法，遵守法律。 String compittion(String project); // 抽象方法，比赛。 } \",\"接下来定义一个乒乓球运动员类，实现接口，实现接口的实现类代码如下：\",\"package com.itheima._03接口的实现; /** * 接口的实现： * 在Java中接口是被实现的，实现接口的类称为实现类。 * 实现类的格式: * class 类名 implements 接口1,接口2,接口3...{ * * * } * */ public class PingPongMan implements SportMan { @Override public void run() { System.out.println(\\\"乒乓球运动员稍微跑一下！！\\\"); } @Override public void law() { System.out.println(\\\"乒乓球运动员守法！\\\"); } @Override public String compittion(String project) { return \\\"参加\\\"+project+\\\"得金牌！\\\"; } } \",\"测试代码：\",\"public class TestMain { public static void main(String[] args) { // 创建实现类对象。 PingPongMan zjk = new PingPongMan(); zjk.run(); zjk.law(); System.out.println(zjk.compittion(\\\"全球乒乓球比赛\\\")); } } \"]},\"524\":{\"h\":\"2.4.5 类与接口的多实现案例\",\"t\":[\"类与接口之间的关系是多实现的，一个类可以同时实现多个接口。\",\"首先我们先定义两个接口，代码如下：\",\"/** 法律规范：接口*/ public interface Law { void rule(); } /** 这一个运动员的规范：接口*/ public interface SportMan { void run(); } \",\"然后定义一个实现类：\",\"/** * Java中接口是可以被多实现的： * 一个类可以实现多个接口: Law, SportMan * * */ public class JumpMan implements Law ,SportMan { @Override public void rule() { System.out.println(\\\"尊长守法\\\"); } @Override public void run() { System.out.println(\\\"训练跑步！\\\"); } } \",\"从上面可以看出类与接口之间是可以多实现的，我们可以理解成实现多个规范，这是合理的。\"]},\"525\":{\"h\":\"2.5 接口与接口的多继承\",\"t\":[\"Java中，接口与接口之间是可以多继承的：也就是一个接口可以同时继承多个接口。大家一定要注意：\",\"类与接口是实现关系\",\"接口与接口是继承关系\",\"接口继承接口就是把其他接口的抽象方法与本接口进行了合并。\",\"案例演示：\",\"public interface Abc { void go(); void test(); } /** 法律规范：接口*/ public interface Law { void rule(); void test(); } * * 总结： * 接口与类之间是多实现的。 * 接口与接口之间是多继承的。 * */ public interface SportMan extends Law , Abc { void run(); } \"]},\"526\":{\"h\":\"2.6扩展：接口的细节\",\"t\":[\"不需要背，只要当idea报错之后，知道如何修改即可。\",\"关于接口的使用，以下为语法上要注意的细节，虽然条目较多，但若理解了抽象的本质，无需死记硬背。\",\"当两个接口中存在相同抽象方法的时候，该怎么办？\",\"只要重写一次即可。此时重写的方法，既表示重写1接口的，也表示重写2接口的。\",\"实现类能不能继承A类的时候，同时实现其他接口呢？\",\"继承的父类，就好比是亲爸爸一样 实现的接口，就好比是干爹一样 可以继承一个类的同时，再实现多个接口，只不过，要把接口里面所有的抽象方法，全部实现。\",\"实现类能不能继承一个抽象类的时候，同时实现其他接口呢？\",\"实现类可以继承一个抽象类的同时，再实现其他多个接口，只不过要把里面所有的抽象方法全部重写。\",\"实现类Zi，实现了一个接口，还继承了一个Fu类。假设在接口中有一个方法，父类中也有一个相同的方法。子类如何操作呢？\",\"处理办法一：如果父类中的方法体，能满足当前业务的需求，在子类中可以不用重写。 处理办法二：如果父类中的方法体，不能满足当前业务的需求，需要在子类中重写。\",\"如果一个接口中，有10个抽象方法，但是我在实现类中，只需要用其中一个，该怎么办?\",\"可以在接口跟实现类中间，新建一个中间类（适配器类） 让这个适配器类去实现接口，对接口里面的所有的方法做空重写。 让子类继承这个适配器类，想要用到哪个方法，就重写哪个方法。 因为中间类没有什么实际的意义，所以一般会把中间类定义为抽象的，不让外界创建对象\"]},\"527\":{\"h\":\"2.7 接口中成员的特点\",\"t\":[\"成员变量\",\"只能是常量\",\"默认修饰符：public static final\",\"构造方法\",\"没有\",\"成员方法\",\"只能是抽象方法\",\"默认修饰符：public abstract\",\"JDK7以前：接口中只能定义抽象方法。\"]},\"528\":{\"h\":\"2.8 接口和类之间的关系\",\"t\":[\"类和类的关系 ==> 继承关系，只能单继承，不能多继承，但是可以多层继承\",\"类和接口的关系 ==> 实现关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口\",\"接口和接口的关系 ==> 继承关系，可以单继承，也可以多继承\"]},\"529\":{\"h\":\"3.1 概述\"},\"530\":{\"h\":\"3.1.1 什么是内部类\",\"t\":[\"将一个类A定义在另一个类B里面，里面的那个类A就称为内部类，B则称为外部类。可以把内部类理解成寄生，外部类理解成宿主。\"]},\"531\":{\"h\":\"3.1.2 什么时候使用内部类\",\"t\":[\"一个事物内部还有一个独立的事物，内部的事物脱离外部的事物无法独立使用\",\"人里面有一颗心脏。\",\"汽车内部有一个发动机。\",\"为了实现更好的封装性。\"]},\"532\":{\"h\":\"3.2 内部类的分类\",\"t\":[\"按定义的位置来分\",\"成员内部内，类定义在了成员位置 (类中方法外称为成员位置，无static修饰的内部类)\",\"静态内部类，类定义在了成员位置 (类中方法外称为成员位置，有static修饰的内部类)\",\"局部内部类，类定义在方法内\",\"匿名内部类，没有名字的内部类，可以在方法中，也可以在类中方法外。\"]},\"533\":{\"h\":\"3.3 成员内部类\",\"t\":[\"成员内部类特点：\",\"无static修饰的内部类，属于外部类对象的。\",\"宿主：外部类对象。\",\"内部类的使用格式：\",\" 外部类.内部类。 // 访问内部类的类型都是用 外部类.内部类 \",\"获取成员内部类对象的两种方式：\",\"方式一：外部直接创建成员内部类的对象\",\"外部类.内部类 变量 = new 外部类（）.new 内部类（）; \",\"方式二：在外部类中定义一个方法提供内部类的对象\",\"案例演示\",\"方式一： public class Test { public static void main(String[] args) { // 宿主：外部类对象。 // Outer out = new Outer(); // 创建内部类对象。 Outer.Inner oi = new Outer().new Inner(); oi.method(); } } class Outer { // 成员内部类，属于外部类对象的。 // 拓展：成员内部类不能定义静态成员。 public class Inner{ // 这里面的东西与类是完全一样的。 public void method(){ System.out.println(\\\"内部类中的方法被调用了\\\"); } } } 方式二： public class Outer { String name; private class Inner{ static int a = 10; } public Inner getInstance(){ return new Inner(); } } public class Test { public static void main(String[] args) { Outer o = new Outer(); System.out.println(o.getInstance()); } } \"]},\"534\":{\"h\":\"3.4 成员内部类的细节\",\"t\":[\"编写成员内部类的注意点：\",\"成员内部类可以被一些修饰符所修饰，比如： private，默认，protected，public，static等\",\"在成员内部类里面，JDK16之前不能定义静态变量，JDK16开始才可以定义静态变量。\",\"创建内部类对象时，对象中有一个隐含的Outer.this记录外部类对象的地址值。（请参见3.6节的内存图）\",\"详解：\",\"​ 内部类被private修饰，外界无法直接获取内部类的对象，只能通过3.3节中的方式二获取内部类的对象\",\"​ 被其他权限修饰符修饰的内部类一般用3.3节中的方式一直接获取内部类的对象\",\"​ 内部类被static修饰是成员内部类中的特殊情况，叫做静态内部类下面单独学习。\",\"​ 内部类如果想要访问外部类的成员变量，外部类的变量必须用final修饰，JDK8以前必须手动写final，JDK8之后不需要手动写，JDK默认加上。\"]},\"535\":{\"h\":\"3.5 成员内部类面试题\",\"t\":[\"请在?地方向上相应代码,以达到输出的内容\",\"注意：内部类访问外部类对象的格式是：外部类名.this\",\"public class Test { public static void main(String[] args) { Outer.inner oi = new Outer().new inner(); oi.method(); } } class Outer { // 外部类 private int a = 30; // 在成员位置定义一个类 class inner { private int a = 20; public void method() { int a = 10; System.out.println(???); // 10 答案：a System.out.println(???); // 20 答案：this.a System.out.println(???); // 30 答案：Outer.this.a } } } \"]},\"536\":{\"h\":\"3.6 成员内部类内存图\"},\"537\":{\"h\":\"3.7 静态内部类\",\"t\":[\"静态内部类特点：\",\"静态内部类是一种特殊的成员内部类。\",\"有static修饰，属于外部类本身的。\",\"总结：静态内部类与其他类的用法完全一样。只是访问的时候需要加上外部类.内部类。\",\"拓展1:静态内部类可以直接访问外部类的静态成员。\",\"拓展2:静态内部类不可以直接访问外部类的非静态成员，如果要访问需要创建外部类的对象。\",\"拓展3:静态内部类中没有银行的Outer.this。\",\"内部类的使用格式：\",\"外部类.内部类。 \",\"静态内部类对象的创建格式：\",\"外部类.内部类 变量 = new 外部类.内部类构造器; \",\"调用方法的格式：\",\"调用非静态方法的格式：先创建对象，用对象调用\",\"调用静态方法的格式：外部类名.内部类名.方法名();\",\"案例演示：\",\"// 外部类：Outer01 class Outer01{ private static String sc_name = \\\"黑马程序\\\"; // 内部类: Inner01 public static class Inner01{ // 这里面的东西与类是完全一样的。 private String name; public Inner01(String name) { this.name = name; } public void showName(){ System.out.println(this.name); // 拓展:静态内部类可以直接访问外部类的静态成员。 System.out.println(sc_name); } } } public class InnerClassDemo01 { public static void main(String[] args) { // 创建静态内部类对象。 // 外部类.内部类 变量 = new 外部类.内部类构造器; Outer01.Inner01 in = new Outer01.Inner01(\\\"张三\\\"); in.showName(); } } \"]},\"538\":{\"h\":\"3.8 局部内部类\",\"t\":[\"局部内部类 ：定义在方法中的类。\",\"定义格式:\",\"class 外部类名 { 数据类型 变量名; 修饰符 返回值类型 方法名(参数列表) { // … class 内部类 { // 成员变量 // 成员方法 } } } \",\"将内部类定义在方法里面就叫做局部内部类，类似于方法里面的局部变量。\",\"外界是无法直接使用，需要在方法内部创建对象并使用。\",\"该类可以直接访问外部类的成员，也可以访问方法内的局部变量。\"]},\"539\":{\"h\":\"3.9 匿名内部类【重点】\"},\"540\":{\"h\":\"3.9.1 概述\",\"t\":[\"匿名内部类 ：是内部类的简化写法。他是一个隐含了名字的内部类。开发中，最常用到的内部类就是匿名内部类了。\"]},\"541\":{\"h\":\"3.9.2 格式\",\"t\":[\"new 类名或者接口名() { 重写方法; }; \",\"包含了：\",\"继承或者实现关系\",\"方法重写\",\"创建对象\",\"所以从语法上来讲，这个整体其实是匿名内部类对象\"]},\"542\":{\"h\":\"3.9.2 什么时候用到匿名内部类\",\"t\":[\"实际上，如果我们希望定义一个只要使用一次的类，就可考虑使用匿名内部类。匿名内部类的本质作用\",\"是为了简化代码。\",\"之前我们使用接口时，似乎得做如下几步操作：\",\"定义子类\",\"重写接口中的方法\",\"创建子类对象\",\"调用重写后的方法\",\"interface Swim { public abstract void swimming(); } // 1. 定义接口的实现类 class Student implements Swim { // 2. 重写抽象方法 @Override public void swimming() { System.out.println(\\\"狗刨式...\\\"); } } public class Test { public static void main(String[] args) { // 3. 创建实现类对象 Student s = new Student(); // 4. 调用方法 s.swimming(); } } \",\"我们的目的，最终只是为了调用方法，那么能不能简化一下，把以上四步合成一步呢？匿名内部类就是做这样的快捷方式。\"]},\"543\":{\"h\":\"3.9.3 匿名内部类前提和格式\",\"t\":[\"匿名内部类必须继承一个父类或者实现一个父接口。\",\"匿名内部类格式\",\"new 父类名或者接口名(){ // 方法重写 @Override public void method() { // 执行语句 } }; \"]},\"544\":{\"h\":\"3.9.4 使用方式\",\"t\":[\"以接口为例，匿名内部类的使用，代码如下：\",\"interface Swim { public abstract void swimming(); } public class Demo07 { public static void main(String[] args) { // 使用匿名内部类 new Swim() { @Override public void swimming() { System.out.println(\\\"自由泳...\\\"); } }.swimming(); // 接口 变量 = new 实现类(); // 多态,走子类的重写方法 Swim s2 = new Swim() { @Override public void swimming() { System.out.println(\\\"蛙泳...\\\"); } }; s2.swimming(); s2.swimming(); } } \"]},\"545\":{\"h\":\"3.9.5 匿名内部类的特点\",\"t\":[\"定义一个没有名字的内部类\",\"这个类实现了父类，或者父类接口\",\"匿名内部类会创建这个没有名字的类的对象\"]},\"546\":{\"h\":\"3.9.6 匿名内部类的使用场景\",\"t\":[\"通常在方法的形式参数是接口或者抽象类时，也可以将匿名内部类作为参数传递。代码如下：\",\"interface Swim { public abstract void swimming(); } public class Demo07 { public static void main(String[] args) { // 普通方式传入对象 // 创建实现类对象 Student s = new Student(); goSwimming(s); // 匿名内部类使用场景:作为方法参数传递 Swim s3 = new Swim() { @Override public void swimming() { System.out.println(\\\"蝶泳...\\\"); } }; // 传入匿名内部类 goSwimming(s3); // 完美方案: 一步到位 goSwimming(new Swim() { public void swimming() { System.out.println(\\\"大学生, 蛙泳...\\\"); } }); goSwimming(new Swim() { public void swimming() { System.out.println(\\\"小学生, 自由泳...\\\"); } }); } // 定义一个方法,模拟请一些人去游泳 public static void goSwimming(Swim s) { s.swimming(); } } \"]},\"547\":{\"h\":\"一、接口中新增的方法\",\"t\":[\"JDK7以前：接口中只能定义抽象方法。\",\"JDK8的新特性：接口中可以定义有方法体的方法。（默认、静态）\",\"JDK9的新特性：接口中可以定义私有方法。\",\"那么Java为什么需要这样子去设计？\"]},\"548\":{\"h\":\"接口中的默认方法\",\"t\":[\"允许在接口中定义默认方法，需要使用关键字default修饰\",\"作用：解决接口升级的问题\",\"接口中默认方法的定义格式：\",\"格式：public default 返回值类型 方法名 (参数列表) {}\",\"范例：public default void show() {}\",\"接口中默认方法的注意事项：\",\"默认方法不是抽象方法，所以不强制被重写。但是如果被重写，重写的时候去掉default关键字\",\"public可以省略，default不能省略\",\"如果实现了多个接口，多个接口中存在相同名字的默认方法，子类就必须对该方法进行重写\"]},\"549\":{\"h\":\"接口中的静态方法\",\"t\":[\"允许在接口中定义定义静态方法，需要用static修饰\",\"接口中静态方法的定义格式：\",\"格式：public static 返回值类型 方法名 (参数列表) {}\",\"范例：public static void show() {}\",\"接口中静态方法的注意事项：\",\"静态方法只能通过接口名调用，不能通过实现类名或者对象名调用\",\"public可以省略，static不能省略\"]},\"550\":{\"h\":\"私有方法\"},\"551\":{\"h\":\"普通私有方法、静态私有方法\",\"t\":[\"接口中私有方法的定义格式：\",\"给默认方法服务\",\"格式1：private 返回值类型 方法名 (参数列表) {}\",\"范例1：private void show() {}\",\"给静态方法服务\",\"格式2：private static 返回值类型 方法名 (参数列表) {}\",\"范例2：private static void method() {}\"]},\"552\":{\"h\":\"二、接口应用\",\"t\":[\"接口代表规则，是行为的抽象。想要让哪个类拥有一个行为，就让这个类实现对应的接口就可以了。\",\"当一个方法的参数是接口时，可以传递接口所有实现类的对象，这种方式称之为接口多态。\"]},\"553\":{\"h\":\"三、适配器设计模式\"},\"554\":{\"h\":\"什么是设计模式\",\"t\":[\"设计模式（Design pattern)是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性、程序的重用性。\",\"简单理解：设计模式就是各种套路。\",\"适配器设计模式：解决接口与接口实现类之间的矛盾问题\",\"总结：\",\"当一个接口中抽象方法过多，但是我只要使用其中一部分的时候，就可以适配器设计模式。\",\"书写步骤：\",\"编写中间类XXXAdapter，实现对应的接口\",\"对接口中的抽象方法进行空实现\",\"让真正的实砚类继承中间类，并重写需要用的方法为了避免其他类创建适配器类的对象，中间的适配器类用abstract进行修饰\"]},\"555\":{\"h\":\"11-Java常见API\"},\"556\":{\"h\":\"1.1 概述\",\"t\":[\"tips：了解内容\",\"查看API文档，我们可以看到API文档中关于Math类的定义如下：\",\"1576047659085\",\"Math类所在包为java.lang包，因此在使用的时候不需要进行导包。并且Math类被final修饰了，因此该类是不能被继承的。\",\"Math类包含执行基本数字运算的方法，我们可以使用Math类完成基本的数学运算。\",\"要想使用Math类我们就需要先创建该类的对象，那么创建对象就需要借助于构造方法。因此我们就需要首先查看一下API文档，看看API文档中针对Math类有没有提供对应的构造方法。通过API文档来查看\",\"一下Math类的成员，如下所示：\",\"1576047846672\",\"在API文档中没有体现可用的构造方法，因此我们就不能直接通过new关键字去创建Math类的对象。同时我们发现Math类中的方法都是静态的，因此在使用的时候我们可以直接通过类名去调用。在Math类中\",\"定义了很多数学运算的方法，但是我们并不可能将所有的方法学习一遍，我们主要学习的就是一些常见的方法。\"]},\"557\":{\"h\":\"1.2 常见方法\",\"t\":[\"tips：重点讲解内容\",\"我们要学习的Math的常见方法如下所示：\",\"public static int abs(int a) // 返回参数的绝对值 public static double ceil(double a) // 返回大于或等于参数的最小整数 public static double floor(double a) // 返回小于或等于参数的最大整数 public static int round(float a) // 按照四舍五入返回最接近参数的int类型的值 public static int max(int a,int b) // 获取两个int值中的较大值 public static int min(int a,int b) // 获取两个int值中的较小值 public static double pow (double a,double b) // 计算a的b次幂的值 public static double random() // 返回一个[0.0,1.0)的随机值 \",\"接下来我们就来演示一些这些方法的执行效果，如下所示：\",\"public class MathDemo01 { public static void main(String[] args) { // public static int abs(int a) 返回参数的绝对值 System.out.println(\\\"-2的绝对值为：\\\" + Math.abs(-2)); System.out.println(\\\"2的绝对值为：\\\" + Math.abs(2)); // public static double ceil(double a) 返回大于或等于参数的最小整数 System.out.println(\\\"大于或等于23.45的最小整数位：\\\" + Math.ceil(23.45)); System.out.println(\\\"大于或等于-23.45的最小整数位：\\\" + Math.ceil(-23.45)); // public static double floor(double a) 返回小于或等于参数的最大整数 System.out.println(\\\"小于或等于23.45的最大整数位：\\\" + Math.floor(23.45)); System.out.println(\\\"小于或等于-23.45的最大整数位：\\\" + Math.floor(-23.45)); // public static int round(float a) 按照四舍五入返回最接近参数的int System.out.println(\\\"23.45四舍五入的结果为：\\\" + Math.round(23.45)); System.out.println(\\\"23.55四舍五入的结果为：\\\" + Math.round(23.55)); // public static int max(int a,int b) 返回两个int值中的较大值 System.out.println(\\\"23和45的最大值为: \\\" + Math.max(23, 45)); // public static int min(int a,int b) 返回两个int值中的较小值 System.out.println(\\\"12和34的最小值为: \\\" + Math.min(12 , 34)); // public static double pow (double a,double b)返回a的b次幂的值 System.out.println(\\\"2的3次幂计算结果为: \\\" + Math.pow(2,3)); // public static double random()返回值为double的正值，[0.0,1.0) System.out.println(\\\"获取到的0-1之间的随机数为: \\\" + Math.random()); } } \",\"运行程序进行测试，控制台输出结果如下：\",\"-2的绝对值为：2 2的绝对值为：2 大于或等于23.45的最小整数位：24.0 大于或等于-23.45的最小整数位：-23.0 小于或等于23.45的最大整数位：23.0 小于或等于-23.45的最大整数位：-24.0 23.45四舍五入的结果为：23 23.55四舍五入的结果为：24 23和45的最大值为: 45 12和34的最小值为: 12 2的3次幂计算结果为: 8.0 获取到的0-1之间的随机数为: 0.7322484131745958 \"]},\"558\":{\"h\":\"1.3 算法小题(质数)\",\"t\":[\"需求：\",\"​ 判断一个数是否为一个质数\",\"代码实现：\",\"public class MathDemo2 { public static void main(String[] args) { //判断一个数是否为一个质数 System.out.println(isPrime(997)); //997 2~996 995次 } public static boolean isPrime(int number) { int count = 0; for (int i = 2; i <= Math.sqrt(number); i++) { count++; if (number % i == 0) { return false; } } System.out.println(count); return true; } } \"]},\"559\":{\"h\":\"1.4 算法小题(自幂数)\",\"t\":[\"自幂数，一个n位自然数等于自身各个数位上数字的n次幂之和\",\"​ 举例1：三位数 1^3 + 5^3 + 3^3 = 153\",\"​ 举例2：四位数 1^4 + 6^4 + 3^4 + 4^3 = 1634\",\"如果自幂数是：\",\"一位自幂数，也叫做：独身数\",\"三位自幂数：水仙花数 四位自幂数：四叶玫瑰数\",\"五位自幂数：五角星数 六位自幂数：六合数\",\"七位自幂数：北斗七星数 八位自幂数：八仙数\",\"九位自幂数：九九重阳数 十位自幂数：十全十美数\",\"要求1：统计一共有多少个水仙花数。\",\"要求2：（课后作业）证明没有两位的自幂数。\",\"要求3：（课后作业）分别统计有多少个四叶玫瑰数和五角星数。（答案：都是3个）\",\"//水仙花数:100 ~ 999 int count = 0; //得到每一个三位数 for (int i = 100; i <= 999; i++) { //个位 十位 百位 int ge = i % 10; int shi = i / 10 % 10; int bai = i / 100 % 10; //判断: //每一位的三次方之和 跟本身 进行比较。 double sum = Math.pow(ge, 3) + Math.pow(shi, 3) + Math.pow(bai, 3); if (sum == i) { count++; //System.out.println(i); System.out.println(count); } } \"]},\"560\":{\"h\":\"1.5 课后练习\",\"t\":[\"要求2：（课后作业）证明没有两位的自幂数。\",\"要求3：（课后作业）分别统计有多少个四叶玫瑰数和五角星数。（答案：都是3个）\"]},\"561\":{\"h\":\"2.1 概述\",\"t\":[\"tips：了解内容\",\"查看API文档，我们可以看到API文档中关于System类的定义如下：\",\"1576049347968\",\"System类所在包为java.lang包，因此在使用的时候不需要进行导包。并且System类被final修饰了，因此该类是不能被继承的。\",\"System包含了系统操作的一些常用的方法。比如获取当前时间所对应的毫秒值，再比如终止当前JVM等等。\",\"要想使用System类我们就需要先创建该类的对象，那么创建对象就需要借助于构造方法。因此我们就需要首先查看一下API文档，看看API文档中针对System类有没有提供对应的构造方法。通过API文档来\",\"查看一下System类的成员，如下所示：\",\"1576049535584\",\"在API文档中没有体现可用的构造方法，因此我们就不能直接通过new关键字去创建System类的对象。同时我们发现System类中的方法都是静态的，因此在使用的时候我们可以直接通过类名去调用（Nested\",\"Class Summary内部类或者内部接口的描述）。\"]},\"562\":{\"h\":\"2.2 常见方法\",\"t\":[\"tips：重点讲解内容\",\"我们要学习的System类中的常见方法如下所示：\",\"public static long currentTimeMillis() // 获取当前时间所对应的毫秒值（当前时间为0时区所对应的时间即就是英国格林尼治天文台旧址所在位置） public static void exit(int status) // 终止当前正在运行的Java虚拟机，0表示正常退出，非零表示异常退出 public static native void arraycopy(Object src, int srcPos, Object dest, int destPos, int length); // 进行数值元素copy \",\"接下来我们就来通过一些案例演示一下这些方法的特点。：演示currentTimeMillis方法\",\"public class SystemDemo01 { public static void main(String[] args) { // 获取当前时间所对应的毫秒值 long millis = System.currentTimeMillis(); // 输出结果 System.out.println(\\\"当前时间所对应的毫秒值为：\\\" + millis); } } \",\"运行程序进行测试，控制台的输出结果如下：\",\"当前时间所对应的毫秒值为：1576050298343 \",\"获取到当前时间的毫秒值的意义：我们常常来需要统计某一段代码的执行时间。此时我们就可以在执行这段代码之前获取一次时间，在执行完毕以后再次获取一次系统时间，然后计算两个时间的差值，\",\"这个差值就是这段代码执行完毕以后所需要的时间。如下代码所示：\",\"public class SystemDemo2 { public static void main(String[] args) { //判断1~100000之间有多少个质数 long start = System.currentTimeMillis(); for (int i = 1; i <= 100000; i++) { boolean flag = isPrime2(i); if (flag) { System.out.println(i); } } long end = System.currentTimeMillis(); //获取程序运行的总时间 System.out.println(end - start); //方式一：1514 毫秒 方式二：71毫秒 } //以前判断是否为质数的方式 public static boolean isPrime1(int number) { for (int i = 2; i < number; i++) { if (number % i == 0) { return false; } } return true; } //改进之后判断是否为质数的方式（效率高） public static boolean isPrime2(int number) { for (int i = 2; i <= Math.sqrt(number); i++) { if (number % i == 0) { return false; } } return true; } } \",\"：演示exit方法\",\"public class SystemDemo01 { public static void main(String[] args) { // 输出 System.out.println(\\\"程序开始执行了.....\\\"); // 终止JVM System.exit(0); // 输出 System.out.println(\\\"程序终止了..........\\\"); } } \",\"运行程序进行测试，控制台输出结果如下：\",\"程序开始执行了..... \",\"此时可以看到在控制台只输出了\\\"程序开始了...\\\"，由于JVM终止了，因此输出\\\"程序终止了...\\\"这段代码没有被执行。：演示arraycopy方法\",\"方法参数说明：\",\"// src: 源数组 // srcPos： 源数值的开始位置 // dest： 目标数组 // destPos： 目标数组开始位置 // length: 要复制的元素个数 public static native void arraycopy(Object src, int srcPos, Object dest, int destPos, int length); \",\"代码如下所示：\",\"public class SystemDemo01 { public static void main(String[] args) { // 定义源数组 int[] srcArray = {23 , 45 , 67 , 89 , 14 , 56 } ; // 定义目标数组 int[] desArray = new int[10] ; // 进行数组元素的copy: 把srcArray数组中从0索引开始的3个元素，从desArray数组中的1索引开始复制过去 System.arraycopy(srcArray , 0 , desArray , 1 , 3); // 遍历目标数组 for(int x = 0 ; x < desArray.length ; x++) { if(x != desArray.length - 1) { System.out.print(desArray[x] + \\\", \\\"); }else { System.out.println(desArray[x]); } } } } \",\"运行程序进行测试，控制台输出结果如下所示：\",\"0, 23, 45, 67, 0, 0, 0, 0, 0, 0 \",\"通过控制台输出结果我们可以看到，数组元素的确进行复制了。\",\"使用这个方法我们也可以完成数组元素的删除操作，如下所示：\",\"public class SystemDemo02 { public static void main(String[] args) { // 定义一个数组 int[] srcArray = {23 , 45 , 67 , 89 , 14 , 56 } ; // 删除数组中第3个元素(67)：要删除67这个元素，我们只需要将67后面的其他元素依次向前进行移动即可 System.arraycopy(srcArray , 3 , srcArray , 2 , 3); // 遍历srcArray数组 for(int x = 0 ; x < srcArray.length ; x++) { if(x != desArray.length - 1) { System.out.print(srcArray[x] + \\\", \\\"); }else { System.out.println(srcArray[x]); } } } } \",\"运行程序进行测试，控制台的输出结果如下所示：\",\"23, 45, 89, 14, 56, 56 \",\"通过控制台输出结果我们可以看到此时多出了一个56元素，此时我们只需要将最后一个位置设置为0即可。如下所示：\",\"public class SystemDemo02 { public static void main(String[] args) { // 定义一个数组 int[] srcArray = {23 , 45 , 67 , 89 , 14 , 56 } ; // 删除数组中第3个元素(67)：要删除67这个元素，我们只需要将67后面的其他元素依次向前进行移动即可 System.arraycopy(srcArray , 3 , srcArray , 2 , 3); // 将最后一个位置的元素设置为0 srcArray[srcArray.length - 1] = 0 ; // 遍历srcArray数组 for(int x = 0 ; x < srcArray.length ; x++) { if(x != srcArray.length - 1 ) { System.out.print(srcArray[x] + \\\", \\\"); }else { System.out.println(srcArray[x]); } } } } \",\"运行程序进行测试，控制台输出结果如下所示：\",\"23, 45, 89, 14, 56, 0 \",\"此时我们可以看到元素\\\"67\\\"已经被删除掉了。67后面的其他元素依次向前进行移动了一位。\",\"arraycopy方法底层细节：\",\"1.如果数据源数组和目的地数组都是基本数据类型，那么两者的类型必须保持一致，否则会报错\",\"2.在拷贝的时候需要考虑数组的长度，如果超出范围也会报错\",\"3.如果数据源数组和目的地数组都是引用数据类型，那么子类类型可以赋值给父类类型\",\"代码示例：\",\"public class SystemDemo3 { public static void main(String[] args) { //public static void arraycopy(数据源数组，起始索引，目的地数组，起始索引，拷贝个数) 数组拷贝 //细节: //1.如果数据源数组和目的地数组都是基本数据类型，那么两者的类型必须保持一致，否则会报错 //2.在拷贝的时候需要考虑数组的长度，如果超出范围也会报错 //3.如果数据源数组和目的地数组都是引用数据类型，那么子类类型可以赋值给父类类型 Student s1 = new Student(\\\"zhangsan\\\", 23); Student s2 = new Student(\\\"lisi\\\", 24); Student s3 = new Student(\\\"wangwu\\\", 25); Student[] arr1 = {s1, s2, s3}; Person[] arr2 = new Person[3]; //把arr1中对象的地址值赋值给arr2中 System.arraycopy(arr1, 0, arr2, 0, 3); //遍历数组arr2 for (int i = 0; i < arr2.length; i++) { Student stu = (Student) arr2[i]; System.out.println(stu.getName() + \\\",\\\" + stu.getAge()); } } } class Person { private String name; private int age; public Person() { } public Person(String name, int age) { this.name = name; this.age = age; } /** * 获取 * * @return name */ public String getName() { return name; } /** * 设置 * * @param name */ public void setName(String name) { this.name = name; } /** * 获取 * * @return age */ public int getAge() { return age; } /** * 设置 * * @param age */ public void setAge(int age) { this.age = age; } public String toString() { return \\\"Person{name = \\\" + name + \\\", age = \\\" + age + \\\"}\\\"; } } class Student extends Person { public Student() { } public Student(String name, int age) { super(name, age); } } \"]},\"563\":{\"h\":\"3.1 概述\",\"t\":[\"​ Runtime表示Java中运行时对象，可以获取到程序运行时设计到的一些信息\"]},\"564\":{\"h\":\"3.2 常见方法\",\"t\":[\"我们要学习的Object类中的常见方法如下所示：\",\"public static Runtime getRuntime() //当前系统的运行环境对象 public void exit(int status) //停止虚拟机 public int availableProcessors() //获得CPU的线程数 public long maxMemory() //JVM能从系统中获取总内存大小（单位byte） public long totalMemory() //JVM已经从系统中获取总内存大小（单位byte） public long freeMemory() //JVM剩余内存大小（单位byte） public Process exec(String command) //运行cmd命令 \",\"代码示例：\",\"public class RunTimeDemo1 { public static void main(String[] args) throws IOException { /* public static Runtime getRuntime() 当前系统的运行环境对象 public void exit(int status) 停止虚拟机 public int availableProcessors() 获得CPU的线程数 public long maxMemory() JVM能从系统中获取总内存大小(单位byte) public long totalMemory() JVM已经从系统中获取总内存大小(单位byte) public long freeMemory() JVM剩余内存大小(单位byte) public Process exec(string command) 运行cmd命令 */ //1.获取Runtime的对象 //Runtime r1 =Runtime.getRuntime(); //2.exit 停止虚拟机 //Runtime.getRuntime().exit(0); //System.out.println(\\\"看看我执行了吗?\\\"); //3.获得CPU的线程数 System.out.println(Runtime.getRuntime().availableProcessors());//8 //4.总内存大小,单位byte字节 System.out.println(Runtime.getRuntime().maxMemory() / 1024 / 1024);//4064 //5.已经获取的总内存大小,单位byte字节 System.out.println(Runtime.getRuntime().totalMemory() / 1024 / 1024);//254 //6.剩余内存大小 System.out.println(Runtime.getRuntime().freeMemory() / 1024 / 1024);//251 //7.运行cmd命令 //shutdown :关机 //加上参数才能执行 //-s :默认在1分钟之后关机 //-s -t 指定时间 : 指定关机时间 //-a :取消关机操作 //-r: 关机并重启 Runtime.getRuntime().exec(\\\"shutdown -s -t 3600\\\"); } } \"]},\"565\":{\"h\":\"3.3 恶搞好基友\",\"t\":[\"需求：\",\"​ 界面上方按钮默认隐藏\",\"​ 界面中间有一个提示文本和三个按钮\",\"​ 当你的好基友点击中间三个按钮的时候就在N秒之后关机，不同的按钮N的值不一样\",\"​ 任意一个按钮被点击之后，上方了按钮出现。当点击上方按钮之后取消关机任务\",\"恶搞好基友\",\"public class Test { public static void main(String[] args) { new MyJframe(); } } \",\"public class MyJframe extends JFrame implements ActionListener { JButton yesBut = new JButton(\\\"帅爆了\\\"); JButton midBut = new JButton(\\\"一般般吧\\\"); JButton noBut = new JButton(\\\"不帅，有点磕碜\\\"); JButton dadBut = new JButton(\\\"饶了我吧！\\\"); //决定了上方的按钮是否展示 boolean flag = false; public MyJframe() { initJFrame(); initView(); //显示 this.setVisible(true); } private void initView() { this.getContentPane().removeAll(); if (flag) { //展示按钮 dadBut.setBounds(50, 20, 100, 30); dadBut.addActionListener(this); this.getContentPane().add(dadBut); } JLabel text = new JLabel(\\\"你觉得自己帅吗？\\\"); text.setFont(new Font(\\\"微软雅黑\\\", 0, 30)); text.setBounds(120, 150, 300, 50); yesBut.setBounds(200, 250, 100, 30); midBut.setBounds(200, 325, 100, 30); noBut.setBounds(160, 400, 180, 30); yesBut.addActionListener(this); midBut.addActionListener(this); noBut.addActionListener(this); this.getContentPane().add(text); this.getContentPane().add(yesBut); this.getContentPane().add(midBut); this.getContentPane().add(noBut); this.getContentPane().repaint(); } private void initJFrame() { //设置宽高 this.setSize(500, 600); //设置标题 this.setTitle(\\\"恶搞好基友\\\"); //设置关闭模式 this.setDefaultCloseOperation(3); //置顶 this.setAlwaysOnTop(true); //居中 this.setLocationRelativeTo(null); //取消内部默认布局 this.setLayout(null); } @Override public void actionPerformed(ActionEvent e) { Object obj = e.getSource(); if (obj == yesBut) { //给好基友一个弹框 showJDialog(\\\"xxx，你太自信了，给你一点小惩罚\\\"); try { Runtime.getRuntime().exec(\\\"shutdown -s -t 3600\\\"); } catch (IOException ioException) { ioException.printStackTrace(); } flag = true; initView(); } else if (obj == midBut) { System.out.println(\\\"你的好基友点击了一般般吧\\\"); //给好基友一个弹框 showJDialog(\\\"xxx，你还是太自信了，也要给你一点小惩罚\\\"); try { Runtime.getRuntime().exec(\\\"shutdown -s -t 7200\\\"); } catch (IOException ioException) { ioException.printStackTrace(); } flag = true; initView(); } else if (obj == noBut) { System.out.println(\\\"你的好基友点击了不帅\\\"); //给好基友一个弹框 showJDialog(\\\"xxx，你还是有一点自知之明的，也要给你一点小惩罚\\\"); try { Runtime.getRuntime().exec(\\\"shutdown -s -t 1800\\\"); } catch (IOException ioException) { ioException.printStackTrace(); } flag = true; initView(); } else if (obj == dadBut) { //给好基友一个弹框 showJDialog(\\\"xxx，这次就饶了你~\\\"); try { Runtime.getRuntime().exec(\\\"shutdown -a\\\"); } catch (IOException ioException) { ioException.printStackTrace(); } } } public void showJDialog(String content) { //创建一个弹框对象 JDialog jDialog = new JDialog(); //给弹框设置大小 jDialog.setSize(200, 150); //让弹框置顶 jDialog.setAlwaysOnTop(true); //让弹框居中 jDialog.setLocationRelativeTo(null); //弹框不关闭永远无法操作下面的界面 jDialog.setModal(true); //创建Jlabel对象管理文字并添加到弹框当中 JLabel warning = new JLabel(content); warning.setBounds(0, 0, 200, 150); jDialog.getContentPane().add(warning); //让弹框展示出来 jDialog.setVisible(true); } } \"]},\"566\":{\"h\":\"4.1 概述\",\"t\":[\"tips：重点讲解内容\",\"查看API文档，我们可以看到API文档中关于Object类的定义如下：\",\"1576053677194\",\"Object类所在包是java.lang包。Object 是类层次结构的根，每个类都可以将 Object 作为超类。所有类都直接或者间接的继承自该类；换句话说，该类所具备的方法，其他所有类都继承了。\",\"查看API文档我们可以看到，在Object类中提供了一个无参构造方法，如下所示：\",\"1576053871503\",\"但是一般情况下我们很少去主动的创建Object类的对象，调用其对应的方法。更多的是创建Object类的某个子类对象，然后通过子类对象调用Object类中的方法。\"]},\"567\":{\"h\":\"4.2 常见方法\",\"t\":[\"tips：重点讲解内容\",\"我们要学习的Object类中的常见方法如下所示：\",\"public String toString() //返回该对象的字符串表示形式(可以看做是对象的内存地址值) public boolean equals(Object obj) //比较两个对象地址值是否相等；true表示相同，false表示不相同 protected Object clone() //对象克隆 \",\"接下来我们就来通过一些案例演示一下这些方法的特点。：演示toString方法\",\"实现步骤：\",\"创建一个学生类，提供两个成员变量（name ， age）；并且提供对应的无参构造方法和有参构造方法以及get/set方法\",\"创建一个测试类（ObjectDemo01），在测试类的main方法中去创建学生对象，然后调用该对象的toString方法获取该对象的字符串表现形式，并将结果进行输出\",\"如下所示：\",\"Student类\",\"public class Student { private String name ; // 姓名 private String age ; // 年龄 // 无参构造方法和有参构造方法以及get和set方法略 ... } \",\"ObjectDemo01测试类\",\"public class ObjectDemo01 { public static void main(String[] args) { // 创建学生对象 Student s1 = new Student(\\\"itheima\\\" , \\\"14\\\") ; // 调用toString方法获取s1对象的字符串表现形式 String result1 = s1.toString(); // 输出结果 System.out.println(\\\"s1对象的字符串表现形式为：\\\" + result1); } } \",\"运行程序进行测试，控制台输出结果如下所示：\",\"s1对象的字符串表现形式为：com.itheima.api.system.demo04.Student@3f3afe78 \",\"为什么控制台输出的结果为：com.itheima.api.system.demo04.Student@3f3afe78； 此时我们可以查看一下Object类中toString方法的源码，如下所示：\",\"public String toString() { // Object类中toString方法的源码定义 return getClass().getName() + \\\"@\\\" + Integer.toHexString(hashCode()); } \",\"其中getClass().getName()对应的结果就是：com.itheima.api.system.demo04.Student；Integer.toHexString(hashCode())对应的结果就是3f3afe78。\",\"我们常常将\\\"com.itheima.api.system.demo04.Student@3f3afe78\\\"这一部分称之为对象的内存地址值。但是一般情况下获取对象的内存地址值没有太大的意义。获取对象的成员变量的字符串拼接形式才\",\"算有意义，怎么实现呢？此时我们就需要在Student类中重写Object的toString方法。我们可以通过idea开发工具进行实现，具体步骤如下所示：\",\"在空白处使用快捷键：alt + insert。此时会弹出如下的对话框\",\"1576055135105\",\"选择toString，此时会弹出如下的对话框\",\"1576055198877\",\"同时选择name和age属性，点击OK。此时就会完成toString方法的重写，代码如下所示：\",\"@Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age='\\\" + age + '\\\\'' + '}'; } \",\"这段代码就是把Student类中的成员变量进行了字符串的拼接。重写完毕以后，再次运行程序，控制台输出结果如下所示：\",\"s1对象的字符串表现形式为：Student{name='itheima', age='14'} \",\"此时我们就可以清楚的查看Student的成员变量值，因此重写toString方法的意义就是以良好的格式，更方便的展示对象中的属性值\",\"我们再来查看一下如下代码的输出：\",\"// 创建学生对象 Student s1 = new Student(\\\"itheima\\\" , \\\"14\\\") ; // 直接输出对象s1 System.out.println(s1); \",\"运行程序进行测试，控制台输出结果如下所示：\",\"Student{name='itheima', age='14'} \",\"我们可以看到和刚才的输出结果是一致的。那么此时也就证明直接输出一个对象，那么会默认调用对象的toString方法，因此如上代码的等同于如下代码：\",\"// 创建学生对象 Student s1 = new Student(\\\"itheima\\\" , \\\"14\\\") ; // 调用s1的toString方法，把结果进行输出 System.out.println(s1.toString()); \",\"因此后期为了方便进行测试，我们常常是通过输出语句直接输出一个对象的名称。\",\"小结：\",\"在通过输出语句输出一个对象时，默认调用的就是toString()方法\",\"输出地址值一般没有意义，我们可以通过重写toString方法去输出对应的成员变量信息（快捷键：atl + insert ， 空白处 右键 -> Generate -> 选择toString）\",\"toString方法的作用：以良好的格式，更方便的展示对象中的属性值\",\"一般情况下Jdk所提供的类都会重写Object类中的toString方法：演示equals方法\",\"实现步骤：\",\"在测试类（ObjectDemo02）的main方法中，创建两个学生对象，然后比较两个对象是否相同\",\"代码如下所示：\",\"public class ObjectDemo02 { public static void main(String[] args) { // 创建两个学生对象 Student s1 = new Student(\\\"itheima\\\" , \\\"14\\\") ; Student s2 = new Student(\\\"itheima\\\" , \\\"14\\\") ; // 比较两个对象是否相等 System.out.println(s1 == s2); } } \",\"运行程序进行测试，控制台的输出结果如下所示：\",\"false \",\"因为\\\"==\\\"号比较的是对象的地址值，而我们通过new关键字创建了两个对象，它们的地址值是不相同的。因此比较结果就是false。\",\"我们尝试调用Object类中的equals方法进行比较，代码如下所示：\",\"// 调用equals方法比较两个对象是否相等 boolean result = s1.equals(s2); // 输出结果 System.out.println(result); \",\"运行程序进行测试，控制台的输出结果为：\",\"false \",\"为什么结果还是false呢？我们可以查看一下Object类中equals方法的源码，如下所示：\",\"public boolean equals(Object obj) { // Object类中的equals方法的源码 return (this == obj); } \",\"通过源码我们可以发现默认情况下equals方法比较的也是对象的地址值。比较内存地址值一般情况下是没有意义的，我们希望比较的是对象的属性，如果两个对象的属性相同，我们认为就是同一个对象；\",\"那么要比较对象的属性，我们就需要在Student类中重写Object类中的equals方法。equals方法的重写，我们也可以使用idea开发工具完成，具体的操作如下所示：\",\"在空白处使用快捷键：alt + insert。此时会弹出如下的对话框\",\"1576056718392\",\"选择equals() and hashCode()方法，此时会弹出如下的对话框\",\"1576057779458\",\"点击next，会弹出如下对话框：\",\"1576057813175\",\"选择neme和age属性点击next，此时就会弹出如下对话框：\",\"1576057892814\",\"取消name和age属性（因为此时选择的是在生成hashCode方法时所涉及到的属性，关于hashCode方法后期再做重点介绍），点击Finish完成生成操作。生成的equals方法和hashCode方法如下：\",\"@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Student student = (Student) o; return Objects.equals(name, student.name) && Objects.equals(age, student.age); // 比较的是对象的name属性值和age属性值 } @Override public int hashCode() { return 0; } \",\"hashCode方法我们暂时使用不到，可以将hashCode方法删除。重写完毕以后运行程序进行测试，控制台输出结果如下所示：\",\"true \",\"此时equals方法比较的是对象的成员变量值，而s1和s2两个对象的成员变量值都是相同的。因此比较完毕以后的结果就是true。\",\"小结：\",\"默认情况下equals方法比较的是对象的地址值\",\"比较对象的地址值是没有意义的，因此一般情况下我们都会重写Object类中的equals方法：对象克隆\",\"​ 把A对象的属性值完全拷贝给B对象，也叫对象拷贝,对象复制\",\"对象克隆的分类：\",\"深克隆和浅克隆\",\"浅克隆：\",\"​ 不管对象内部的属性是基本数据类型还是引用数据类型，都完全拷贝过来\",\"​ 基本数据类型拷贝过来的是具体的数据，引用数据类型拷贝过来的是地址值。\",\"​ Object类默认的是浅克隆\",\"浅克隆\",\"深克隆：\",\"​ 基本数据类型拷贝过来，字符串复用，引用数据类型会重新创建新的\",\"深克隆\",\"代码实现：\",\"package com.itheima.a04objectdemo; public class ObjectDemo4 { public static void main(String[] args) throws CloneNotSupportedException { // protected object clone(int a) 对象克隆 //1.先创建一个对象 int[] data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0}; User u1 = new User(1, \\\"zhangsan\\\", \\\"1234qwer\\\", \\\"girl11\\\", data); //2.克隆对象 //细节: //方法在底层会帮我们创建一个对象,并把原对象中的数据拷贝过去。 //书写细节: //1.重写Object中的clone方法 //2.让javabean类实现Cloneable接口 //3.创建原对象并调用clone就可以了 //User u2 =(User)u1.clone(); //验证一件事情：Object中的克隆是浅克隆 //想要进行深克隆，就需要重写clone方法并修改里面的方法体 //int[] arr = u1.getData(); //arr[0] = 100; //System.out.println(u1); //System.out.println(u2); //以后一般会用第三方工具进行克隆 //1.第三方写的代码导入到项目中 //2.编写代码 //Gson gson =new Gson(); //把对象变成一个字符串 //String s=gson.toJson(u1); //再把字符串变回对象就可以了 //User user =gson.fromJson(s, User.class); //int[] arr=u1.getData(); //arr[0] = 100; //打印对象 //System.out.println(user); } } package com.itheima.a04objectdemo; import java.util.StringJoiner; //Cloneable //如果一个接口里面没有抽象方法 //表示当前的接口是一个标记性接口 //现在Cloneable表示一旦实现了，那么当前类的对象就可以被克降 //如果没有实现，当前类的对象就不能克隆 public class User implements Cloneable { private int id; private String username; private String password; private String path; private int[] data; public User() { } public User(int id, String username, String password, String path, int[] data) { this.id = id; this.username = username; this.password = password; this.path = path; this.data = data; } /** * 获取 * * @return id */ public int getId() { return id; } /** * 设置 * * @param id */ public void setId(int id) { this.id = id; } /** * 获取 * * @return username */ public String getUsername() { return username; } /** * 设置 * * @param username */ public void setUsername(String username) { this.username = username; } /** * 获取 * * @return password */ public String getPassword() { return password; } /** * 设置 * * @param password */ public void setPassword(String password) { this.password = password; } /** * 获取 * * @return path */ public String getPath() { return path; } /** * 设置 * * @param path */ public void setPath(String path) { this.path = path; } /** * 获取 * * @return data */ public int[] getData() { return data; } /** * 设置 * * @param data */ public void setData(int[] data) { this.data = data; } public String toString() { return \\\"角色编号为：\\\" + id + \\\"，用户名为：\\\" + username + \\\"密码为：\\\" + password + \\\", 游戏图片为:\\\" + path + \\\", 进度:\\\" + arrToString(); } public String arrToString() { StringJoiner sj = new StringJoiner(\\\", \\\", \\\"[\\\", \\\"]\\\"); for (int i = 0; i < data.length; i++) { sj.add(data[i] + \\\"\\\"); } return sj.toString(); } @Override protected Object clone() throws CloneNotSupportedException { //调用父类中的clone方法 //相当于让Java帮我们克隆一个对象，并把克隆之后的对象返回出去。 //先把被克隆对象中的数组获取出来 int[] data = this.data; //创建新的数组 int[] newData =new int[data.length]; //拷贝数组中的数据 for (int i = 0; i < data.length; i++) { newData[i] = data[i]; } //调用父类中的方法克隆对象 User u=(User)super.clone(); //因为父类中的克隆方法是浅克隆，替换克隆出来对象中的数组地址值 u.data =newData; return u; } } \"]},\"568\":{\"h\":\"5.1 概述\",\"t\":[\"tips：了解内容\",\"查看API文档，我们可以看到API文档中关于Objects类的定义如下：\",\"1576058492444\",\"Objects类所在包是在java.util包下，因此在使用的时候需要进行导包。并且Objects类是被final修饰的，因此该类不能被继承。\",\"Objects类提供了一些对象常见操作的方法。比如判断对象是否相等，判断对象是否为null等等。\",\"接下来我们来查看一下API文档，看一下Objects类中的成员，如下所示：\",\"1576058659628\",\"我们可以发现Objects类中无无参构造方法，因此我们不能使用new关键字去创建Objects的对象。同时我们可以发现Objects类中所提供的方法都是静态的。因此我们可以通过类名直接去调用这些方法。\"]},\"569\":{\"h\":\"5.2 常见方法\",\"t\":[\"tips：重点讲解内容\",\"我们要重点学习的Objects类中的常见方法如下所示：\",\"public static String toString(Object o) // 获取对象的字符串表现形式 public static boolean equals(Object a, Object b) // 比较两个对象是否相等 public static boolean isNull(Object obj) // 判断对象是否为null public static boolean nonNull(Object obj) // 判断对象是否不为null \",\"我们要了解的Objects类中的常见方法如下所示：\",\"public static <T> T requireNonNull(T obj) // 检查对象是否不为null,如果为null直接抛出异常；如果不是null返回该对象； public static <T> T requireNonNullElse(T obj, T defaultObj) // 检查对象是否不为null，如果不为null，返回该对象；如果为null返回defaultObj值 public static <T> T requireNonNullElseGet(T obj, Supplier<? extends T> supplier) // 检查对象是否不为null，如果不为null，返回该对象；如果 // 为null,返回由Supplier所提供的值 \",\"上述方法中的T可以理解为是Object类型。\",\"接下来我们就来通过一些案例演示一下Objects类中的这些方法特点。：演示重点学习方法\",\"实现步骤：\",\"创建一个学生类，提供两个成员变量（name ， age）；并且提供对应的无参构造方法和有参构造方法以及get/set方法，并且重写toString方法和equals方法\",\"创建一个测试类（ObjectsDemo01）, 在该类中编写测试代码\",\"如下所示：\",\"Student类\",\"public class Student { private String name ; // 姓名 private String age ; // 年龄 // 其他代码略 ... } \",\"ObjectsDemo01测试类\",\"public class ObjectsDemo01 { public static void main(String[] args) { // 调用方法 method_04() ; } // 测试nonNull方法 public static void method_04() { // 创建一个学生对象 Student s1 = new Student(\\\"itheima\\\" , \\\"14\\\") ; // 调用Objects类中的nonNull方法 boolean result = Objects.nonNull(s1); // 输出结果 System.out.println(result); } // 测试isNull方法 public static void method_03() { // 创建一个学生对象 Student s1 = new Student(\\\"itheima\\\" , \\\"14\\\") ; // 调用Objects类中的isNull方法 boolean result = Objects.isNull(s1); // 输出结果 System.out.println(result); } // 测试equals方法 public static void method_02() { // 创建两个学生对象 Student s1 = new Student(\\\"itheima\\\" , \\\"14\\\") ; Student s2 = new Student(\\\"itheima\\\" , \\\"14\\\") ; // 调用Objects类中的equals方法，比较两个对象是否相等 boolean result = Objects.equals(s1, s2); // 如果Student没有重写Object类中的equals方法，此处比较的还是对象的地址值 // 输出结果 System.out.println(result); } // 测试toString方法 public static void method_01() { // 创建一个学生对象 Student s1 = new Student(\\\"itheima\\\" , \\\"14\\\") ; // 调用Objects中的toString方法,获取s1对象的字符串表现形式 String result = Objects.toString(s1); // 如果Student没有重写Object类中的toString方法，此处还是返回的对象的地址值 // 输出结果 System.out.println(result); } } \",\"：演示需要了解的方法\",\"public class ObjectsDemo02 { public static void main(String[] args) { // 调用方法 method_03(); } // 演示requireNonNullElseGet public static void method_03() { // 创建一个学生对象 Student s1 = new Student(\\\"itheima\\\" , \\\"14\\\") ; // 调用Objects对象的requireNonNullElseGet方法,该方法的第二个参数是Supplier类型的，查看源码我们发现Supplier是一个函数式接口, // 那么我们就可以为其传递一个Lambda表达式，而在Supplier接口中所定义的方法是无参有返回值的方法，因此具体调用所传入的Lambda表达式如下所示 Student student = Objects.requireNonNullElseGet(s1, () -> { return new Student(\\\"itcast\\\", \\\"14\\\"); }); // 输出 System.out.println(student); } // 演示requireNonNullElse public static void method_02() { // 创建一个学生对象 Student s1 = new Student(\\\"itheima\\\" , \\\"14\\\") ; // 调用Objects对象的requireNonNullElse方法 Student student = Objects.requireNonNullElse(s1, new Student(\\\"itcast\\\", \\\"14\\\")); // 输出 System.out.println(student); } // 演示requireNonNull public static void method_01() { // 创建一个学生对象 Student s1 = new Student(\\\"itheima\\\" , \\\"14\\\") ; // 调用Objects对象的requireNonNull方法 Student student = Objects.requireNonNull(s1); // 输出 System.out.println(student); } } \",\"注：了解性的方法可以可以作为扩展视频进行下发。\"]},\"570\":{\"h\":\"6.1 引入\",\"t\":[\"​ 平时在存储整数的时候，Java中默认是int类型，int类型有取值范围：-2147483648 ~ 2147483647。如果数字过大，我们可以使用long类型，但是如果long类型也表示不下怎么办呢？\",\"​ 就需要用到BigInteger，可以理解为：大的整数。\",\"​ 有多大呢？理论上最大到42亿的21亿次方\",\"​ 基本上在内存撑爆之前，都无法达到这个上限。\"]},\"571\":{\"h\":\"6.2 概述\",\"t\":[\"查看API文档，我们可以看到API文档中关于BigInteger类的定义如下：\",\"Snipaste_2022-09-04_21-36-01\",\"BigInteger所在包是在java.math包下，因此在使用的时候就需要进行导包。我们可以使用BigInteger类进行大整数的计算\"]},\"572\":{\"h\":\"6.3 常见方法\",\"t\":[\"public BigInteger(int num, Random rnd) //获取随机大整数，范围：[0 ~ 2的num次方-1] public BigInteger(String val) //获取指定的大整数 public BigInteger(String val, int radix) //获取指定进制的大整数 下面这个不是构造，而是一个静态方法获取BigInteger对象 public static BigInteger valueOf(long val) //静态方法获取BigInteger的对象，内部有优化 \",\"构造方法小结：\",\"如果BigInteger表示的数字没有超出long的范围，可以用静态方法获取。\",\"如果BigInteger表示的超出long的范围，可以用构造方法获取。\",\"对象一旦创建，BigInteger内部记录的值不能发生改变。\",\"只要进行计算都会产生一个新的BigInteger对象\",\"BigDecimal类中使用最多的还是提供的进行四则运算的方法，如下：\",\"public BigInteger add(BigInteger val) //加法 public BigInteger subtract(BigInteger val) //减法 public BigInteger multiply(BigInteger val) //乘法 public BigInteger divide(BigInteger val) //除法 public BigInteger[] divideAndRemainder(BigInteger val) //除法，获取商和余数 public boolean equals(Object x) //比较是否相同 public BigInteger pow(int exponent) //次幂、次方 public BigInteger max/min(BigInteger val) //返回较大值/较小值 public int intValue(BigInteger val) //转为int类型整数，超出范围数据有误 \",\"代码实现：\",\"package com.itheima.a06bigintegerdemo; import java.math.BigInteger; public class BigIntegerDemo1 { public static void main(String[] args) { /* public BigInteger(int num, Random rnd) 获取随机大整数，范围:[0~ 2的num次方-11 public BigInteger(String val) 获取指定的大整数 public BigInteger(String val, int radix) 获取指定进制的大整数 public static BigInteger valueOf(long val) 静态方法获取BigInteger的对象，内部有优化 细节: 对象一旦创建里面的数据不能发生改变。 */ //1.获取一个随机的大整数 /* Random r=new Random(); for (int i = e; i < 100; i++) { BigInteger bd1 = new BigInteger(4,r); System.out.println(bd1);//[@ ~ 15]} } */ //2.获取一个指定的大整数，可以超出long的取值范围 //细节:字符串中必须是整数，否则会报错 /* BigInteger bd2 = new BigInteger(\\\"1.1\\\"); System.out.println(bd2); */ /* BigInteger bd3 = new BigInteger(\\\"abc\\\"); System.out.println(bd3); */ //3.获取指定进制的大整数 //细节: //1.字符串中的数字必须是整数 //2.字符串中的数字必须要跟进制吻合。 //比如二进制中，那么只能写日和1，写其他的就报错。 BigInteger bd4 = new BigInteger(\\\"123\\\", 2); System.out.println(bd4); //4.静态方法获取BigInteger的对象，内部有优化 //细节: //1.能表示范围比较小，只能在long的取值范围之内，如果超出long的范围就不行了。 //2.在内部对常用的数字: -16 ~ 16 进行了优化。 // 提前把-16~16 先创建好BigInteger的对象，如果多次获取不会重新创建新的。 BigInteger bd5 = BigInteger.valueOf(16); BigInteger bd6 = BigInteger.valueOf(16); System.out.println(bd5 == bd6);//true BigInteger bd7 = BigInteger.valueOf(17); BigInteger bd8 = BigInteger.valueOf(17); System.out.println(bd7 == bd8);//false //5.对象一旦创建内部的数据不能发生改变 BigInteger bd9 =BigInteger.valueOf(1); BigInteger bd10 =BigInteger.valueOf(2); //此时，不会修改参与计算的BigInteger对象中的借，而是产生了一个新的BigInteger对象记录 BigInteger result=bd9.add(bd10); System.out.println(result);//3 } } \",\"package com.itheima.a06bigintegerdemo; import java.math.BigInteger; public class BigIntegerDemo2 { public static void main(String[] args) { /* public BigInteger add(BigInteger val) 加法 public BigInteger subtract(BigInteger val) 减法 public BigInteger multiply(BigInteger val) 乘法 public BigInteger divide(BigInteger val) 除法，获取商 public BigInteger[] divideAndRemainder(BigInteger val) 除法，获取商和余数 public boolean equals(Object x) 比较是否相同 public BigInteger pow(int exponent) 次幂 public BigInteger max/min(BigInteger val) 返回较大值/较小值 public int intValue(BigInteger val) 转为int类型整数，超出范围数据有误 */ //1.创建两个BigInteger对象 BigInteger bd1 = BigInteger.valueOf(10); BigInteger bd2 = BigInteger.valueOf(5); //2.加法 BigInteger bd3 = bd1.add(bd2); System.out.println(bd3); //3.除法，获取商和余数 BigInteger[] arr = bd1.divideAndRemainder(bd2); System.out.println(arr[0]); System.out.println(arr[1]); //4.比较是否相同 boolean result = bd1.equals(bd2); System.out.println(result); //5.次幂 BigInteger bd4 = bd1.pow(2); System.out.println(bd4); //6.max BigInteger bd5 = bd1.max(bd2); //7.转为int类型整数，超出范围数据有误 /* BigInteger bd6 = BigInteger.valueOf(2147483647L); int i = bd6.intValue(); System.out.println(i); */ BigInteger bd6 = BigInteger.valueOf(200); double v = bd6.doubleValue(); System.out.println(v);//200.0 } } \"]},\"573\":{\"h\":\"6.4 底层存储方式：\",\"t\":[\"对于计算机而言，其实是没有数据类型的概念的，都是0101010101，数据类型是编程语言自己规定的，所以在实际存储的时候，先把具体的数字变成二进制，每32个bit为一组，存储在数组中。\",\"数组中最多能存储元素个数：21亿多\",\"数组中每一位能表示的数字：42亿多\",\"理论上，BigInteger能表示的最大数字为：42亿的21亿次方。\",\"但是还没到这个数字，电脑的内存就会撑爆，所以一般认为BigInteger是无限的。\",\"存储方式如图所示：\",\"bigInteger的底层原理\"]},\"574\":{\"h\":\"7.1 引入\",\"t\":[\"首先我们来分析一下如下程序的执行结果：\",\"public class BigDecimalDemo01 { public static void main(String[] args) { System.out.println(0.09 + 0.01); } } \",\"这段代码比较简单，就是计算0.09和0.01之和，并且将其结果在控制台进行输出。那么按照我们的想法在控制台输出的结果应该为0.1。那么实际的运行结果是什么呢？我们来运行一下程序，控制台的输出\",\"结果如下所示：\",\"0.09999999999999999 \",\"这样的结果其实就是一个丢失精度的结果。为什么会产生精度丢失呢？\",\"在使用float或者double类型的数据在进行数学运算的时候，很有可能会产生精度丢失问题。我们都知道计算机底层在进行运算的时候，使用的都是二进制数据； 当我们在程序中写了一个十进制数据 ，在\",\"进行运算的时候，计算机会将这个十进制数据转换成二进制数据，然后再进行运算，计算完毕以后计算机会把运算的结果再转换成十进制数据给我们展示； 如果我们使用的是整数类型的数据进行计算，那\",\"么在把十进制数据转换成二进制数据的时候不会存在精度问题； 如果我们的数据是一个浮点类型的数据，有的时候计算机并不会将这个数据完全转换成一个二进制数据，而是将这个将其转换成一个无限的\",\"趋近于这个十进数的二进制数据； 这样使用一个不太准确的数据进行运算的时候， 最终就会造成精度丢失；为了提高精度，Java就给我们提供了BigDecimal供我们进行数据运算。\"]},\"575\":{\"h\":\"7.2 概述\",\"t\":[\"查看API文档，我们可以看到API文档中关于BigDecimal类的定义如下：\",\"1576132679789\",\"BigDecimal所在包是在java.math包下，因此在使用的时候就需要进行导包。我们可以使用BigDecimal类进行更加精准的数据计算。\"]},\"576\":{\"h\":\"7.3 常见方法\",\"t\":[\"要用BigDecimal类，那么就需要首先学习一下如何去创建BigDecimal的对象。通过查看API文档，我们可以发现Jdk中针对BigDecimal类提供了很多的构造方法，但是最常用的构造方法是：\",\"1576134383441\",\"了解完常见的构造方法以后，我们接下来就重点介绍一下常见的成员方法。\",\"BigDecimal类中使用最多的还是提供的进行四则运算的方法，如下：\",\"public BigDecimal add(BigDecimal value) // 加法运算 public BigDecimal subtract(BigDecimal value) // 减法运算 public BigDecimal multiply(BigDecimal value) // 乘法运算 public BigDecimal divide(BigDecimal value) // 触发运算 \",\"接下来我们就来通过一些案例演示一下这些成员方法的使用。：演示基本的四则运算\",\"代码如下所示：\",\"public class BigDecimalDemo01 { public static void main(String[] args) { // 创建两个BigDecimal对象 BigDecimal b1 = new BigDecimal(\\\"0.3\\\") ; BigDecimal b2 = new BigDecimal(\\\"4\\\") ; // 调用方法进行b1和b2的四则运算，并将其运算结果在控制台进行输出 System.out.println(b1.add(b2)); // 进行加法运算 System.out.println(b1.subtract(b2)); // 进行减法运算 System.out.println(b1.multiply(b2)); // 进行乘法运算 System.out.println(b1.divide(b2)); // 进行除法运算 } } \",\"运行程序进行测试，控制台输出结果如下：\",\"4.3 -3.7 1.2 0.075 \",\"此时我们可以看到使用BigDecimal类来完成浮点数的计算不会存在损失精度的问题。：演示除法的特殊情况\",\"如果使用BigDecimal类型的数据进行除法运算的时候，得到的结果是一个无限循环小数，那么就会报错：ArithmeticException。 如下代码所示：\",\"public class BigDecimalDemo02 { public static void main(String[] args) { // 创建两个BigDecimal对象 BigDecimal b1 = new BigDecimal(\\\"1\\\") ; BigDecimal b2 = new BigDecimal(\\\"3\\\") ; // 调用方法进行b1和b2的除法运算，并且将计算结果在控制台进行输出 System.out.println(b1.divide(b2)); } } \",\"运行程序进行测试，控制台输出结果如下所示：\",\"Exception in thread \\\"main\\\" java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result. at java.base/java.math.BigDecimal.divide(BigDecimal.java:1716) at com.itheima.api.bigdecimal.demo02.BigDecimalDemo02.main(BigDecimalDemo02.java:14) \",\"针对这个问题怎么解决，此时我们就需要使用到BigDecimal类中另外一个divide方法，如下所示：\",\"BigDecimal divide(BigDecimal divisor, int scale, int roundingMode) \",\"上述divide方法参数说明：\",\"divisor: 除数对应的BigDecimal对象； scale: 精确的位数； roundingMode: 取舍模式； 取舍模式被封装到了RoundingMode这个枚举类中（关于枚举我们后期再做重点讲解），在这个枚举类中定义了很多种取舍方式。最常见的取舍方式有如下几个： UP(直接进1) ， FLOOR(直接删除) ， HALF_UP(4舍五入),我们可以通过如下格式直接访问这些取舍模式：枚举类名.变量名 \",\"接下来我们就来演示一下这些取舍模式，代码如下所示：\",\"public class BigDecimalDemo02 { public static void main(String[] args) { // 调用方法 method_03() ; } // 演示取舍模式HALF_UP public static void method_03() { // 创建两个BigDecimal对象 BigDecimal b1 = new BigDecimal(\\\"0.3\\\") ; BigDecimal b2 = new BigDecimal(\\\"4\\\") ; // 调用方法进行b1和b2的除法运算，并且将计算结果在控制台进行输出 System.out.println(b1.divide(b2 , 2 , RoundingMode.HALF_UP)); } // 演示取舍模式FLOOR public static void method_02() { // 创建两个BigDecimal对象 BigDecimal b1 = new BigDecimal(\\\"1\\\") ; BigDecimal b2 = new BigDecimal(\\\"3\\\") ; // 调用方法进行b1和b2的除法运算，并且将计算结果在控制台进行输出 System.out.println(b1.divide(b2 , 2 , RoundingMode.FLOOR)); } // 演示取舍模式UP public static void method_01() { // 创建两个BigDecimal对象 BigDecimal b1 = new BigDecimal(\\\"1\\\") ; BigDecimal b2 = new BigDecimal(\\\"3\\\") ; // 调用方法进行b1和b2的除法运算，并且将计算结果在控制台进行输出 System.out.println(b1.divide(b2 , 2 , RoundingMode.UP)); } } \",\"小结：后期在进行两个数的除法运算的时候，我们常常使用的是可以设置取舍模式的divide方法。\"]},\"577\":{\"h\":\"7.4 底层存储方式：\",\"t\":[\"把数据看成字符串，遍历得到里面的每一个字符，把这些字符在ASCII码表上的值，都存储到数组中。\",\"bigdecimal存储原理\"]},\"578\":{\"h\":\"苹果 1\"},\"579\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"580\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"581\":{\"c\":[\"苹果\"]},\"582\":{\"c\":[\"红\",\"大\",\"圆\"]},\"583\":{\"h\":\"苹果 2\",\"t\":[\"一个被星标了的苹果文章。\"]},\"584\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"585\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"586\":{\"c\":[\"苹果\"]},\"587\":{\"c\":[\"红\",\"大\",\"圆\"]},\"588\":{\"h\":\"苹果 3\"},\"589\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"590\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"591\":{\"c\":[\"苹果\",\"水果\"]},\"592\":{\"c\":[\"红\",\"大\",\"圆\"]},\"593\":{\"h\":\"苹果 4\"},\"594\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"595\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"596\":{\"c\":[\"苹果\",\"水果\"]},\"597\":{\"c\":[\"红\",\"大\",\"圆\"]},\"598\":{\"h\":\"香蕉 1\"},\"599\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"600\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"601\":{\"c\":[\"香蕉\",\"水果\"]},\"602\":{\"c\":[\"黄\",\"弯曲的\",\"长\"]},\"603\":{\"h\":\"香蕉 2\",\"t\":[\"一个被数字 10 星标了的香蕉文章。\"]},\"604\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"605\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"606\":{\"c\":[\"香蕉\",\"水果\"]},\"607\":{\"c\":[\"黄\",\"弯曲的\",\"长\"]},\"608\":{\"h\":\"香蕉 3\"},\"609\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"610\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"611\":{\"c\":[\"香蕉\"]},\"612\":{\"c\":[\"黄\",\"弯曲的\",\"长\"]},\"613\":{\"h\":\"香蕉 4\"},\"614\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"615\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"616\":{\"c\":[\"香蕉\"]},\"617\":{\"c\":[\"黄\",\"弯曲的\",\"长\"]},\"618\":{\"h\":\"develop\"},\"619\":{\"h\":\"other\"},\"620\":{\"h\":\"MyBatisPlus\"},\"621\":{\"h\":\"MyBatis\"},\"622\":{\"h\":\"Spring\"},\"623\":{\"h\":\"SpringMVC\"},\"624\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"625\":{\"h\":\"Posts\"},\"626\":{\"h\":\"Java SE\"},\"627\":{\"h\":\"Java Web\"},\"628\":{\"h\":\"Database\"},\"629\":{\"h\":\"Apple\"},\"630\":{\"h\":\"Banana\"},\"631\":{\"h\":\"Develop\"},\"632\":{\"h\":\"Toolbox\"},\"633\":{\"h\":\"Other\"},\"634\":{\"h\":\"Framework\"}},\"dirtCount\":0,\"index\":[[\"星标了的香蕉文章\",{\"1\":{\"603\":1}}],[\"长\",{\"2\":{\"602\":1,\"607\":1,\"612\":1,\"617\":1}}],[\"长度可以变化\",{\"1\":{\"390\":1}}],[\"长度可变\",{\"1\":{\"389\":1}}],[\"长度\",{\"1\":{\"364\":1}}],[\"长度不能发生变化\",{\"1\":{\"276\":1}}],[\"弯曲的\",{\"2\":{\"602\":1,\"607\":1,\"612\":1,\"617\":1}}],[\"黄\",{\"2\":{\"602\":1,\"607\":1,\"612\":1,\"617\":1}}],[\"黄色\",{\"1\":{\"466\":1}}],[\"香蕉\",{\"0\":{\"598\":1,\"603\":1,\"608\":1,\"613\":1},\"2\":{\"601\":1,\"606\":1,\"611\":1,\"616\":1}}],[\"苹果\",{\"0\":{\"578\":1,\"583\":1,\"588\":1,\"593\":1},\"2\":{\"581\":1,\"586\":1,\"591\":1,\"596\":1}}],[\"枚举类名\",{\"1\":{\"576\":1}}],[\"精确的位数\",{\"1\":{\"576\":1}}],[\"除数对应的bigdecimal对象\",{\"1\":{\"576\":1}}],[\"除法\",{\"1\":{\"572\":5}}],[\"除法的运算规则也是一样的\",{\"1\":{\"182\":1}}],[\"触发运算\",{\"1\":{\"576\":1}}],[\"趋近于这个十进数的二进制数据\",{\"1\":{\"574\":1}}],[\"么在把十进制数据转换成二进制数据的时候不会存在精度问题\",{\"1\":{\"574\":1}}],[\"那\",{\"1\":{\"574\":1}}],[\"那么实际的运行结果是什么呢\",{\"1\":{\"574\":1}}],[\"那么按照我们的想法在控制台输出的结果应该为0\",{\"1\":{\"574\":1}}],[\"那么只能写日和1\",{\"1\":{\"572\":1}}],[\"那么我们就可以为其传递一个lambda表达式\",{\"1\":{\"569\":1}}],[\"那么我们再判断密码是否正确\",{\"1\":{\"200\":1}}],[\"那么当前类的对象就可以被克降\",{\"1\":{\"567\":1}}],[\"那么当前数字就是平方根\",{\"1\":{\"265\":1}}],[\"那么要比较对象的属性\",{\"1\":{\"567\":1}}],[\"那么会默认调用对象的tostring方法\",{\"1\":{\"567\":1}}],[\"那么此时也就证明直接输出一个对象\",{\"1\":{\"567\":1}}],[\"那么子类类型可以赋值给父类类型\",{\"1\":{\"562\":2}}],[\"那么两者的类型必须保持一致\",{\"1\":{\"562\":2}}],[\"那么创建对象就需要借助于构造方法\",{\"1\":{\"556\":1,\"561\":1}}],[\"那么创建对象后\",{\"1\":{\"511\":1}}],[\"那么java为什么需要这样子去设计\",{\"1\":{\"547\":1}}],[\"那么能不能简化一下\",{\"1\":{\"542\":1}}],[\"那么什么是接口呢\",{\"1\":{\"513\":1}}],[\"那么该类必须是抽象类\",{\"1\":{\"508\":1}}],[\"那么父类的方法声明和方法主体\",{\"1\":{\"505\":1}}],[\"那么应该怎么去调用父类的构造方法\",{\"1\":{\"471\":1}}],[\"那么如何访问父类的私有成员变量呢\",{\"1\":{\"443\":1}}],[\"那么如何解决呢\",{\"1\":{\"428\":1}}],[\"那么多个类无需再定义这些属性和行为\",{\"1\":{\"428\":1}}],[\"那么money记录的就是0\",{\"1\":{\"376\":1}}],[\"那么不需要拼接逗号空格\",{\"1\":{\"370\":1}}],[\"那么也要写出来\",{\"1\":{\"346\":1}}],[\"那么必须返回\",{\"1\":{\"310\":1}}],[\"那么数组中所有的数据已经打乱顺序了\",{\"1\":{\"296\":1}}],[\"那么数组中的数据就实现了头尾交换\",{\"1\":{\"295\":1}}],[\"那么数据类型就需要写小数类型\",{\"1\":{\"110\":1}}],[\"那么数据类型就需要写整数类型\",{\"1\":{\"110\":1}}],[\"那么第一次循环的时候是自己跟自己比了一下\",{\"1\":{\"293\":1}}],[\"那么boolean\",{\"1\":{\"269\":1}}],[\"那么这三个类中就存在大量重复的信息\",{\"1\":{\"428\":1}}],[\"那么这些学生类的对象的学校属性应该都是\",{\"1\":{\"420\":1}}],[\"那么这些命令只可以在bin目录下使用\",{\"1\":{\"82\":1}}],[\"那么这个数就是质数\",{\"1\":{\"266\":1}}],[\"那么前一个数字就是平方跟的整数部分\",{\"1\":{\"265\":1}}],[\"那么继续往后判断\",{\"1\":{\"265\":1}}],[\"那么需要写100个case\",{\"1\":{\"237\":1}}],[\"那么打印坐右边\",{\"1\":{\"230\":1}}],[\"那么打印坐左边\",{\"1\":{\"230\":1}}],[\"那么if只能控制距离他最近的那一条语句\",{\"1\":{\"227\":1}}],[\"那么大括号可以省略不写\",{\"1\":{\"227\":1}}],[\"那么执行表达式2\",{\"1\":{\"204\":1}}],[\"那么执行表达式1\",{\"1\":{\"204\":1}}],[\"那么右边就不执行了\",{\"1\":{\"200\":1}}],[\"那么右边就不会执行了\",{\"1\":{\"199\":1}}],[\"那么才会验证密码是否输入正确\",{\"1\":{\"200\":1}}],[\"那么才能成功登录\",{\"1\":{\"195\":1}}],[\"那么左边和右边不管什么情况下\",{\"1\":{\"200\":1}}],[\"那么现在还有必要去比较密码吗\",{\"1\":{\"200\":1}}],[\"那么结果就是真\",{\"1\":{\"194\":2}}],[\"那么结果就是假\",{\"1\":{\"194\":1}}],[\"那么相加之后因该还是int类型\",{\"1\":{\"191\":1}}],[\"那么最终的结果就是double类型的\",{\"1\":{\"175\":1}}],[\"那么最终的result是long类型的\",{\"1\":{\"174\":1}}],[\"那么证明a是一个奇数\",{\"1\":{\"166\":1}}],[\"那么证明a是一个偶数\",{\"1\":{\"166\":1}}],[\"那么每一个单词首字母都需要大写\",{\"1\":{\"128\":1}}],[\"那么首字母大写\",{\"1\":{\"128\":1}}],[\"那么从第二个单词开始\",{\"1\":{\"127\":1}}],[\"那么全部小写\",{\"1\":{\"127\":1}}],[\"那么在数据值的后面需要加上f后缀\",{\"1\":{\"120\":1}}],[\"那么在数据值的后面需要加上l后缀\",{\"1\":{\"120\":1}}],[\"那么使用boolean\",{\"1\":{\"118\":1}}],[\"那么使用char\",{\"1\":{\"118\":1}}],[\"那么默认使用double类型\",{\"1\":{\"118\":1}}],[\"那么默认使用int类型\",{\"1\":{\"118\":1}}],[\"那么就会报错\",{\"1\":{\"576\":1}}],[\"那么就需要首先学习一下如何去创建bigdecimal的对象\",{\"1\":{\"576\":1}}],[\"那么就需要遍历数组\",{\"1\":{\"370\":1}}],[\"那么就表示今天的知识点就ok了\",{\"1\":{\"346\":1}}],[\"那么就不会再去验证密码是否正确\",{\"1\":{\"200\":1}}],[\"那么就在小括号中写什么类型就可以了\",{\"1\":{\"179\":1}}],[\"那么就发给第三个玩家\",{\"1\":{\"166\":1}}],[\"那么就发给第二个玩家\",{\"1\":{\"166\":1}}],[\"那么就是小数类型的字面量\",{\"1\":{\"106\":1}}],[\"那么就可以使用注释\",{\"1\":{\"100\":1}}],[\"那么就可以通过java语言告诉计算机就可以了\",{\"1\":{\"65\":1}}],[\"那么就可以把这个软件的路径配置到环境变量中的path里面\",{\"1\":{\"63\":1}}],[\"那么可以使用多行注释\",{\"1\":{\"100\":1}}],[\"那么用8就无法运行了\",{\"1\":{\"90\":1}}],[\"那么用8是可以运行的\",{\"1\":{\"90\":1}}],[\"电脑的内存就会撑爆\",{\"1\":{\"573\":1}}],[\"电影院选座也会使用到if判断\",{\"1\":{\"230\":1}}],[\"电影名称\",{\"1\":{\"122\":1}}],[\"底层存储方式\",{\"0\":{\"573\":1,\"577\":1}}],[\"超出范围数据有误\",{\"1\":{\"572\":3}}],[\"超类\",{\"1\":{\"428\":1,\"431\":1}}],[\"较小值\",{\"1\":{\"572\":2}}],[\"次方\",{\"1\":{\"572\":1}}],[\"次幂\",{\"1\":{\"572\":3}}],[\"次机会\",{\"1\":{\"361\":1}}],[\"减法运算\",{\"1\":{\"576\":1}}],[\"减法\",{\"1\":{\"572\":2}}],[\"减少代码冗余\",{\"1\":{\"430\":1,\"472\":1}}],[\"减少一次循环的次数\",{\"1\":{\"293\":1}}],[\"理论上\",{\"1\":{\"573\":1}}],[\"理论上最大到42亿的21亿次方\",{\"1\":{\"570\":1}}],[\"理解\",{\"1\":{\"511\":5}}],[\"理解图解如下\",{\"1\":{\"462\":1}}],[\"检查对象是否不为null\",{\"1\":{\"569\":3}}],[\"角色编号为\",{\"1\":{\"567\":1}}],[\"验证一件事情\",{\"1\":{\"567\":1}}],[\"验证答案\",{\"1\":{\"294\":1}}],[\"克隆对象\",{\"1\":{\"567\":1}}],[\"深克隆\",{\"1\":{\"567\":2}}],[\"深克隆和浅克隆\",{\"1\":{\"567\":1}}],[\"浅克隆\",{\"1\":{\"567\":2}}],[\"号比较的是对象的地址值\",{\"1\":{\"567\":1}}],[\"怎么实现呢\",{\"1\":{\"567\":1}}],[\"怎么解决这个问题呢\",{\"1\":{\"459\":1}}],[\"弹框不关闭永远无法操作下面的界面\",{\"1\":{\"565\":1}}],[\"居中\",{\"1\":{\"565\":1}}],[\"置顶\",{\"1\":{\"565\":1}}],[\"微软雅黑\",{\"1\":{\"565\":1}}],[\"饶了我吧\",{\"1\":{\"565\":1}}],[\"帅爆了\",{\"1\":{\"565\":1}}],[\"yesbut\",{\"1\":{\"565\":5}}],[\"year\",{\"1\":{\"122\":2,\"379\":2}}],[\"界面中间有一个提示文本和三个按钮\",{\"1\":{\"565\":1}}],[\"界面上方按钮默认隐藏\",{\"1\":{\"565\":1}}],[\"恶搞好基友\",{\"0\":{\"565\":1},\"1\":{\"565\":2}}],[\"剩余内存大小\",{\"1\":{\"564\":1}}],[\"获得cpu的线程数\",{\"1\":{\"564\":3}}],[\"获取商\",{\"1\":{\"572\":1}}],[\"获取商和余数\",{\"1\":{\"572\":3}}],[\"获取一个指定的大整数\",{\"1\":{\"572\":1}}],[\"获取一个随机的大整数\",{\"1\":{\"572\":1}}],[\"获取指定进制的大整数\",{\"1\":{\"572\":3}}],[\"获取指定的大整数\",{\"1\":{\"572\":2}}],[\"获取指定索引上对应的元素\",{\"1\":{\"283\":1}}],[\"获取随机大整数\",{\"1\":{\"572\":2}}],[\"获取s1对象的字符串表现形式\",{\"1\":{\"569\":1}}],[\"获取对象的字符串表现形式\",{\"1\":{\"569\":1}}],[\"获取对象的成员变量的字符串拼接形式才\",{\"1\":{\"567\":1}}],[\"获取runtime的对象\",{\"1\":{\"564\":1}}],[\"获取\",{\"1\":{\"562\":2,\"567\":5}}],[\"获取程序运行的总时间\",{\"1\":{\"562\":1}}],[\"获取到当前时间的毫秒值的意义\",{\"1\":{\"562\":1}}],[\"获取到的0\",{\"1\":{\"557\":2}}],[\"获取当前时间所对应的毫秒值\",{\"1\":{\"562\":2}}],[\"获取两个int值中的较小值\",{\"1\":{\"557\":1}}],[\"获取两个int值中的较大值\",{\"1\":{\"557\":1}}],[\"获取两只老虎的体重\",{\"1\":{\"206\":1}}],[\"获取成员内部类对象的两种方式\",{\"1\":{\"533\":1}}],[\"获取长度\",{\"1\":{\"381\":1}}],[\"获取性别\",{\"1\":{\"379\":1}}],[\"获取出生年月日\",{\"1\":{\"379\":1}}],[\"获取的就是1索引上的元素\",{\"1\":{\"370\":1}}],[\"获取的就是0索引上的元素\",{\"1\":{\"370\":1}}],[\"获取属性的值并打印\",{\"1\":{\"346\":1}}],[\"获取number在arr中的位置\",{\"1\":{\"320\":1}}],[\"获取索引\",{\"0\":{\"320\":1}}],[\"获取arr数组中\",{\"1\":{\"283\":1}}],[\"获取数组中对应索引上的值\",{\"1\":{\"282\":1}}],[\"获取任意一个数上每一位数\",{\"1\":{\"167\":1}}],[\"获取这个三位数的个位\",{\"1\":{\"167\":1}}],[\"停止虚拟机\",{\"1\":{\"564\":3}}],[\"细节\",{\"1\":{\"562\":1,\"567\":1,\"572\":4}}],[\"拷贝数组中的数据\",{\"1\":{\"567\":1}}],[\"拷贝个数\",{\"1\":{\"562\":1}}],[\"拷贝全类名的快捷键\",{\"1\":{\"492\":1}}],[\"起始索引\",{\"1\":{\"562\":2}}],[\"起到换行的作用\",{\"1\":{\"318\":1}}],[\"源数值的开始位置\",{\"1\":{\"562\":1}}],[\"源数组\",{\"1\":{\"562\":1}}],[\"终止jvm\",{\"1\":{\"562\":1}}],[\"终止当前正在运行的java虚拟机\",{\"1\":{\"562\":1}}],[\"效率高\",{\"1\":{\"562\":1}}],[\"改进之后判断是否为质数的方式\",{\"1\":{\"562\":1}}],[\"毫秒\",{\"1\":{\"562\":1}}],[\"课后练习\",{\"0\":{\"560\":1}}],[\"课后作业\",{\"1\":{\"559\":2,\"560\":2}}],[\"证明没有两位的自幂数\",{\"1\":{\"559\":1,\"560\":1}}],[\"九九重阳数\",{\"1\":{\"559\":1}}],[\"九位自幂数\",{\"1\":{\"559\":1}}],[\"八仙数\",{\"1\":{\"559\":1}}],[\"八位自幂数\",{\"1\":{\"559\":1}}],[\"北斗七星数\",{\"1\":{\"559\":1}}],[\"七位自幂数\",{\"1\":{\"559\":1}}],[\"六合数\",{\"1\":{\"559\":1}}],[\"六位自幂数\",{\"1\":{\"559\":1}}],[\"五角星数\",{\"1\":{\"559\":1}}],[\"五位自幂数\",{\"1\":{\"559\":1}}],[\"水仙花数\",{\"1\":{\"559\":2}}],[\"水果\",{\"2\":{\"45\":1,\"50\":1,\"591\":1,\"596\":1,\"601\":1,\"606\":1}}],[\"独身数\",{\"1\":{\"559\":1}}],[\"独有的属性自己赋值\",{\"1\":{\"466\":1}}],[\"独有的东西写在子类中\",{\"1\":{\"466\":1}}],[\"四叶玫瑰数\",{\"1\":{\"559\":1}}],[\"四位自幂数\",{\"1\":{\"559\":1}}],[\"四位数\",{\"1\":{\"559\":1}}],[\"四个信息选择不同类型的变量\",{\"1\":{\"122\":1}}],[\"算有意义\",{\"1\":{\"567\":1}}],[\"算法小题\",{\"0\":{\"558\":1,\"559\":1}}],[\"算术运算符的高级用法\",{\"1\":{\"182\":1}}],[\"控制台的输出\",{\"1\":{\"574\":1}}],[\"控制台的输出结果为\",{\"1\":{\"567\":1}}],[\"控制台的输出结果如下所示\",{\"1\":{\"562\":1,\"567\":1}}],[\"控制台的输出结果如下\",{\"1\":{\"562\":1}}],[\"控制台输出结果如下所示\",{\"1\":{\"562\":2,\"567\":4,\"576\":1}}],[\"控制台输出结果如下\",{\"1\":{\"557\":1,\"562\":1,\"576\":1}}],[\"控制变量不做任何变化\",{\"1\":{\"255\":1}}],[\"经过分类编目的\",{\"1\":{\"554\":1}}],[\"允许在接口中定义定义静态方法\",{\"1\":{\"549\":1}}],[\"允许在接口中定义默认方法\",{\"1\":{\"548\":1}}],[\"模拟请一些人去游泳\",{\"1\":{\"546\":1}}],[\"模块的相关操作\",{\"0\":{\"153\":1}}],[\"模块\",{\"0\":{\"140\":1},\"1\":{\"137\":1,\"145\":1}}],[\"传入匿名内部类\",{\"1\":{\"546\":1}}],[\"传智播客\",{\"1\":{\"420\":2,\"422\":1}}],[\"传智\",{\"1\":{\"420\":1}}],[\"蝶泳\",{\"1\":{\"546\":1}}],[\"普通私有方法\",{\"0\":{\"551\":1}}],[\"普通方式传入对象\",{\"1\":{\"546\":1}}],[\"普及\",{\"1\":{\"381\":1}}],[\"蛙泳\",{\"1\":{\"544\":1,\"546\":1}}],[\"走子类的重写方法\",{\"1\":{\"544\":1}}],[\"似乎得做如下几步操作\",{\"1\":{\"542\":1}}],[\"之前我们使用接口时\",{\"1\":{\"542\":1}}],[\"之前我们写成员变量就是实例成员变量\",{\"1\":{\"421\":1}}],[\"答案\",{\"1\":{\"535\":3,\"559\":1,\"560\":1}}],[\"叫做静态内部类下面单独学习\",{\"1\":{\"534\":1}}],[\"外界是无法直接使用\",{\"1\":{\"538\":1}}],[\"外界无法直接获取内部类的对象\",{\"1\":{\"534\":1}}],[\"外部直接创建成员内部类的对象\",{\"1\":{\"533\":1}}],[\"外部类名\",{\"1\":{\"535\":1,\"537\":1,\"538\":1}}],[\"外部类的变量必须用final修饰\",{\"1\":{\"534\":1}}],[\"外部类\",{\"1\":{\"533\":4,\"535\":1,\"537\":6}}],[\"外部类对象\",{\"1\":{\"533\":2}}],[\"外部类理解成宿主\",{\"1\":{\"530\":1}}],[\"拓展3\",{\"1\":{\"537\":1}}],[\"拓展2\",{\"1\":{\"537\":1}}],[\"拓展1\",{\"1\":{\"537\":1}}],[\"拓展\",{\"1\":{\"533\":1,\"537\":1}}],[\"宿主\",{\"1\":{\"533\":2}}],[\"匿名内部类使用场景\",{\"1\":{\"546\":1}}],[\"匿名内部类会创建这个没有名字的类的对象\",{\"1\":{\"545\":1}}],[\"匿名内部类的特点\",{\"0\":{\"545\":1}}],[\"匿名内部类的使用场景\",{\"0\":{\"546\":1}}],[\"匿名内部类的使用\",{\"1\":{\"544\":1}}],[\"匿名内部类的本质作用\",{\"1\":{\"542\":1}}],[\"匿名内部类格式\",{\"1\":{\"543\":1}}],[\"匿名内部类必须继承一个父类或者实现一个父接口\",{\"1\":{\"543\":1}}],[\"匿名内部类前提和格式\",{\"0\":{\"543\":1}}],[\"匿名内部类就是做这样的快捷方式\",{\"1\":{\"542\":1}}],[\"匿名内部类\",{\"0\":{\"539\":1},\"1\":{\"532\":1,\"540\":1}}],[\"汽车内部有一个发动机\",{\"1\":{\"531\":1}}],[\"里面的那个类a就称为内部类\",{\"1\":{\"530\":1}}],[\"里面的抽象方法没有方法体\",{\"1\":{\"509\":1}}],[\"适配器设计模式\",{\"0\":{\"553\":1},\"1\":{\"554\":1}}],[\"适配器类\",{\"1\":{\"526\":1}}],[\"适用于类名\",{\"1\":{\"128\":1}}],[\"适用于变量名和方法名\",{\"1\":{\"127\":1}}],[\"处理办法二\",{\"1\":{\"526\":1}}],[\"处理办法一\",{\"1\":{\"526\":1}}],[\"训练跑步\",{\"1\":{\"524\":1}}],[\"尊长守法\",{\"1\":{\"524\":1}}],[\"得金牌\",{\"1\":{\"523\":1}}],[\"得到每一个三位数\",{\"1\":{\"559\":1}}],[\"得到每一个元素才行\",{\"1\":{\"370\":1}}],[\"得到集合里面的每一个元素\",{\"1\":{\"402\":1}}],[\"得到money里面的每一位数字\",{\"1\":{\"376\":1}}],[\"得到这个字符串里面每一个字符\",{\"1\":{\"367\":1}}],[\"得到1~100之间的每一个数字\",{\"1\":{\"264\":1}}],[\"得到的结果是一个无限循环小数\",{\"1\":{\"576\":1}}],[\"得到的结果刚好是8位\",{\"1\":{\"213\":1}}],[\"得到的结果有可能是不精确的\",{\"1\":{\"166\":1}}],[\"乒乓球运动员守法\",{\"1\":{\"523\":1}}],[\"乒乓球运动员稍微跑一下\",{\"1\":{\"523\":1}}],[\"遵守法律\",{\"1\":{\"523\":1}}],[\"规范\",{\"1\":{\"523\":1}}],[\"规则\",{\"0\":{\"181\":1}}],[\"意义\",{\"1\":{\"522\":1}}],[\"意义体现\",{\"1\":{\"477\":1}}],[\"即类实现接口\",{\"1\":{\"520\":1}}],[\"即代表当前对象\",{\"1\":{\"414\":1}}],[\"满足\",{\"1\":{\"514\":1}}],[\"满足下列条件的多个方法相互构成重载\",{\"1\":{\"316\":1}}],[\"强制让子类按照某种格式重写\",{\"1\":{\"512\":1}}],[\"强制转换还有另外一种比较特殊的情况\",{\"1\":{\"213\":1}}],[\"强制转换\",{\"0\":{\"213\":1,\"484\":1},\"1\":{\"482\":3}}],[\"强制转换有可能会导致数据发生错误\",{\"1\":{\"179\":1}}],[\"但若理解了抽象的本质\",{\"1\":{\"511\":1,\"526\":1}}],[\"但是最常用的构造方法是\",{\"1\":{\"576\":1}}],[\"但是还没到这个数字\",{\"1\":{\"573\":1}}],[\"但是还是建议写在第一行的末尾\",{\"1\":{\"227\":1}}],[\"但是一般情况下获取对象的内存地址值没有太大的意义\",{\"1\":{\"567\":1}}],[\"但是一般情况下我们很少去主动的创建object类的对象\",{\"1\":{\"566\":1}}],[\"但是一些国际通用的拼音可视为英文单词\",{\"1\":{\"129\":1}}],[\"但是我们并不可能将所有的方法学习一遍\",{\"1\":{\"556\":1}}],[\"但是我只要使用其中一部分的时候\",{\"1\":{\"554\":1}}],[\"但是我在实现类中\",{\"1\":{\"526\":1}}],[\"但是没有重写完全部接口的全部抽象方法\",{\"1\":{\"522\":1}}],[\"但是有抽象方法的类必定是抽象类\",{\"1\":{\"511\":1}}],[\"但是有抽象方法的类必须定义成抽象类\",{\"1\":{\"508\":1}}],[\"但是功能具体怎么实现父类是不清楚的\",{\"1\":{\"505\":1}}],[\"但是都有其特有方法\",{\"1\":{\"489\":1}}],[\"但是运行时\",{\"1\":{\"486\":1}}],[\"但是出现的效果\",{\"1\":{\"477\":1}}],[\"但是子类觉得父类的这方法不足以满足自己的需求\",{\"1\":{\"449\":1}}],[\"但是可以多层继承\",{\"1\":{\"528\":1}}],[\"但是可以通过super调用\",{\"1\":{\"471\":1}}],[\"但是可以找到父类方法去执行\",{\"1\":{\"445\":1}}],[\"但是可能会在源码中出现\",{\"1\":{\"215\":1}}],[\"但是java中的子类是更加强大的\",{\"1\":{\"431\":1}}],[\"但是被jvm识别\",{\"1\":{\"426\":1}}],[\"但是不推荐这种方式去访问\",{\"1\":{\"424\":1}}],[\"但是不明确具体的数据\",{\"1\":{\"288\":1}}],[\"但是本题明确说明需要返回\",{\"1\":{\"402\":1}}],[\"但是本地文件夹的名字还没有修改\",{\"1\":{\"162\":1}}],[\"但是目前市场上很少有人用\",{\"1\":{\"385\":1}}],[\"但是地址值不同\",{\"1\":{\"355\":1}}],[\"但是底层原理是字节数组\",{\"1\":{\"353\":1}}],[\"但是它们可以被共享\",{\"1\":{\"353\":1}}],[\"但是效率偏低\",{\"1\":{\"293\":1}}],[\"但是太麻烦了\",{\"1\":{\"289\":1}}],[\"但是byte类型\",{\"1\":{\"269\":1}}],[\"但是数组容器在存储数据的时候\",{\"1\":{\"269\":1}}],[\"但是知道循环的结束条件时\",{\"1\":{\"251\":1}}],[\"但是如果long类型也表示不下怎么办呢\",{\"1\":{\"570\":1}}],[\"但是如果被重写\",{\"1\":{\"548\":1}}],[\"但是如果结果跨0了\",{\"1\":{\"209\":1}}],[\"但是如果是对负数进行计算\",{\"1\":{\"208\":1}}],[\"但是如果用户名输入错误了\",{\"1\":{\"200\":1}}],[\"但是短路逻辑运算符可以提高程序的运行效率\",{\"1\":{\"201\":1}}],[\"但是会让代码显得比较low\",{\"1\":{\"126\":1}}],[\"但是这些优先级不需要记忆\",{\"1\":{\"206\":1}}],[\"但是这里赋值给a之后\",{\"1\":{\"191\":1}}],[\"但是这种方式影响代码的阅读\",{\"1\":{\"112\":1}}],[\"但是这个容器中只能存一个值\",{\"1\":{\"108\":1}}],[\"但是个数有且只能有一个\",{\"1\":{\"106\":1}}],[\"但是针对于不同的操作系统\",{\"1\":{\"96\":1}}],[\"但是\",{\"1\":{\"93\":1,\"280\":1}}],[\"知道如何修改即可\",{\"1\":{\"511\":1,\"526\":1}}],[\"库克\",{\"1\":{\"509\":1}}],[\"厨师炒菜多加点盐\",{\"1\":{\"509\":1}}],[\"换句话说\",{\"1\":{\"505\":1,\"566\":1}}],[\"换句话说不能通过返回值来判定两个方法是否相互构成重载\",{\"1\":{\"316\":1}}],[\"抽取共性时\",{\"1\":{\"512\":1}}],[\"抽取构造方法中的重复代码\",{\"1\":{\"502\":1}}],[\"抽象类和抽象方法的格式\",{\"1\":{\"512\":1}}],[\"抽象类可以强制让子类\",{\"1\":{\"512\":1}}],[\"抽象类存在的意义\",{\"0\":{\"512\":1}}],[\"抽象类存在的意义是为了被子类继承\",{\"1\":{\"511\":1,\"512\":1}}],[\"抽象类中可以用抽象方法\",{\"1\":{\"513\":1}}],[\"抽象类中已经实现的是模板中确定的成员\",{\"1\":{\"511\":1}}],[\"抽象类中\",{\"1\":{\"511\":2}}],[\"抽象类都是具备的\",{\"1\":{\"510\":1}}],[\"抽象类失去了创建对象的能力\",{\"1\":{\"510\":1}}],[\"抽象类得到了拥有抽象方法的能力\",{\"1\":{\"510\":1}}],[\"抽象类的作用是什么样的\",{\"1\":{\"512\":1}}],[\"抽象类的子类\",{\"1\":{\"511\":1}}],[\"抽象类的细节\",{\"0\":{\"511\":1}}],[\"抽象类的特征总结起来可以说是\",{\"1\":{\"510\":1}}],[\"抽象类的特征\",{\"0\":{\"510\":1}}],[\"抽象类的使用\",{\"0\":{\"509\":1}}],[\"抽象类不确定如何实现的定义成抽象方法\",{\"1\":{\"511\":1}}],[\"抽象类不能创建对象\",{\"1\":{\"509\":1,\"511\":1}}],[\"抽象类不一定有抽象方法\",{\"1\":{\"508\":1}}],[\"抽象类\",{\"0\":{\"508\":1},\"1\":{\"505\":1,\"509\":1}}],[\"抽象类引入\",{\"0\":{\"505\":1}}],[\"抽象方法和常量\",{\"1\":{\"515\":1}}],[\"抽象方法所在的类\",{\"1\":{\"512\":1}}],[\"抽象方法必须要放在抽象类中\",{\"1\":{\"509\":1}}],[\"抽象方法只包含一个方法名\",{\"1\":{\"507\":1}}],[\"抽象方法\",{\"0\":{\"507\":1,\"516\":1},\"1\":{\"505\":1,\"509\":1,\"514\":1,\"518\":1,\"523\":3}}],[\"局部内部类\",{\"0\":{\"538\":1},\"1\":{\"532\":1,\"538\":1}}],[\"局部代码块\",{\"0\":{\"501\":1}}],[\"局部变量\",{\"0\":{\"499\":1},\"1\":{\"333\":4,\"499\":1}}],[\"显示\",{\"1\":{\"565\":1}}],[\"显示初始化\",{\"1\":{\"500\":1}}],[\"显示今天的减肥活动\",{\"1\":{\"236\":1}}],[\"哪种可以通过编译\",{\"1\":{\"499\":1}}],[\"哪个对象调用这个方法\",{\"1\":{\"416\":1}}],[\"声明变量\",{\"1\":{\"499\":2}}],[\"声明不变\",{\"1\":{\"448\":1,\"450\":1}}],[\"√\",{\"1\":{\"494\":10}}],[\"公共的\",{\"1\":{\"493\":1}}],[\"公式\",{\"1\":{\"167\":2,\"216\":1,\"217\":1}}],[\"权限修饰符\",{\"0\":{\"493\":1}}],[\"选中类名crtl\",{\"1\":{\"492\":1}}],[\"选择neme和age属性点击next\",{\"1\":{\"567\":1}}],[\"选择new\",{\"1\":{\"146\":1,\"149\":1,\"154\":1,\"163\":1}}],[\"选择equals\",{\"1\":{\"567\":1}}],[\"选择edit\",{\"1\":{\"88\":1}}],[\"选择tostring\",{\"1\":{\"567\":2}}],[\"选择包裹方式\",{\"1\":{\"361\":1}}],[\"选择其中一个执行的时候\",{\"1\":{\"237\":1}}],[\"选择其中一部手机\",{\"1\":{\"123\":1}}],[\"选择商品数量\",{\"1\":{\"187\":1}}],[\"选择修改之后的项目\",{\"1\":{\"162\":1}}],[\"选择要打开的项目\",{\"1\":{\"161\":1}}],[\"选择close\",{\"1\":{\"160\":1}}],[\"选择import\",{\"1\":{\"157\":1}}],[\"选择第三个修改模块名和本地文件夹名\",{\"1\":{\"156\":1}}],[\"选择第二个不导入\",{\"1\":{\"135\":1}}],[\"选择refactor\",{\"1\":{\"156\":1}}],[\"选择remove\",{\"1\":{\"155\":2}}],[\"选择module\",{\"1\":{\"154\":1,\"157\":1}}],[\"选择project\",{\"1\":{\"154\":1,\"157\":1,\"162\":1}}],[\"选择delete即可\",{\"1\":{\"151\":1}}],[\"选择setting\",{\"1\":{\"146\":1}}],[\"选择java\",{\"1\":{\"146\":1}}],[\"选择完毕点击右下角的next\",{\"1\":{\"135\":1}}],[\"选择背景主题\",{\"1\":{\"135\":1}}],[\"选择高级\",{\"1\":{\"63\":2}}],[\"选择属性\",{\"1\":{\"63\":1}}],[\"全部实现\",{\"1\":{\"526\":1}}],[\"全球乒乓球比赛\",{\"1\":{\"523\":1}}],[\"全类名\",{\"1\":{\"492\":1}}],[\"全true为true\",{\"1\":{\"215\":1}}],[\"情况二\",{\"1\":{\"491\":2}}],[\"情况一\",{\"1\":{\"491\":2}}],[\"连接\",{\"1\":{\"490\":1}}],[\"连续不间断\",{\"1\":{\"284\":1}}],[\"技术名称\",{\"1\":{\"490\":1}}],[\"技巧\",{\"1\":{\"77\":1,\"78\":1,\"80\":1}}],[\"建包的操作如下\",{\"1\":{\"490\":1}}],[\"建议这样使用权限\",{\"1\":{\"494\":1}}],[\"建议重写都加上这个注解\",{\"1\":{\"450\":1}}],[\"建议重装系统\",{\"1\":{\"67\":1}}],[\"建议在任何时候都手动写上空参和带全部参数的构造方法\",{\"1\":{\"343\":1}}],[\"建议使用静态初始化\",{\"1\":{\"289\":1}}],[\"建议大写\",{\"1\":{\"120\":3}}],[\"建议声明变量和赋值在一起完成\",{\"1\":{\"113\":1}}],[\"建议最好把所有的跟开发相关的软件都放在一起\",{\"1\":{\"87\":1}}],[\"建议\",{\"0\":{\"202\":1},\"1\":{\"68\":1,\"227\":1,\"269\":1,\"453\":1}}],[\"鱼\",{\"1\":{\"489\":2}}],[\"灰\",{\"1\":{\"489\":2}}],[\"骨头\",{\"1\":{\"489\":2}}],[\"养了一只\",{\"1\":{\"489\":4}}],[\"饲养猫\",{\"1\":{\"489\":1}}],[\"饲养狗\",{\"1\":{\"489\":1}}],[\"饲养员类\",{\"1\":{\"489\":1}}],[\"饲养员\",{\"1\":{\"489\":1}}],[\"猛吃\",{\"1\":{\"489\":1}}],[\"岁的猫\",{\"1\":{\"489\":2}}],[\"岁的狗\",{\"1\":{\"489\":2}}],[\"岁的\",{\"1\":{\"489\":6}}],[\"画图分析\",{\"1\":{\"489\":1}}],[\"能表示范围比较小\",{\"1\":{\"572\":1}}],[\"能满足当前业务的需求\",{\"1\":{\"526\":1}}],[\"能接收所有的动物\",{\"1\":{\"489\":1}}],[\"能否想办法在keeppet中调用特有方法\",{\"1\":{\"489\":1}}],[\"能否简化\",{\"1\":{\"489\":1}}],[\"能干活的东西\",{\"1\":{\"321\":1}}],[\"喂养宠物猫\",{\"1\":{\"489\":1}}],[\"喂养宠物狗\",{\"1\":{\"489\":1}}],[\"keeppet\",{\"1\":{\"489\":11}}],[\"kit\",{\"1\":{\"97\":1}}],[\"逮老鼠catchmouse方法\",{\"1\":{\"489\":1}}],[\"综合练习\",{\"0\":{\"489\":1}}],[\"明明创建了cat类型对象\",{\"1\":{\"486\":1}}],[\"明确说明需要有返回值\",{\"1\":{\"401\":1}}],[\"明确参数\",{\"1\":{\"314\":1}}],[\"明确返回值类型\",{\"1\":{\"314\":1}}],[\"却报出了\",{\"1\":{\"486\":1}}],[\"转为int类型整数\",{\"1\":{\"572\":3}}],[\"转换之后变量名为d\",{\"1\":{\"488\":1}}],[\"转换前\",{\"1\":{\"487\":1}}],[\"转换规则\",{\"1\":{\"171\":1}}],[\"转型的过程中\",{\"1\":{\"486\":1}}],[\"转型的异常\",{\"0\":{\"486\":1}}],[\"转型演示\",{\"1\":{\"485\":1}}],[\"范围\",{\"1\":{\"572\":2}}],[\"范围大的赋值给范围小的\",{\"1\":{\"482\":1}}],[\"范围小的赋值给范围大的\",{\"1\":{\"482\":1}}],[\"范例2\",{\"1\":{\"551\":1}}],[\"范例1\",{\"1\":{\"551\":1}}],[\"范例\",{\"1\":{\"301\":2,\"304\":2,\"308\":2,\"327\":3,\"548\":1,\"549\":1}}],[\"想要进行深克隆\",{\"1\":{\"567\":1}}],[\"想要让哪个类拥有一个行为\",{\"1\":{\"552\":1}}],[\"想要用到哪个方法\",{\"1\":{\"526\":1}}],[\"想要一个方法\",{\"1\":{\"489\":1}}],[\"想要调用子类特有的方法\",{\"1\":{\"482\":1,\"485\":1}}],[\"想要删除哪个文件\",{\"1\":{\"151\":1}}],[\"抓老鼠\",{\"1\":{\"480\":1,\"485\":1}}],[\"体现多态的扩展性与便利\",{\"1\":{\"479\":1}}],[\"业务逻辑发生改变时\",{\"1\":{\"479\":1}}],[\"业内大多数程序员都在遵守阿里巴巴的命名规则\",{\"1\":{\"124\":1}}],[\"便是向下转型\",{\"1\":{\"484\":1}}],[\"便是向上转型\",{\"1\":{\"483\":1}}],[\"便于扩展和维护\",{\"1\":{\"479\":1}}],[\"便可以包含其父类的成员\",{\"1\":{\"462\":1}}],[\"前提\",{\"1\":{\"477\":1}}],[\"前面和后面的数据类型一定要保持一致\",{\"1\":{\"275\":1}}],[\"王建国\",{\"1\":{\"476\":1}}],[\"误区2\",{\"1\":{\"473\":1}}],[\"误区1\",{\"1\":{\"473\":1}}],[\"且必须在第一行\",{\"1\":{\"471\":1}}],[\"且只加载一次\",{\"1\":{\"424\":1}}],[\"且只能一个类是public修饰\",{\"1\":{\"328\":1}}],[\"覆盖虚方法表中的方法\",{\"1\":{\"467\":1}}],[\"嗷呜~~\",{\"1\":{\"466\":1}}],[\"旺财\",{\"1\":{\"466\":1}}],[\"共性\",{\"1\":{\"472\":1}}],[\"共性的属性交给父类赋值\",{\"1\":{\"466\":1}}],[\"共性内容抽取\",{\"1\":{\"434\":1}}],[\"吼叫\",{\"1\":{\"466\":3}}],[\"狗刨式\",{\"1\":{\"542\":1}}],[\"狗在看家\",{\"1\":{\"489\":1}}],[\"狗类\",{\"1\":{\"489\":1}}],[\"狗\",{\"1\":{\"466\":1}}],[\"颜色的\",{\"1\":{\"489\":4}}],[\"颜色的狗两只前腿死死的抱住\",{\"1\":{\"489\":1}}],[\"颜色的猫眯着眼睛侧着头吃\",{\"1\":{\"489\":1}}],[\"颜色\",{\"1\":{\"466\":4,\"489\":2}}],[\"猫抓老鼠\",{\"1\":{\"489\":1}}],[\"猫类\",{\"1\":{\"489\":1}}],[\"猫\",{\"1\":{\"466\":1}}],[\"猫可能认为父类cry\",{\"1\":{\"449\":1}}],[\"顶层父类是object类\",{\"1\":{\"465\":1}}],[\"很有可能会产生精度丢失问题\",{\"1\":{\"574\":1}}],[\"很弱\",{\"1\":{\"463\":1}}],[\"很多我们学习过的类\",{\"1\":{\"497\":1}}],[\"很多时候要通过控制语句的执行顺序来实现我们想要的功能\",{\"1\":{\"220\":1}}],[\"很多的原本的dos命令已经无法使用了\",{\"1\":{\"61\":1}}],[\"凤姐\",{\"1\":{\"461\":1}}],[\"暂时了解\",{\"1\":{\"453\":1}}],[\"暂时用不到\",{\"1\":{\"99\":1}}],[\"函数名和参数列表都要一模一样\",{\"1\":{\"451\":1}}],[\"加法运算\",{\"1\":{\"576\":1}}],[\"加法\",{\"1\":{\"572\":3}}],[\"加上参数才能执行\",{\"1\":{\"564\":1}}],[\"加上后的子类代码形式如下\",{\"1\":{\"450\":1}}],[\"加到用于保存最终求和的变量\",{\"1\":{\"243\":1}}],[\"喵的非常好听\",{\"1\":{\"449\":1,\"450\":1}}],[\"喵喵喵\",{\"1\":{\"449\":1,\"450\":1}}],[\"法律规范\",{\"1\":{\"524\":1,\"525\":1}}],[\"法\",{\"1\":{\"449\":1}}],[\"若子类中不存在就会执行父类中相应的方法\",{\"1\":{\"445\":1}}],[\"若子类中存在就会执行子类中的方法\",{\"1\":{\"445\":1}}],[\"若fu\",{\"1\":{\"443\":1}}],[\"子父类中出现了同名的成员变量时\",{\"1\":{\"442\":1,\"443\":1}}],[\"子类就必须对该方法进行重写\",{\"1\":{\"548\":1}}],[\"子类就无法继承\",{\"1\":{\"473\":1}}],[\"子类如何操作呢\",{\"1\":{\"526\":1}}],[\"子类各自的实现都不尽相同\",{\"1\":{\"505\":1}}],[\"子类类型\",{\"1\":{\"483\":1,\"484\":2}}],[\"子类3\",{\"1\":{\"476\":1}}],[\"子类2\",{\"1\":{\"476\":1}}],[\"子类1\",{\"1\":{\"476\":1}}],[\"子类对象是可以赋值给父类类型的变量\",{\"1\":{\"475\":1}}],[\"子类对象会优先调用自己的方法\",{\"1\":{\"446\":1}}],[\"子类到底能继承父类中的哪些内容\",{\"0\":{\"473\":1}}],[\"子类更强大\",{\"1\":{\"472\":1}}],[\"子类更具体\",{\"1\":{\"429\":1}}],[\"子类初始化之前\",{\"1\":{\"471\":1}}],[\"子类将无法使用父类的数据\",{\"1\":{\"471\":1}}],[\"子类在初始化的时候\",{\"1\":{\"471\":1}}],[\"子类出现了和父类中一模一样的方法声明\",{\"1\":{\"467\":1}}],[\"子类的构造方法中\",{\"1\":{\"511\":1}}],[\"子类的构造方法中默认有一个super\",{\"1\":{\"455\":1}}],[\"子类的每个构造方法中均有默认的super\",{\"1\":{\"461\":1,\"464\":1}}],[\"子类构造方法的第一行\",{\"1\":{\"471\":1}}],[\"子类构造方法的第一行语句默认都是\",{\"1\":{\"471\":1}}],[\"子类构造方法的第一行都隐含了一个\",{\"1\":{\"457\":1}}],[\"子类构造方法执行的时候\",{\"1\":{\"457\":1}}],[\"子类有参数构造方法只是初始化了自己对象中的成员变量score\",{\"1\":{\"459\":1}}],[\"子类有参\",{\"1\":{\"456\":2,\"459\":1,\"461\":1}}],[\"子类无参\",{\"1\":{\"456\":2,\"459\":1,\"461\":1}}],[\"子类所有构造方法的第一行都会默认先调用父类的无参构造方法\",{\"1\":{\"455\":1}}],[\"子类覆盖了从父类继承下来的虚方法表中的方法\",{\"1\":{\"452\":1}}],[\"子类方法覆盖父类方法\",{\"1\":{\"451\":2}}],[\"子类方法需要修改\",{\"1\":{\"443\":1}}],[\"子类重写的方法尽量跟父类中的方法保持一致\",{\"1\":{\"467\":1}}],[\"子类重写父类方法时\",{\"1\":{\"453\":2}}],[\"子类重写了父类的show方法\",{\"1\":{\"446\":1}}],[\"子类重新写了一个与父类同名的方法\",{\"1\":{\"449\":1}}],[\"子类继承了父类的方法\",{\"1\":{\"449\":1}}],[\"子类继承父类\",{\"1\":{\"436\":1}}],[\"子类中所有的构造方法默认先访问父类中的无参构造\",{\"1\":{\"471\":1}}],[\"子类中出现与父类一模一样的方法时\",{\"1\":{\"448\":1}}],[\"子类中有show方法\",{\"1\":{\"446\":1}}],[\"子类中没有show方法\",{\"1\":{\"445\":1}}],[\"子类中可以直接访问\",{\"1\":{\"443\":1}}],[\"子类是不能直接访问的\",{\"1\":{\"443\":1}}],[\"子类是父类的一种\",{\"1\":{\"434\":1}}],[\"子类会优先访问自己对象中的成员变量\",{\"1\":{\"442\":1}}],[\"子类不能继承父类的构造方法\",{\"1\":{\"438\":1,\"471\":1}}],[\"子类不能继承的内容\",{\"0\":{\"437\":1}}],[\"子类不能同时继承多个父类\",{\"1\":{\"431\":1}}],[\"子类特有的属性和行为由自己定义\",{\"1\":{\"436\":1}}],[\"子类特有的属性和行为就定义在子类中了\",{\"1\":{\"434\":1}}],[\"子类banzhuren类\",{\"1\":{\"435\":1}}],[\"子类student类\",{\"1\":{\"435\":1}}],[\"子类teacher类\",{\"1\":{\"435\":1}}],[\"子类a继承父类b\",{\"1\":{\"431\":1}}],[\"子类\",{\"1\":{\"431\":1,\"472\":1,\"475\":1,\"489\":2}}],[\"子类可以使用\",{\"1\":{\"472\":1}}],[\"子类可以得到父类的属性和行为\",{\"1\":{\"472\":1}}],[\"子类可以直接使用\",{\"1\":{\"472\":1}}],[\"子类可以直接访问父类中的非私有的属性和行为\",{\"1\":{\"429\":1}}],[\"子类可以在父类的基础上改写父类内容\",{\"1\":{\"495\":1}}],[\"子类可以在父类的基础上新增其他功能\",{\"1\":{\"472\":1}}],[\"子类可以在父类的基础上\",{\"1\":{\"430\":1}}],[\"访问内部类的类型都是用\",{\"1\":{\"533\":1}}],[\"访问权限\",{\"1\":{\"453\":1}}],[\"访问权限子类必须大于等于父类\",{\"1\":{\"453\":1}}],[\"访问权限足够大\",{\"1\":{\"426\":1}}],[\"访问方法中的num\",{\"1\":{\"443\":1}}],[\"访问子类中的num\",{\"1\":{\"442\":1,\"443\":1}}],[\"访问子类中的num2\",{\"1\":{\"441\":1}}],[\"访问父类中的num\",{\"1\":{\"441\":1,\"442\":1,\"443\":1}}],[\"私有方法\",{\"0\":{\"550\":1}}],[\"私有的\",{\"1\":{\"493\":1}}],[\"私有的子类无法使用\",{\"1\":{\"439\":2}}],[\"私有修饰的和public修饰的final修饰的不能加入到虚方法表中\",{\"1\":{\"453\":1}}],[\"私有化全部的成员变量\",{\"1\":{\"346\":1}}],[\"值得注意的是子类可以继承父类的私有成员\",{\"1\":{\"438\":1}}],[\"值是\",{\"1\":{\"105\":1}}],[\"灵涛\",{\"1\":{\"435\":1}}],[\"播仔\",{\"1\":{\"435\":2}}],[\"父类名或者接口名\",{\"1\":{\"543\":1}}],[\"父类只需要提供一个没有方法体的定义即可\",{\"1\":{\"505\":1}}],[\"父类可能知道子类应该有哪个功能\",{\"1\":{\"505\":1}}],[\"父类变量名\",{\"1\":{\"484\":1}}],[\"父类引用指向子类对象\",{\"1\":{\"477\":1}}],[\"父类类型向子类类型向下转换的过程\",{\"1\":{\"484\":1}}],[\"父类类型相对与子类来说是大范围的类型\",{\"1\":{\"483\":1}}],[\"父类类型\",{\"1\":{\"475\":1,\"477\":1,\"483\":1}}],[\"父类中也有一个相同的方法\",{\"1\":{\"526\":1}}],[\"父类中的方法\",{\"1\":{\"505\":1}}],[\"父类中的构造方法不会被子类继承\",{\"1\":{\"471\":1}}],[\"父类中非私有的成员\",{\"1\":{\"473\":1}}],[\"父类私有的东西\",{\"1\":{\"473\":1}}],[\"父类空间优先于子类对象产生\",{\"1\":{\"462\":1}}],[\"父类的\",{\"1\":{\"460\":2}}],[\"父类无参\",{\"1\":{\"456\":3,\"459\":1,\"461\":1}}],[\"父类成员变量初始化后\",{\"1\":{\"455\":1}}],[\"父类成员变量名\",{\"1\":{\"443\":1}}],[\"父类human类\",{\"1\":{\"435\":1}}],[\"父类b继可以承父类c\",{\"1\":{\"431\":1}}],[\"父类\",{\"1\":{\"431\":2,\"472\":1,\"476\":1,\"489\":1,\"509\":1}}],[\"父类更通用\",{\"1\":{\"429\":1}}],[\"增加其他的功能\",{\"1\":{\"430\":1}}],[\"使子类更强大\",{\"1\":{\"430\":1}}],[\"使类与类之间产生了关系\",{\"1\":{\"430\":1}}],[\"使得子类对象可以直接具有与父类相同的属性\",{\"1\":{\"429\":1}}],[\"使用的都是二进制数据\",{\"1\":{\"574\":1}}],[\"使用的技巧\",{\"0\":{\"100\":1}}],[\"使用这个方法我们也可以完成数组元素的删除操作\",{\"1\":{\"562\":1}}],[\"使用设计模式是为了可重用代码\",{\"1\":{\"554\":1}}],[\"使用匿名内部类\",{\"1\":{\"544\":1}}],[\"使用abstract\",{\"1\":{\"507\":1}}],[\"使用final修饰\",{\"1\":{\"499\":2}}],[\"使用不同的访问权限修饰符修饰时\",{\"1\":{\"493\":1}}],[\"使用不同包下的相同类怎么办\",{\"0\":{\"492\":1}}],[\"使用全类名的形式即可\",{\"1\":{\"492\":1}}],[\"使用自己写的其他包中的类时\",{\"1\":{\"491\":1}}],[\"使用父类型作为参数\",{\"1\":{\"479\":1}}],[\"使用private修饰成员变量\",{\"1\":{\"443\":1}}],[\"使用public修饰getter和setter方法\",{\"1\":{\"407\":1}}],[\"使用格式\",{\"1\":{\"443\":1,\"483\":1,\"484\":1}}],[\"使用\",{\"1\":{\"407\":1}}],[\"使用stringbuilder的场景\",{\"1\":{\"380\":1,\"383\":1}}],[\"使用set方法给成员变量赋值\",{\"1\":{\"337\":1}}],[\"使用程序实现在控制台遍历该集合\",{\"1\":{\"396\":1,\"399\":1}}],[\"使用程序实现在控制台遍历该字符串\",{\"1\":{\"363\":1}}],[\"使用程序在控制台打印出1\",{\"1\":{\"264\":2}}],[\"使用带参构造方法直接创建带有属性值的对象\",{\"1\":{\"345\":2}}],[\"使用get方法获取成员变量的值\",{\"1\":{\"337\":1}}],[\"使用成员方法\",{\"1\":{\"327\":2}}],[\"使用成员变量\",{\"1\":{\"327\":2}}],[\"使用对象访问成员变量\",{\"1\":{\"412\":3}}],[\"使用对象\",{\"1\":{\"327\":1,\"328\":1}}],[\"使用常量\",{\"1\":{\"306\":2}}],[\"使用分支语句分两种情况对两个数字的大小关系进行处理\",{\"1\":{\"302\":1,\"306\":1,\"309\":1}}],[\"使用方法重载的思想\",{\"1\":{\"317\":1}}],[\"使用方法的好处\",{\"1\":{\"299\":1}}],[\"使用方式\",{\"0\":{\"184\":1,\"496\":1,\"544\":1}}],[\"使用数组来存储键盘录入的5个整数\",{\"1\":{\"289\":1}}],[\"使用键盘录入去猜出这个数字是多少\",{\"1\":{\"267\":2}}],[\"使用循环猜\",{\"1\":{\"267\":1}}],[\"使用循环结构完成\",{\"1\":{\"243\":1}}],[\"使用反码计算存在的弊端\",{\"1\":{\"209\":1}}],[\"使用原码计算存在的弊端\",{\"1\":{\"208\":1}}],[\"使用技巧\",{\"1\":{\"195\":2}}],[\"使用步骤\",{\"0\":{\"263\":1},\"1\":{\"130\":1}}],[\"使用之前一定要赋值\",{\"1\":{\"113\":1}}],[\"使用场景与案例\",{\"0\":{\"449\":1}}],[\"使用场景\",{\"0\":{\"195\":1,\"288\":1},\"1\":{\"113\":1}}],[\"使用变量\",{\"1\":{\"113\":1,\"306\":2}}],[\"使用指南\",{\"1\":{\"32\":2},\"2\":{\"5\":1,\"7\":1,\"28\":1,\"35\":1,\"36\":1}}],[\"食草动物属于动物\",{\"1\":{\"429\":1}}],[\"兔子属于食草动物\",{\"1\":{\"429\":1}}],[\"管理其他人\",{\"1\":{\"509\":1}}],[\"管理员\",{\"1\":{\"476\":1}}],[\"管理员的信息为\",{\"1\":{\"476\":1}}],[\"管理\",{\"1\":{\"428\":1,\"433\":1}}],[\"班主任强调纪律问题\",{\"1\":{\"435\":1}}],[\"班主任\",{\"1\":{\"428\":1,\"433\":1}}],[\"教书\",{\"1\":{\"428\":1,\"433\":1}}],[\"薪水\",{\"1\":{\"428\":2,\"433\":2}}],[\"睡觉\",{\"1\":{\"428\":4,\"433\":3}}],[\"睡觉等行为\",{\"1\":{\"346\":1}}],[\"老李\",{\"1\":{\"489\":1}}],[\"老王\",{\"1\":{\"489\":2}}],[\"老师的信息为\",{\"1\":{\"476\":1}}],[\"老师和管理员\",{\"1\":{\"476\":1}}],[\"老师在认真教技术\",{\"1\":{\"435\":1}}],[\"老师类\",{\"1\":{\"428\":1,\"433\":1,\"434\":1}}],[\"老师类和工人类\",{\"1\":{\"428\":1}}],[\"老丈人给出回应\",{\"1\":{\"225\":1}}],[\"老丈人选女婿\",{\"0\":{\"225\":1}}],[\"引入\",{\"0\":{\"428\":1,\"438\":1,\"455\":1,\"459\":1,\"570\":1,\"574\":1}}],[\"引用类型转换\",{\"0\":{\"481\":1}}],[\"引用类型\",{\"1\":{\"287\":1}}],[\"引用数据类型会重新创建新的\",{\"1\":{\"567\":1}}],[\"引用数据类型拷贝过来的是地址值\",{\"1\":{\"567\":1}}],[\"引用数据类型\",{\"1\":{\"115\":1,\"120\":1}}],[\"节省内存\",{\"1\":{\"424\":1}}],[\"称为实例变量\",{\"1\":{\"424\":1}}],[\"称为java开发工具\",{\"1\":{\"97\":1}}],[\"报错\",{\"1\":{\"423\":1,\"435\":1,\"497\":1,\"499\":2}}],[\"报名\",{\"1\":{\"140\":1}}],[\"徐干\",{\"1\":{\"423\":1,\"463\":2}}],[\"静态私有方法\",{\"0\":{\"551\":1}}],[\"静态\",{\"1\":{\"547\":1}}],[\"静态内部类对象的创建格式\",{\"1\":{\"537\":1}}],[\"静态内部类中没有银行的outer\",{\"1\":{\"537\":1}}],[\"静态内部类不可以直接访问外部类的非静态成员\",{\"1\":{\"537\":1}}],[\"静态内部类可以直接访问外部类的静态成员\",{\"1\":{\"537\":2}}],[\"静态内部类与其他类的用法完全一样\",{\"1\":{\"537\":1}}],[\"静态内部类是一种特殊的成员内部类\",{\"1\":{\"537\":1}}],[\"静态内部类特点\",{\"1\":{\"537\":1}}],[\"静态内部类\",{\"0\":{\"537\":1},\"1\":{\"532\":1}}],[\"静态代码块\",{\"0\":{\"503\":1}}],[\"静态区\",{\"1\":{\"424\":1}}],[\"静态方法获取biginteger的对象\",{\"1\":{\"572\":3}}],[\"静态方法只能通过接口名调用\",{\"1\":{\"549\":1}}],[\"静态方法只能访问静态变量和静态方法\",{\"1\":{\"425\":1}}],[\"静态方法等\",{\"1\":{\"510\":1}}],[\"静态方法中没有this关键字\",{\"1\":{\"425\":1}}],[\"静态方法中\",{\"1\":{\"425\":1}}],[\"静态方法中是没有this关键字\",{\"1\":{\"425\":1}}],[\"静态方法\",{\"1\":{\"422\":1}}],[\"静态方法也是直接通过类名\",{\"1\":{\"422\":1}}],[\"静态方法及其访问\",{\"0\":{\"422\":1}}],[\"静态变量\",{\"1\":{\"420\":1}}],[\"静态变量及其访问\",{\"0\":{\"420\":1}}],[\"静态成员变量的访问\",{\"1\":{\"420\":1,\"422\":1}}],[\"静态初始化\",{\"1\":{\"287\":2}}],[\"应该属于每个对象\",{\"1\":{\"418\":1}}],[\"应用程序编程接口\",{\"1\":{\"349\":1}}],[\"应用场景\",{\"1\":{\"166\":1,\"354\":1}}],[\"概述\",{\"0\":{\"418\":1,\"427\":1,\"495\":1,\"504\":1,\"513\":1,\"529\":1,\"540\":1,\"556\":1,\"561\":1,\"563\":1,\"566\":1,\"568\":1,\"571\":1,\"575\":1}}],[\"概念\",{\"0\":{\"103\":1,\"168\":1,\"178\":1,\"254\":1,\"269\":1,\"448\":1}}],[\"代表构造方法正在初始化的那个对象\",{\"1\":{\"417\":1}}],[\"代码设计经验的总结\",{\"1\":{\"554\":1}}],[\"代码举例\",{\"1\":{\"507\":1,\"508\":1,\"509\":1}}],[\"代码体现在子类的构造七调用时\",{\"1\":{\"462\":1}}],[\"代码显得很臃肿和冗余\",{\"1\":{\"428\":1}}],[\"代码如下所示\",{\"1\":{\"562\":1,\"567\":3,\"576\":2}}],[\"代码如下\",{\"1\":{\"412\":1,\"441\":1,\"442\":1,\"443\":1,\"445\":1,\"446\":1,\"449\":1,\"456\":1,\"461\":1,\"485\":1,\"487\":1,\"499\":1,\"523\":1,\"524\":1,\"544\":1,\"546\":1}}],[\"代码简单\",{\"1\":{\"386\":1}}],[\"代码实现\",{\"0\":{\"376\":1,\"397\":1,\"400\":1},\"1\":{\"377\":1,\"558\":1,\"567\":1,\"572\":1}}],[\"代码从左到右逐个执行\",{\"1\":{\"180\":1}}],[\"代码就恢复正常不会报错了\",{\"1\":{\"157\":1}}],[\"代码不会报错\",{\"1\":{\"126\":1}}],[\"代码示例\",{\"0\":{\"283\":1},\"1\":{\"121\":1,\"122\":1,\"123\":1,\"130\":1,\"167\":1,\"194\":1,\"196\":1,\"197\":1,\"206\":2,\"225\":1,\"226\":1,\"229\":1,\"230\":1,\"232\":1,\"236\":1,\"238\":1,\"241\":1,\"245\":1,\"260\":1,\"261\":1,\"263\":1,\"264\":1,\"265\":1,\"266\":1,\"267\":1,\"290\":1,\"291\":1,\"292\":1,\"293\":1,\"294\":1,\"295\":1,\"296\":1,\"310\":1,\"311\":1,\"320\":1,\"383\":1,\"384\":1,\"401\":1,\"466\":1,\"476\":1,\"478\":1,\"489\":1,\"492\":1,\"562\":1,\"564\":1}}],[\"代码解析\",{\"1\":{\"113\":1}}],[\"代码要跟我编写的完全保持一致\",{\"1\":{\"72\":1}}],[\"代码块\",{\"0\":{\"19\":1}}],[\"代码\",{\"1\":{\"18\":1,\"302\":1,\"306\":1,\"309\":1,\"317\":1,\"318\":1,\"319\":1,\"497\":1,\"498\":1}}],[\"谁是子\",{\"1\":{\"466\":1}}],[\"谁调用这个方法\",{\"1\":{\"416\":1}}],[\"谁写在后面都是一样的\",{\"1\":{\"273\":1}}],[\"谁写在前面\",{\"1\":{\"273\":1}}],[\"李四\",{\"1\":{\"412\":1}}],[\"张三\",{\"1\":{\"412\":1,\"461\":2,\"476\":1,\"537\":1}}],[\"张雨提\",{\"1\":{\"122\":1}}],[\"接口代表规则\",{\"1\":{\"552\":1}}],[\"接口应用\",{\"0\":{\"552\":1}}],[\"接口和接口的关系\",{\"1\":{\"528\":1}}],[\"接口和类之间的关系\",{\"0\":{\"528\":1}}],[\"接口与类之间是多实现的\",{\"1\":{\"525\":1}}],[\"接口与接口之间是多继承的\",{\"1\":{\"525\":1}}],[\"接口与接口之间是可以多继承的\",{\"1\":{\"525\":1}}],[\"接口与接口是继承关系\",{\"1\":{\"525\":1}}],[\"接口与接口的多继承\",{\"0\":{\"525\":1}}],[\"接口继承接口就是把其他接口的抽象方法与本接口进行了合并\",{\"1\":{\"525\":1}}],[\"接口体现的是规范\",{\"1\":{\"523\":1}}],[\"接口体现的是一种规范\",{\"1\":{\"522\":1}}],[\"接口\",{\"1\":{\"523\":1,\"524\":2,\"525\":1,\"544\":1}}],[\"接口对实现类是一种强制性的约束\",{\"1\":{\"522\":1}}],[\"接口是可以被多实现的\",{\"1\":{\"521\":1}}],[\"接口是更加彻底的抽象\",{\"1\":{\"513\":1}}],[\"接口3\",{\"1\":{\"521\":1,\"523\":1}}],[\"接口2\",{\"1\":{\"521\":1,\"523\":1}}],[\"接口1\",{\"1\":{\"521\":1,\"523\":1}}],[\"接口中私有方法的定义格式\",{\"1\":{\"551\":1}}],[\"接口中静态方法的注意事项\",{\"1\":{\"549\":1}}],[\"接口中静态方法的定义格式\",{\"1\":{\"549\":1}}],[\"接口中默认方法的注意事项\",{\"1\":{\"548\":1}}],[\"接口中默认方法的定义格式\",{\"1\":{\"548\":1}}],[\"接口中可以定义私有方法\",{\"1\":{\"547\":1}}],[\"接口中可以定义有方法体的方法\",{\"1\":{\"547\":1}}],[\"接口中新增的方法\",{\"0\":{\"547\":1}}],[\"接口中只能定义抽象方法\",{\"1\":{\"527\":1,\"547\":1}}],[\"接口中成员的特点\",{\"0\":{\"527\":1}}],[\"接口中的静态方法\",{\"0\":{\"549\":1}}],[\"接口中的默认方法\",{\"0\":{\"548\":1}}],[\"接口中的抽象方法默认会自动加上public\",{\"1\":{\"516\":1}}],[\"接口中的只有包含\",{\"1\":{\"515\":1}}],[\"接口中全部是抽象方法\",{\"1\":{\"513\":1}}],[\"接口成分的特点\",{\"0\":{\"515\":1}}],[\"接口的细节\",{\"0\":{\"526\":1}}],[\"接口的实现\",{\"1\":{\"521\":1,\"523\":1}}],[\"接口的声明\",{\"1\":{\"514\":1}}],[\"接口的定义格式\",{\"1\":{\"514\":1}}],[\"接口名称\",{\"1\":{\"514\":2}}],[\"接口同样是不能创建对象的\",{\"1\":{\"513\":1}}],[\"接下来定义一个乒乓球运动员类\",{\"1\":{\"523\":1}}],[\"接下来我们来查看一下api文档\",{\"1\":{\"568\":1}}],[\"接下来我们就来演示一下这些取舍模式\",{\"1\":{\"576\":1}}],[\"接下来我们就来演示一些这些方法的执行效果\",{\"1\":{\"557\":1}}],[\"接下来我们就来通过一些案例演示一下这些成员方法的使用\",{\"1\":{\"576\":1}}],[\"接下来我们就来通过一些案例演示一下这些方法的特点\",{\"1\":{\"562\":1,\"567\":1}}],[\"接下来我们就来通过一些案例演示一下objects类中的这些方法特点\",{\"1\":{\"569\":1}}],[\"接下来我们研究一下protected和默认修饰符的作用\",{\"1\":{\"493\":1}}],[\"接下来我们使用调用构造方法格式\",{\"1\":{\"460\":1}}],[\"接下来通过调用构造方法得到两个学生对象\",{\"1\":{\"412\":1}}],[\"接收数据\",{\"1\":{\"130\":2,\"167\":1}}],[\"查询api发现像\",{\"1\":{\"497\":1}}],[\"查询id是否存在\",{\"1\":{\"402\":1}}],[\"查找用户的索引\",{\"0\":{\"401\":1}}],[\"查看源码我们发现supplier是一个函数式接口\",{\"1\":{\"569\":1}}],[\"查看一下system类的成员\",{\"1\":{\"561\":1}}],[\"查看api文档我们可以看到\",{\"1\":{\"566\":1}}],[\"查看api文档\",{\"1\":{\"556\":1,\"561\":1,\"566\":1,\"568\":1,\"571\":1,\"575\":1}}],[\"查看当前路径下的内容\",{\"1\":{\"61\":1}}],[\"查看详情\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1}}],[\"泛型的使用\",{\"1\":{\"390\":1}}],[\"集合\",{\"1\":{\"401\":1,\"402\":1}}],[\"集合和数组的优势对比\",{\"0\":{\"389\":1}}],[\"集成环境\",{\"1\":{\"132\":1}}],[\"添加数据的时候不需要考虑索引\",{\"1\":{\"389\":1}}],[\"添加字符串\",{\"1\":{\"382\":1}}],[\"添加元素\",{\"1\":{\"381\":1,\"385\":2,\"394\":1,\"397\":1}}],[\"链式编程\",{\"0\":{\"382\":1}}],[\"链接\",{\"1\":{\"6\":1,\"18\":1}}],[\"出生年月日\",{\"1\":{\"379\":2}}],[\"出生年\",{\"1\":{\"379\":1}}],[\"区县\",{\"1\":{\"379\":1}}],[\"区分局部变量和成员变量的重名问题\",{\"1\":{\"338\":1}}],[\"区分技巧\",{\"0\":{\"106\":1}}],[\"区分大小写的\",{\"1\":{\"125\":1}}],[\"区分大小写\",{\"1\":{\"76\":1,\"358\":1}}],[\"城市\",{\"1\":{\"379\":1}}],[\"省份\",{\"1\":{\"379\":1}}],[\"身份证的每一位都是有固定的含义\",{\"1\":{\"379\":1}}],[\"身份证信息查看\",{\"0\":{\"379\":1}}],[\"敏感词\",{\"1\":{\"378\":1}}],[\"敏感词会有很多很多\",{\"1\":{\"378\":1}}],[\"敏感词替换\",{\"0\":{\"378\":1}}],[\"替换克隆出来对象中的数组地址值\",{\"1\":{\"567\":1}}],[\"替换\",{\"1\":{\"378\":1}}],[\"截取手机号码中的最后四位\",{\"1\":{\"377\":1}}],[\"截取手机号码中的前三位\",{\"1\":{\"377\":1}}],[\"玖\",{\"1\":{\"376\":1}}],[\"捌\",{\"1\":{\"376\":1}}],[\"柒\",{\"1\":{\"376\":1}}],[\"陆\",{\"1\":{\"376\":1}}],[\"肆\",{\"1\":{\"376\":1}}],[\"让javabean类实现cloneable接口\",{\"1\":{\"567\":1}}],[\"让弹框展示出来\",{\"1\":{\"565\":1}}],[\"让弹框居中\",{\"1\":{\"565\":1}}],[\"让弹框置顶\",{\"1\":{\"565\":1}}],[\"让真正的实砚类继承中间类\",{\"1\":{\"554\":1}}],[\"让代码更容易被他人理解\",{\"1\":{\"554\":1}}],[\"让子类继承这个适配器类\",{\"1\":{\"526\":1}}],[\"让这个适配器类去实现接口\",{\"1\":{\"526\":1}}],[\"让数字跟大写的中文产生一个对应关系\",{\"1\":{\"376\":1}}],[\"让编程变得很简单\",{\"1\":{\"335\":1}}],[\"让编程更简单\",{\"1\":{\"322\":1}}],[\"壹\",{\"1\":{\"376\":4}}],[\"贰\",{\"1\":{\"376\":3}}],[\"元\",{\"1\":{\"376\":1}}],[\"元素\",{\"1\":{\"293\":1,\"378\":1,\"402\":1}}],[\"元素也就是存入到数组中的数据\",{\"1\":{\"275\":1}}],[\"元素4\",{\"1\":{\"274\":1,\"277\":1}}],[\"元素3\",{\"1\":{\"274\":1,\"277\":1}}],[\"元素2\",{\"1\":{\"274\":1,\"277\":1}}],[\"元素1\",{\"1\":{\"274\":1,\"277\":1}}],[\"仟\",{\"1\":{\"376\":1}}],[\"万\",{\"1\":{\"376\":1}}],[\"拾\",{\"1\":{\"376\":2}}],[\"佰\",{\"1\":{\"376\":2}}],[\"插入单位\",{\"1\":{\"376\":1}}],[\"插件来实现\",{\"1\":{\"15\":1}}],[\"零零零贰壹叁伍\",{\"1\":{\"376\":1}}],[\"零\",{\"1\":{\"376\":8}}],[\"零佰零拾零万零仟柒佰捌拾玖元\",{\"1\":{\"375\":1}}],[\"零佰零拾零万贰仟壹佰叁拾伍元\",{\"1\":{\"375\":1}}],[\"去调用父类构造方法\",{\"1\":{\"459\":1}}],[\"去调用父类无参数构造方法\",{\"1\":{\"457\":1}}],[\"去掉刚刚获取的数据\",{\"1\":{\"376\":1}}],[\"去编写另外一段代码\",{\"1\":{\"308\":1}}],[\"叁伍\",{\"1\":{\"376\":1}}],[\"叁\",{\"1\":{\"376\":4}}],[\"伍\",{\"1\":{\"376\":6}}],[\"金额无效\",{\"1\":{\"376\":1}}],[\"金额转换\",{\"0\":{\"374\":1}}],[\"倒着的\",{\"1\":{\"373\":1}}],[\"倒着遍历\",{\"1\":{\"373\":1,\"397\":1}}],[\"倒着遍历并进行拼接就可以了\",{\"1\":{\"373\":1}}],[\"拼接字符串\",{\"0\":{\"384\":1}}],[\"拼接\",{\"1\":{\"377\":1}}],[\"拼接完毕之后产生一个新的字符串\",{\"1\":{\"370\":2}}],[\"拼接左括号\",{\"1\":{\"370\":1}}],[\"zjk\",{\"1\":{\"523\":4}}],[\"z1\",{\"1\":{\"442\":1,\"443\":1}}],[\"zi2\",{\"1\":{\"498\":3}}],[\"zi类中的show2方法执行\",{\"1\":{\"445\":1}}],[\"zi1\",{\"1\":{\"442\":3,\"443\":2}}],[\"zi中的成员方法\",{\"1\":{\"441\":1}}],[\"zi中的成员变量\",{\"1\":{\"441\":1,\"442\":1,\"443\":1}}],[\"zi\",{\"1\":{\"439\":3,\"441\":5,\"442\":2,\"443\":3,\"445\":3,\"446\":5,\"478\":1,\"497\":1}}],[\"zz\",{\"1\":{\"378\":2}}],[\"z\",{\"1\":{\"367\":2,\"439\":6,\"441\":2,\"442\":1,\"443\":1,\"445\":3,\"446\":2}}],[\"zhangsan\",{\"1\":{\"279\":2,\"346\":1,\"400\":1,\"401\":1,\"402\":1,\"562\":1,\"567\":1}}],[\"账户\",{\"1\":{\"361\":1}}],[\"登录失败\",{\"1\":{\"361\":1}}],[\"登录成功\",{\"1\":{\"361\":1}}],[\"登录之后\",{\"1\":{\"360\":1}}],[\"总内存大小\",{\"1\":{\"564\":1}}],[\"总共给三次机会\",{\"1\":{\"360\":1}}],[\"总结\",{\"0\":{\"201\":1,\"467\":1},\"1\":{\"97\":2,\"101\":1,\"106\":1,\"113\":1,\"120\":1,\"171\":1,\"299\":1,\"308\":1,\"331\":1,\"337\":1,\"338\":1,\"343\":1,\"425\":1,\"467\":1,\"471\":1,\"512\":1,\"525\":1,\"537\":1,\"554\":1}}],[\"忽略大小写的比较\",{\"1\":{\"358\":1}}],[\"网络中传输的数据都是以字节的形式进行传输的\",{\"1\":{\"354\":1}}],[\"网址为\",{\"1\":{\"134\":1}}],[\"虽然条目较多\",{\"1\":{\"511\":1,\"526\":1}}],[\"虽然不是关键字\",{\"1\":{\"426\":1}}],[\"虽然内容相同\",{\"1\":{\"355\":1}}],[\"虽然\",{\"1\":{\"353\":1}}],[\"虽然可以实现\",{\"1\":{\"289\":1}}],[\"女\",{\"1\":{\"346\":1,\"379\":2,\"404\":1,\"418\":1}}],[\"女婿啊\",{\"1\":{\"195\":1}}],[\"快捷键\",{\"1\":{\"346\":1,\"397\":1,\"567\":1}}],[\"咱们在课后只要能把这个标准的javabean能自己写出来\",{\"1\":{\"346\":1}}],[\"咱们只要知道其中一点\",{\"1\":{\"206\":1}}],[\"性别为\",{\"1\":{\"379\":3}}],[\"性别\",{\"1\":{\"346\":1,\"379\":1}}],[\"邮箱\",{\"1\":{\"346\":1}}],[\"虚拟机会自动调用构造方法\",{\"1\":{\"343\":1}}],[\"虚拟机会把java语言翻译成操作系统能看得懂的语言\",{\"1\":{\"96\":1}}],[\"任意一个按钮被点击之后\",{\"1\":{\"565\":1}}],[\"任何对象都可以更改该静态变量的值或者访问静态方法\",{\"1\":{\"424\":1}}],[\"任何类定义出来\",{\"1\":{\"343\":1}}],[\"任务列表\",{\"0\":{\"25\":1}}],[\"创造对象的时候\",{\"1\":{\"343\":1}}],[\"创建两个bigdecimal对象\",{\"1\":{\"576\":5}}],[\"创建两个biginteger对象\",{\"1\":{\"572\":1}}],[\"创建两个学生对象\",{\"1\":{\"567\":2,\"569\":1}}],[\"创建新的数组\",{\"1\":{\"567\":1}}],[\"创建原对象并调用clone就可以了\",{\"1\":{\"567\":1}}],[\"创建jlabel对象管理文字并添加到弹框当中\",{\"1\":{\"565\":1}}],[\"创建静态内部类对象\",{\"1\":{\"537\":1}}],[\"创建内部类对象时\",{\"1\":{\"534\":1}}],[\"创建内部类对象\",{\"1\":{\"533\":1}}],[\"创建实现类对象\",{\"1\":{\"523\":1,\"542\":1,\"546\":1}}],[\"创建子类\",{\"1\":{\"509\":1}}],[\"创建子类对象\",{\"1\":{\"441\":1,\"442\":1,\"443\":1,\"449\":1,\"542\":1}}],[\"创建抽象类\",{\"1\":{\"509\":1}}],[\"创建饲养员的对象\",{\"1\":{\"489\":1}}],[\"创建三个对象\",{\"1\":{\"476\":1}}],[\"创建猫的对象\",{\"1\":{\"466\":1}}],[\"创建狗的对象\",{\"1\":{\"466\":1}}],[\"创建用户对象\",{\"1\":{\"401\":1}}],[\"创建学生对象\",{\"1\":{\"400\":1,\"567\":3}}],[\"创建集合对象\",{\"1\":{\"397\":1,\"400\":1,\"401\":1}}],[\"创建集合\",{\"1\":{\"394\":1}}],[\"创建之后里面的内容是可变的\",{\"1\":{\"380\":1,\"385\":1}}],[\"创建的字符串对象\",{\"1\":{\"355\":1}}],[\"创建字符串对象\",{\"1\":{\"354\":1}}],[\"创建一个测试类\",{\"1\":{\"567\":1,\"569\":1}}],[\"创建一个学生类\",{\"1\":{\"567\":1,\"569\":1}}],[\"创建一个学生对象\",{\"1\":{\"412\":1,\"569\":6}}],[\"创建一个弹框对象\",{\"1\":{\"565\":1}}],[\"创建一个存储学生对象的集合\",{\"1\":{\"399\":1}}],[\"创建一个存储字符串的集合\",{\"1\":{\"396\":1}}],[\"创建一个空的集合对象\",{\"1\":{\"392\":1}}],[\"创建一个空白字符串对象\",{\"1\":{\"354\":2}}],[\"创建一个对象\",{\"1\":{\"385\":1}}],[\"创建一个类\",{\"1\":{\"104\":1}}],[\"创建class\",{\"1\":{\"145\":1}}],[\"创建module\",{\"1\":{\"145\":1}}],[\"创建project\",{\"1\":{\"145\":1}}],[\"创建对象并调用方法\",{\"1\":{\"489\":1}}],[\"创建对象并赋值调用\",{\"1\":{\"466\":1}}],[\"创建对象并为其成员变量赋值的两种方式\",{\"1\":{\"345\":1}}],[\"创建对象的格式\",{\"1\":{\"327\":1}}],[\"创建对象\",{\"1\":{\"130\":2,\"167\":1,\"263\":2,\"327\":2,\"328\":1,\"336\":1,\"337\":1,\"340\":2,\"343\":1,\"381\":1,\"382\":1,\"385\":1,\"402\":1,\"423\":1,\"541\":1}}],[\"创建文件夹等\",{\"1\":{\"59\":1}}],[\"系统将不再提供默认的构造方法\",{\"1\":{\"341\":1}}],[\"系统将给出一个默认的无参数构造方法\",{\"1\":{\"341\":1}}],[\"系统会根据元素的个数\",{\"1\":{\"287\":1}}],[\"功能\",{\"1\":{\"340\":1,\"489\":2}}],[\"构造代码块\",{\"0\":{\"502\":1}}],[\"构造\",{\"1\":{\"466\":1}}],[\"构造体代码\",{\"1\":{\"411\":1}}],[\"构造函数\",{\"1\":{\"340\":1}}],[\"构造方法小结\",{\"1\":{\"572\":1}}],[\"构造方法初始化\",{\"1\":{\"500\":1}}],[\"构造方法使用\",{\"1\":{\"494\":1}}],[\"构造方法是否可以被继承\",{\"0\":{\"474\":1}}],[\"构造方法是一种特殊的方法\",{\"1\":{\"340\":1}}],[\"构造方法真正的作用\",{\"1\":{\"343\":1}}],[\"构造方法就是用来创建对象的\",{\"1\":{\"343\":1}}],[\"构造方法存在的误区\",{\"1\":{\"343\":1}}],[\"构造方法有哪些注意事项\",{\"1\":{\"343\":1}}],[\"构造方法有几种\",{\"1\":{\"343\":1}}],[\"构造方法的访问特点\",{\"0\":{\"471\":1}}],[\"构造方法的名字是与类名一致的\",{\"1\":{\"455\":1}}],[\"构造方法的定义格式和作用\",{\"1\":{\"455\":1}}],[\"构造方法的应用\",{\"0\":{\"412\":1}}],[\"构造方法的格式\",{\"0\":{\"411\":1}}],[\"构造方法的方式得到对象\",{\"1\":{\"358\":1}}],[\"构造方法的作用是初始化对象成员变量数据的\",{\"1\":{\"455\":1}}],[\"构造方法的作用\",{\"0\":{\"410\":1},\"1\":{\"343\":1}}],[\"构造方法的执行时机\",{\"0\":{\"343\":1}}],[\"构造方法的特点\",{\"0\":{\"342\":1}}],[\"构造方法的重载\",{\"1\":{\"341\":1}}],[\"构造方法的创建\",{\"1\":{\"341\":1}}],[\"构造方法的注意事项\",{\"0\":{\"341\":1}}],[\"构造方法概述\",{\"0\":{\"340\":1}}],[\"构造方法\",{\"0\":{\"339\":1,\"392\":1,\"409\":1,\"454\":1},\"1\":{\"340\":1,\"345\":1,\"404\":1,\"412\":1,\"510\":1,\"513\":1,\"527\":1}}],[\"测试tostring方法\",{\"1\":{\"569\":1}}],[\"测试equals方法\",{\"1\":{\"569\":1}}],[\"测试isnull方法\",{\"1\":{\"569\":1}}],[\"测试nonnull方法\",{\"1\":{\"569\":1}}],[\"测试代码\",{\"1\":{\"523\":1}}],[\"测试类\",{\"1\":{\"340\":1,\"343\":1,\"435\":1,\"476\":1,\"489\":1,\"509\":1}}],[\"测试类中创建对象并使用\",{\"1\":{\"337\":1}}],[\"测试运行结果\",{\"1\":{\"317\":1}}],[\"少记\",{\"1\":{\"335\":1}}],[\"降低我们的学习成本\",{\"1\":{\"335\":1}}],[\"继承或者实现关系\",{\"1\":{\"541\":1}}],[\"继承关系\",{\"1\":{\"528\":2}}],[\"继承抽象类有哪些要注意\",{\"1\":{\"512\":1}}],[\"继承抽象类的子类必须重写父类所有的抽象方法\",{\"1\":{\"509\":1}}],[\"继承之后\",{\"1\":{\"475\":1}}],[\"继承是面向对象三大特征之一\",{\"1\":{\"472\":1}}],[\"继承中变量\",{\"0\":{\"468\":1}}],[\"继承中成员方法的访问特点\",{\"1\":{\"467\":1}}],[\"继承后子类的特点\",{\"1\":{\"472\":1}}],[\"继承后子类构方法器特点\",{\"1\":{\"455\":1}}],[\"继承后的特点\",{\"0\":{\"440\":1,\"444\":1,\"454\":1}}],[\"继承而来\",{\"1\":{\"441\":1}}],[\"继承实际上是子类相同的属性和行为可以定义在父类中\",{\"1\":{\"436\":1}}],[\"继承案例\",{\"0\":{\"432\":1}}],[\"继承的父类\",{\"1\":{\"526\":1}}],[\"继承的特点\",{\"0\":{\"465\":1}}],[\"继承的格式\",{\"0\":{\"431\":1},\"1\":{\"472\":1}}],[\"继承的好处\",{\"0\":{\"430\":1},\"1\":{\"472\":1}}],[\"继承的含义\",{\"0\":{\"429\":1}}],[\"继承描述的是事物之间的所属关系\",{\"1\":{\"429\":1}}],[\"继承\",{\"1\":{\"335\":1,\"429\":1}}],[\"继续吃下面的包子\",{\"1\":{\"261\":1}}],[\"继续执行下次循环\",{\"1\":{\"261\":2}}],[\"继续执行\",{\"1\":{\"241\":1}}],[\"继续赋值给a\",{\"1\":{\"191\":1}}],[\"封装的步骤实现\",{\"0\":{\"408\":1}}],[\"封装的步骤\",{\"0\":{\"407\":1}}],[\"封装的好处\",{\"1\":{\"335\":1}}],[\"封装代码实现\",{\"1\":{\"335\":1}}],[\"封装概述\",{\"1\":{\"335\":1}}],[\"封装思想\",{\"0\":{\"335\":1}}],[\"封装\",{\"0\":{\"334\":1,\"406\":1},\"1\":{\"335\":1}}],[\"醉着方法的调用完毕而消失\",{\"1\":{\"333\":1}}],[\"生命周期不同\",{\"1\":{\"333\":1}}],[\"生成的equals方法和hashcode方法如下\",{\"1\":{\"567\":1}}],[\"生成的范围\",{\"1\":{\"263\":1}}],[\"生成空参有参构造\",{\"1\":{\"489\":1}}],[\"生成一个随机索引\",{\"1\":{\"296\":1}}],[\"生成一个1\",{\"1\":{\"267\":2}}],[\"生成10个1~100之间的随机数存入数组\",{\"1\":{\"294\":1}}],[\"生成随机数\",{\"1\":{\"263\":2}}],[\"栈内存\",{\"1\":{\"333\":1}}],[\"堆内存\",{\"1\":{\"333\":1}}],[\"基本上在内存撑爆之前\",{\"1\":{\"570\":1}}],[\"基本的实现\",{\"0\":{\"519\":1}}],[\"基本类型的局部变量\",{\"1\":{\"499\":1}}],[\"基本类型\",{\"1\":{\"499\":1}}],[\"基本类型和引用类型对象的默认值\",{\"1\":{\"328\":1}}],[\"基本使用\",{\"0\":{\"381\":1},\"1\":{\"385\":1}}],[\"基本数据类型拷贝过来\",{\"1\":{\"567\":1}}],[\"基本数据类型拷贝过来的是具体的数据\",{\"1\":{\"567\":1}}],[\"基本数据类型占位分析\",{\"0\":{\"210\":1}}],[\"基本数据类型的四类八种\",{\"0\":{\"116\":1},\"1\":{\"120\":1}}],[\"基本数据类型\",{\"1\":{\"115\":1,\"120\":1}}],[\"驼峰模式\",{\"1\":{\"328\":1,\"514\":1}}],[\"林青霞\",{\"1\":{\"328\":1,\"336\":1,\"337\":2,\"343\":2,\"345\":2}}],[\"键盘接受一个字符串\",{\"1\":{\"383\":1}}],[\"键盘敲烂\",{\"1\":{\"328\":1}}],[\"键盘录入用户名和密码\",{\"1\":{\"361\":1}}],[\"键盘录入圆的半径\",{\"1\":{\"311\":1}}],[\"键盘录入两个圆的半径\",{\"1\":{\"311\":2}}],[\"键盘录入两个数字\",{\"1\":{\"245\":1}}],[\"键盘录入星期数\",{\"1\":{\"236\":1,\"238\":2}}],[\"键盘录入票号\",{\"1\":{\"230\":1}}],[\"键盘录入一个\",{\"1\":{\"378\":1}}],[\"键盘录入一个手机号码\",{\"1\":{\"377\":1}}],[\"键盘录入一个金额\",{\"1\":{\"376\":1}}],[\"键盘录入一个字符串\",{\"1\":{\"363\":1,\"364\":1,\"366\":1,\"367\":2,\"372\":1,\"373\":1,\"383\":1}}],[\"键盘录入一个正整数\",{\"1\":{\"266\":3}}],[\"键盘录入一个大于等于2的整数\",{\"1\":{\"265\":2}}],[\"键盘录入一个值表示小明的分数\",{\"1\":{\"232\":1}}],[\"键盘录入一个整数表示星期\",{\"1\":{\"236\":1}}],[\"键盘录入一个整数表示电影票的票号\",{\"1\":{\"230\":1}}],[\"键盘录入一个整数\",{\"1\":{\"226\":2,\"229\":2,\"265\":1}}],[\"键盘录入一个三位数\",{\"1\":{\"167\":2}}],[\"键盘录入女婿的酒量\",{\"1\":{\"225\":2}}],[\"键盘录入的实际功能java已经帮我们写好了\",{\"1\":{\"130\":1}}],[\"键盘录入\",{\"0\":{\"130\":1},\"1\":{\"372\":1,\"373\":1}}],[\"天天向上\",{\"1\":{\"328\":1}}],[\"好好学习\",{\"1\":{\"328\":1}}],[\"好好吃一顿\",{\"1\":{\"236\":2}}],[\"做一些数据初始化的时候使用\",{\"1\":{\"503\":1}}],[\"做作业\",{\"1\":{\"328\":1}}],[\"做左边第一位为符号位\",{\"1\":{\"207\":1}}],[\"姓名\",{\"1\":{\"328\":1,\"428\":4,\"433\":3,\"456\":2,\"466\":4,\"489\":1,\"567\":1,\"569\":1}}],[\"学生的信息为\",{\"1\":{\"476\":1}}],[\"学生睡觉\",{\"1\":{\"423\":1}}],[\"学生可以跑步\",{\"1\":{\"423\":1}}],[\"学生类\",{\"1\":{\"336\":1,\"337\":1,\"343\":1,\"428\":2,\"433\":1,\"434\":1,\"456\":1}}],[\"学生测试类\",{\"1\":{\"328\":1,\"336\":1,\"337\":1}}],[\"学生对象\",{\"0\":{\"328\":1}}],[\"学习了继承后\",{\"1\":{\"495\":1}}],[\"学习\",{\"1\":{\"328\":1}}],[\"学习如何自己设计对象并使用\",{\"1\":{\"323\":1}}],[\"学习获取已有的对象并使用\",{\"1\":{\"323\":1}}],[\"行为\",{\"1\":{\"325\":1,\"326\":1,\"404\":1,\"423\":1,\"428\":4,\"433\":3,\"489\":5}}],[\"尺寸\",{\"1\":{\"325\":1}}],[\"价格\",{\"1\":{\"325\":1,\"326\":1}}],[\"品牌\",{\"1\":{\"325\":1,\"326\":1}}],[\"属于外部类本身的\",{\"1\":{\"537\":1}}],[\"属于外部类对象的\",{\"1\":{\"533\":2}}],[\"属于每个对象\",{\"1\":{\"423\":1}}],[\"属于类\",{\"1\":{\"420\":1,\"422\":1}}],[\"属于多种判断\",{\"1\":{\"232\":1}}],[\"属性\",{\"1\":{\"325\":1,\"326\":1,\"404\":1,\"428\":4,\"433\":3,\"466\":2,\"489\":3}}],[\"客观存在的事物皆为对象\",{\"1\":{\"325\":1}}],[\"客服电话中0~9的功能选择就可以用switch\",{\"1\":{\"237\":1}}],[\"更方便的展示对象中的属性值\",{\"1\":{\"567\":2}}],[\"更多的是创建object类的某个子类对象\",{\"1\":{\"566\":1}}],[\"更别说运行了\",{\"1\":{\"482\":1,\"485\":1}}],[\"更好理解\",{\"1\":{\"322\":1}}],[\"更新时间等页面元信息\",{\"1\":{\"9\":1}}],[\"更新时间\",{\"1\":{\"6\":1}}],[\"找到索引选项卡中的输入框\",{\"1\":{\"350\":1}}],[\"找对象\",{\"1\":{\"335\":1}}],[\"找\",{\"1\":{\"321\":1}}],[\"找系统变量里面的path\",{\"1\":{\"63\":2}}],[\"拿东西过来做对应的事情\",{\"1\":{\"321\":1}}],[\"拿\",{\"1\":{\"321\":1}}],[\"拿着每一个元素跟number比较\",{\"1\":{\"320\":1}}],[\"拿着每一个元素跟max进行比较\",{\"1\":{\"293\":1}}],[\"拿着随机索引指向的元素\",{\"1\":{\"296\":1}}],[\"拿着数字的平方跟原来的数字进行比较\",{\"1\":{\"265\":1}}],[\"拿着序号\",{\"1\":{\"166\":1}}],[\"面向\",{\"1\":{\"321\":1}}],[\"面向对象编程到底学什么\",{\"1\":{\"321\":1}}],[\"面向对象编程\",{\"1\":{\"321\":1}}],[\"面向对象的第三大特性\",{\"1\":{\"475\":1}}],[\"面向对象的语法\",{\"1\":{\"323\":1}}],[\"面向对象的一个介绍\",{\"1\":{\"321\":1}}],[\"面向对象的时候再深入学习\",{\"1\":{\"115\":1}}],[\"面向对象\",{\"1\":{\"95\":1}}],[\"兼容全整数类型\",{\"1\":{\"317\":1}}],[\"顺序和大小写\",{\"1\":{\"355\":1}}],[\"顺序不同\",{\"1\":{\"316\":1}}],[\"顺序\",{\"1\":{\"316\":1}}],[\"顺序结构执行流程图\",{\"1\":{\"222\":1}}],[\"顺序结构是程序中最简单最基本的流程控制\",{\"1\":{\"222\":1}}],[\"顺序结构\",{\"0\":{\"222\":1},\"1\":{\"221\":1}}],[\"修饰的类是抽象类\",{\"1\":{\"506\":1}}],[\"修饰的方法是抽象方法\",{\"1\":{\"506\":1}}],[\"修饰变量\",{\"0\":{\"499\":1,\"500\":1}}],[\"修饰方法\",{\"0\":{\"498\":1}}],[\"修饰类\",{\"0\":{\"497\":1}}],[\"修饰父类成员变量\",{\"1\":{\"443\":1}}],[\"修饰成员变量或者成员方法时\",{\"1\":{\"424\":1}}],[\"修饰符\",{\"1\":{\"314\":1,\"328\":1,\"340\":1,\"404\":1,\"411\":1,\"420\":1,\"498\":1,\"507\":1,\"538\":1}}],[\"修改指定索引处的元素\",{\"1\":{\"393\":1,\"394\":1}}],[\"修改指定索引上对应的元素\",{\"1\":{\"283\":1}}],[\"修改之后为\",{\"1\":{\"283\":1}}],[\"修改数组中对应索引上的值\",{\"1\":{\"282\":1}}],[\"修改jdk版本和编译版本都变成jdk14\",{\"1\":{\"162\":1}}],[\"修改项目\",{\"0\":{\"162\":1},\"1\":{\"159\":1}}],[\"修改模块\",{\"0\":{\"156\":1},\"1\":{\"153\":1}}],[\"修改类名\",{\"0\":{\"150\":1}}],[\"修改类文件\",{\"1\":{\"148\":1}}],[\"修改完毕点击next\",{\"1\":{\"135\":1}}],[\"修改记录的值\",{\"1\":{\"113\":1}}],[\"修改名称为helloworld\",{\"1\":{\"72\":1}}],[\"半径\",{\"1\":{\"311\":1}}],[\"心得\",{\"1\":{\"310\":1,\"311\":1}}],[\"赋值\",{\"1\":{\"345\":2,\"412\":2}}],[\"赋值才能使用\",{\"1\":{\"333\":1}}],[\"赋值调用\",{\"1\":{\"308\":1}}],[\"赋值给另一个取值范围大的变量\",{\"1\":{\"168\":1}}],[\"返回较大值\",{\"1\":{\"572\":2}}],[\"返回由supplier所提供的值\",{\"1\":{\"569\":1}}],[\"返回该对象\",{\"1\":{\"569\":2}}],[\"返回该对象的字符串表示形式\",{\"1\":{\"567\":1}}],[\"返回a的b次幂的值\",{\"1\":{\"557\":1}}],[\"返回两个int值中的较小值\",{\"1\":{\"557\":1}}],[\"返回两个int值中的较大值\",{\"1\":{\"557\":1}}],[\"返回一个\",{\"1\":{\"557\":1}}],[\"返回小于或等于参数的最大整数\",{\"1\":{\"557\":2}}],[\"返回大于或等于参数的最小整数\",{\"1\":{\"557\":2}}],[\"返回参数的绝对值\",{\"1\":{\"557\":2}}],[\"返回false\",{\"1\":{\"402\":1,\"487\":1}}],[\"返回true\",{\"1\":{\"402\":1,\"487\":1}}],[\"返回索引\",{\"1\":{\"401\":2}}],[\"返回删除是否成功\",{\"1\":{\"394\":1}}],[\"返回集合中的元素的个数\",{\"1\":{\"393\":1,\"394\":1}}],[\"返回指定索引处的元素\",{\"1\":{\"393\":1,\"394\":1}}],[\"返回被修改的元素\",{\"1\":{\"393\":1,\"394\":1}}],[\"返回被删除的元素\",{\"1\":{\"393\":1,\"394\":1}}],[\"返回值为double的正值\",{\"1\":{\"557\":1}}],[\"返回值\",{\"1\":{\"453\":1}}],[\"返回值表示是否删除成功\",{\"1\":{\"393\":1}}],[\"返回值类型子类必须小于等于父类\",{\"1\":{\"453\":1}}],[\"返回值类型\",{\"1\":{\"308\":1,\"314\":2,\"319\":1,\"448\":1,\"451\":1,\"498\":1,\"507\":1,\"512\":1,\"538\":1,\"548\":1,\"549\":1,\"551\":2}}],[\"返回结果\",{\"1\":{\"376\":1}}],[\"返回\",{\"1\":{\"320\":1,\"401\":2}}],[\"返回顶部按钮\",{\"1\":{\"6\":1,\"9\":1}}],[\"决定了上方的按钮是否展示\",{\"1\":{\"565\":1}}],[\"决定了返回值\",{\"1\":{\"310\":1}}],[\"决定了形参\",{\"1\":{\"310\":1}}],[\"决定了方法体\",{\"1\":{\"310\":1}}],[\"决定形式参数\",{\"1\":{\"305\":1}}],[\"决定方法体\",{\"1\":{\"305\":1}}],[\"实现步骤\",{\"1\":{\"567\":2,\"569\":1}}],[\"实现对应的接口\",{\"1\":{\"554\":1}}],[\"实现关系\",{\"1\":{\"528\":1}}],[\"实现了一个接口\",{\"1\":{\"526\":1}}],[\"实现的接口\",{\"1\":{\"526\":1}}],[\"实现的动作类似继承\",{\"1\":{\"520\":1}}],[\"实现接口\",{\"1\":{\"523\":1}}],[\"实现接口的实现类代码如下\",{\"1\":{\"523\":1}}],[\"实现接口的类称为实现类\",{\"1\":{\"521\":1,\"523\":1}}],[\"实现接口的格式\",{\"0\":{\"521\":1}}],[\"实现接口的概述\",{\"0\":{\"520\":1}}],[\"实现类\",{\"1\":{\"544\":1}}],[\"实现类zi\",{\"1\":{\"526\":1}}],[\"实现类可以继承一个抽象类的同时\",{\"1\":{\"526\":1}}],[\"实现类能不能继承一个抽象类的时候\",{\"1\":{\"526\":1}}],[\"实现类能不能继承a类的时候\",{\"1\":{\"526\":1}}],[\"实现类的格式\",{\"1\":{\"521\":1,\"523\":1}}],[\"实现类构造器\",{\"1\":{\"475\":1}}],[\"实现使用\",{\"1\":{\"520\":1}}],[\"实现字符串反转\",{\"1\":{\"372\":1,\"373\":1}}],[\"实例变量和实例方法必须创建类的对象\",{\"1\":{\"424\":1}}],[\"实例变量\",{\"1\":{\"423\":1}}],[\"实例变量及其访问\",{\"0\":{\"421\":1}}],[\"实例方法\",{\"1\":{\"423\":3,\"424\":1,\"510\":1}}],[\"实例方法是属于每个对象\",{\"1\":{\"423\":1}}],[\"实例方法及其访问\",{\"0\":{\"423\":1}}],[\"实例成员变量\",{\"1\":{\"421\":1}}],[\"实例成员变量属于每个对象\",{\"1\":{\"421\":1}}],[\"实参\",{\"1\":{\"305\":1}}],[\"实际开发中建议还是一个文件定义一个class类\",{\"1\":{\"328\":1}}],[\"实际开发中\",{\"1\":{\"299\":2,\"378\":1}}],[\"实际出现的是数组的地址值\",{\"1\":{\"280\":1}}],[\"实际上\",{\"1\":{\"542\":1}}],[\"实际上都是属于人类的\",{\"1\":{\"434\":1}}],[\"实际上相当于\",{\"1\":{\"191\":1}}],[\"实际上是跟变量里面的值进行拼接\",{\"1\":{\"180\":1}}],[\"例如animal是一个动物类型\",{\"1\":{\"475\":1}}],[\"例如现在我们需要定义传智全部的学生类\",{\"1\":{\"420\":1}}],[\"例如name\",{\"1\":{\"418\":1}}],[\"例如\",{\"1\":{\"305\":2,\"318\":2,\"325\":2,\"352\":1,\"369\":1,\"370\":1,\"372\":1,\"373\":1,\"384\":1,\"404\":1,\"405\":1,\"429\":1,\"449\":1,\"490\":2}}],[\"例如getmax\",{\"1\":{\"302\":2,\"306\":2}}],[\"缺少任意一个程序将报错\",{\"1\":{\"304\":1}}],[\"带子类加父类所有的属性\",{\"1\":{\"466\":1}}],[\"带参构造\",{\"1\":{\"466\":1}}],[\"带参数方法练习\",{\"0\":{\"306\":1}}],[\"带参数方法定义和调用\",{\"0\":{\"303\":1,\"304\":1}}],[\"带全部参数的构造\",{\"1\":{\"346\":2,\"476\":1}}],[\"带全部参数的构造方法\",{\"1\":{\"344\":1}}],[\"带着一些问题进行学习\",{\"1\":{\"321\":1}}],[\"带返回值方法练习3\",{\"0\":{\"311\":1}}],[\"带返回值方法练习2\",{\"0\":{\"310\":1}}],[\"带返回值方法练习1\",{\"0\":{\"309\":1}}],[\"带返回值方法定义和调用\",{\"0\":{\"308\":1}}],[\"带返回值方法的定义和调用\",{\"0\":{\"307\":1}}],[\"带小数的数字\",{\"1\":{\"105\":1}}],[\"设计模式就是各种套路\",{\"1\":{\"554\":1}}],[\"设计模式\",{\"1\":{\"554\":1}}],[\"设计比较两个整数是否相同的方法\",{\"1\":{\"317\":1}}],[\"设计一个方法用于获取数组中元素的最大值\",{\"1\":{\"319\":1}}],[\"设计一个方法用于数组遍历\",{\"1\":{\"318\":2}}],[\"设计一个方法用于打印两个数中的较大数\",{\"1\":{\"302\":1,\"306\":1}}],[\"设计一个方法可以获取两个数的较大值\",{\"1\":{\"309\":1}}],[\"设置关闭模式\",{\"1\":{\"565\":1}}],[\"设置标题\",{\"1\":{\"565\":1}}],[\"设置宽高\",{\"1\":{\"565\":1}}],[\"设置完毕后点击右下角的ok\",{\"1\":{\"146\":1}}],[\"设置\",{\"0\":{\"88\":1},\"1\":{\"562\":2,\"567\":5}}],[\"调方法就行\",{\"1\":{\"335\":1}}],[\"调用objects对象的requirenonnull方法\",{\"1\":{\"569\":1}}],[\"调用objects对象的requirenonnullelse方法\",{\"1\":{\"569\":1}}],[\"调用objects对象的requirenonnullelseget方法\",{\"1\":{\"569\":1}}],[\"调用objects中的tostring方法\",{\"1\":{\"569\":1}}],[\"调用objects类中的equals方法\",{\"1\":{\"569\":1}}],[\"调用objects类中的isnull方法\",{\"1\":{\"569\":1}}],[\"调用objects类中的nonnull方法\",{\"1\":{\"569\":1}}],[\"调用equals方法比较两个对象是否相等\",{\"1\":{\"567\":1}}],[\"调用s1的tostring方法\",{\"1\":{\"567\":1}}],[\"调用show方法\",{\"1\":{\"336\":1}}],[\"调用tostring方法获取s1对象的字符串表现形式\",{\"1\":{\"567\":1}}],[\"调用其对应的方法\",{\"1\":{\"566\":1}}],[\"调用其他构造器\",{\"1\":{\"502\":1}}],[\"调用重写后的方法\",{\"1\":{\"542\":1}}],[\"调用静态方法的格式\",{\"1\":{\"537\":1}}],[\"调用非静态方法的格式\",{\"1\":{\"537\":1}}],[\"调用抽象的方法\",{\"1\":{\"511\":2}}],[\"调用的是\",{\"1\":{\"485\":2,\"486\":2,\"487\":3}}],[\"调用成员方法时\",{\"1\":{\"478\":1}}],[\"调用成员变量时\",{\"1\":{\"478\":1}}],[\"调用成员的格式\",{\"1\":{\"327\":1}}],[\"调用本类的其他构造方法\",{\"1\":{\"460\":1}}],[\"调用父类中的方法克隆对象\",{\"1\":{\"567\":1}}],[\"调用父类中的clone方法\",{\"1\":{\"567\":1}}],[\"调用父类的空参构造\",{\"1\":{\"461\":1,\"464\":1}}],[\"调用父类的构造方法\",{\"1\":{\"460\":1}}],[\"调用父类有参构造方法person\",{\"1\":{\"461\":1}}],[\"调用父类无参构造方法\",{\"1\":{\"459\":2,\"461\":1}}],[\"调用父类无参\",{\"1\":{\"456\":2}}],[\"调用父类继承而来的方法\",{\"1\":{\"449\":1}}],[\"调用子类有参数构造方法\",{\"1\":{\"459\":1,\"461\":1}}],[\"调用子类重写的方法\",{\"1\":{\"449\":1}}],[\"调用子类中的show方法\",{\"1\":{\"441\":1,\"442\":1,\"443\":1}}],[\"调用该方法后\",{\"1\":{\"372\":1,\"373\":1}}],[\"调用该方法\",{\"1\":{\"369\":1,\"370\":1,\"384\":1}}],[\"调用处是否需要继续使用\",{\"1\":{\"320\":1}}],[\"调用处是否需要使用方法的结果\",{\"1\":{\"318\":1}}],[\"调用获取最大值方法\",{\"1\":{\"319\":1}}],[\"调用方式参照标准格式\",{\"1\":{\"316\":1}}],[\"调用方法进行b1和b2的除法运算\",{\"1\":{\"576\":4}}],[\"调用方法进行b1和b2的四则运算\",{\"1\":{\"576\":1}}],[\"调用方法的格式\",{\"1\":{\"537\":1}}],[\"调用方法的时候\",{\"1\":{\"306\":1}}],[\"调用方法把数组变成字符串\",{\"1\":{\"384\":1}}],[\"调用方法\",{\"1\":{\"317\":1,\"401\":1,\"402\":1,\"542\":1,\"569\":2,\"576\":1}}],[\"调用方法时的注意\",{\"1\":{\"314\":1}}],[\"调用方法时候使用的标识\",{\"1\":{\"314\":1}}],[\"调用格式\",{\"1\":{\"301\":1,\"304\":1,\"308\":1}}],[\"调试等多种功能综合到一起的开发工具\",{\"1\":{\"132\":1}}],[\"具体的操作如下所示\",{\"1\":{\"567\":1}}],[\"具体步骤如下所示\",{\"1\":{\"567\":1}}],[\"具体实现交给子类自己去实现\",{\"1\":{\"505\":1}}],[\"具有多个不同表现形式\",{\"1\":{\"477\":1}}],[\"具有独立功能的代码可以抽取到方法中\",{\"1\":{\"299\":1}}],[\"具备解决bug的能力\",{\"1\":{\"75\":1}}],[\"具备分析bug的能力\",{\"1\":{\"75\":1}}],[\"具备识别bug的能力\",{\"1\":{\"75\":1}}],[\"植物大战僵尸\",{\"1\":{\"299\":1}}],[\"才能有儿子\",{\"1\":{\"455\":1}}],[\"才能断定id是不存在的\",{\"1\":{\"401\":1}}],[\"才可以给子类使用\",{\"1\":{\"455\":1}}],[\"才会创建一个新的\",{\"1\":{\"386\":1}}],[\"才会去看右边有没有车\",{\"1\":{\"200\":1}}],[\"才执行\",{\"1\":{\"299\":1}}],[\"交给具体的子类去实现\",{\"1\":{\"511\":1}}],[\"交给计算机执行的文件\",{\"1\":{\"72\":1}}],[\"交换变量i和变量j指向的元素\",{\"1\":{\"295\":1}}],[\"交换后\",{\"1\":{\"295\":1}}],[\"交换前\",{\"1\":{\"295\":1}}],[\"交换数据\",{\"0\":{\"295\":1}}],[\"临时认为0索引的数据是最大的\",{\"1\":{\"293\":1}}],[\"扩大两倍\",{\"1\":{\"292\":1}}],[\"扩展内容讲解\",{\"1\":{\"338\":1}}],[\"扩展问题\",{\"1\":{\"293\":1}}],[\"扩展的赋值运算符中隐层还包含了一个强制转换\",{\"1\":{\"191\":2}}],[\"扩展赋值运算符\",{\"1\":{\"190\":1}}],[\"扩展一个小点\",{\"1\":{\"61\":1}}],[\"扩展\",{\"0\":{\"15\":1,\"16\":1},\"1\":{\"16\":1}}],[\"则类中可能包含抽象方法\",{\"1\":{\"511\":1}}],[\"则不强转\",{\"1\":{\"488\":1}}],[\"则强转成dog类型\",{\"1\":{\"488\":1}}],[\"则编译错误\",{\"1\":{\"482\":1,\"485\":1}}],[\"则子类可以随意使用父类成员\",{\"1\":{\"462\":1}}],[\"则创建子类对象调用该方法的时候\",{\"1\":{\"446\":1}}],[\"则使用\",{\"1\":{\"378\":1}}],[\"则将当前数字变成二分之一\",{\"1\":{\"292\":1}}],[\"则将当前数字扩大两倍\",{\"1\":{\"292\":1}}],[\"则点击overwrite\",{\"1\":{\"157\":1}}],[\"累加求和\",{\"1\":{\"290\":1}}],[\"避免\",{\"1\":{\"289\":1}}],[\"避免出现helloworld\",{\"1\":{\"76\":1}}],[\"推荐的使用方式\",{\"1\":{\"341\":1}}],[\"推荐用变量接收调用\",{\"1\":{\"314\":1}}],[\"推荐使用静态初始化\",{\"1\":{\"288\":1}}],[\"推荐使用动态初始化\",{\"1\":{\"288\":1}}],[\"推断\",{\"1\":{\"265\":2}}],[\"手动调用父类构造会覆盖默认的super\",{\"1\":{\"461\":1,\"464\":1}}],[\"手动指定数组长度\",{\"1\":{\"287\":1}}],[\"手动指定数组的元素\",{\"1\":{\"287\":1}}],[\"手机号屏蔽\",{\"0\":{\"377\":1}}],[\"手机类\",{\"1\":{\"326\":1}}],[\"手机事物\",{\"1\":{\"325\":2}}],[\"手机品牌\",{\"1\":{\"123\":1}}],[\"手机价格\",{\"1\":{\"123\":1}}],[\"手机\",{\"1\":{\"93\":1,\"326\":1}}],[\"up\",{\"1\":{\"576\":5}}],[\"u=\",{\"1\":{\"567\":1}}],[\"uid\",{\"1\":{\"401\":2,\"402\":2}}],[\"u\",{\"1\":{\"401\":2,\"402\":2,\"567\":2}}],[\"u3\",{\"1\":{\"401\":2,\"402\":2}}],[\"u2\",{\"1\":{\"346\":7,\"401\":2,\"402\":2,\"567\":2}}],[\"u1\",{\"1\":{\"346\":12,\"401\":2,\"402\":2,\"567\":5}}],[\"username\",{\"1\":{\"346\":9,\"361\":3,\"401\":2,\"402\":1,\"567\":11}}],[\"user\",{\"1\":{\"346\":7,\"401\":7,\"402\":7,\"567\":13}}],[\"u0000\",{\"1\":{\"287\":1}}],[\"util包下\",{\"1\":{\"568\":1}}],[\"util\",{\"1\":{\"130\":1,\"236\":1,\"263\":2,\"311\":1,\"376\":1,\"567\":1}}],[\"考完才知道\",{\"1\":{\"286\":1}}],[\"考试成绩暂时未知\",{\"1\":{\"286\":1}}],[\"考试奖励\",{\"0\":{\"226\":1,\"232\":1}}],[\"存在相同\",{\"1\":{\"472\":1}}],[\"存在类和对象的概念\",{\"1\":{\"418\":1}}],[\"存入三个用户对象\",{\"1\":{\"401\":2,\"402\":1}}],[\"存入1~5\",{\"1\":{\"296\":1}}],[\"存入1\",{\"1\":{\"295\":1}}],[\"存储方式如图所示\",{\"1\":{\"573\":1}}],[\"存储在数组中\",{\"1\":{\"573\":1}}],[\"存储于一块固定的内存区域\",{\"1\":{\"424\":1}}],[\"存储3个学生对象\",{\"1\":{\"399\":1}}],[\"存储3个字符串元素\",{\"1\":{\"396\":1}}],[\"存储的数据容量可以发生改变\",{\"1\":{\"390\":1}}],[\"存储1\",{\"1\":{\"290\":2,\"291\":2,\"292\":1}}],[\"存1\",{\"1\":{\"292\":1}}],[\"存班级10名学生的考试成绩\",{\"1\":{\"286\":1}}],[\"存3个人的年龄\",{\"1\":{\"286\":1}}],[\"通常在方法的形式参数是接口或者抽象类时\",{\"1\":{\"546\":1}}],[\"通常用于某些特殊的类结构设计\",{\"1\":{\"511\":1}}],[\"通常编码时\",{\"1\":{\"443\":1}}],[\"通用代码\",{\"1\":{\"284\":1}}],[\"通过查看api文档\",{\"1\":{\"576\":1}}],[\"通过源码我们可以发现默认情况下equals方法比较的也是对象的地址值\",{\"1\":{\"567\":1}}],[\"通过控制台输出结果我们可以看到此时多出了一个56元素\",{\"1\":{\"562\":1}}],[\"通过控制台输出结果我们可以看到\",{\"1\":{\"562\":1}}],[\"通过api文档来\",{\"1\":{\"561\":1}}],[\"通过api文档来查看\",{\"1\":{\"556\":1}}],[\"通过getter\",{\"1\":{\"439\":1}}],[\"通过id获取对应的索引\",{\"1\":{\"401\":1}}],[\"通过构造方法创建\",{\"1\":{\"355\":1}}],[\"通过官方网站获取jdk\",{\"1\":{\"67\":1}}],[\"通过\",{\"1\":{\"14\":1,\"17\":1,\"355\":1,\"431\":1}}],[\"遍历得到里面的每一个字符\",{\"1\":{\"577\":1}}],[\"遍历srcarray数组\",{\"1\":{\"562\":2}}],[\"遍历目标数组\",{\"1\":{\"562\":1}}],[\"遍历集合得到每一个元素\",{\"1\":{\"401\":1}}],[\"遍历moneystr\",{\"1\":{\"376\":1}}],[\"遍历arr得到每一个元素\",{\"1\":{\"320\":1}}],[\"遍历数组arr2\",{\"1\":{\"562\":1}}],[\"遍历数组\",{\"1\":{\"292\":1,\"294\":1}}],[\"遍历数组得到每一个数据\",{\"1\":{\"290\":1}}],[\"遍历数组得到每一个元素\",{\"1\":{\"290\":2,\"291\":2,\"292\":2}}],[\"遍历\",{\"1\":{\"284\":1,\"364\":1,\"397\":1,\"400\":1}}],[\"逐个+1增长\",{\"1\":{\"284\":1}}],[\"原因是\",{\"1\":{\"483\":1}}],[\"原来的值就会被覆盖了\",{\"1\":{\"282\":1}}],[\"原码\",{\"0\":{\"207\":1},\"1\":{\"207\":1}}],[\"索引的范围\",{\"1\":{\"289\":1,\"364\":1}}],[\"索引的特点\",{\"0\":{\"284\":1}}],[\"索引一定是从0开始的\",{\"1\":{\"284\":1}}],[\"索引\",{\"1\":{\"281\":1,\"283\":1,\"293\":1,\"294\":1,\"378\":1,\"402\":1}}],[\"地方向上相应代码\",{\"1\":{\"535\":1}}],[\"地址值\",{\"1\":{\"414\":1}}],[\"地址值对于我们来京\",{\"1\":{\"280\":1}}],[\"地球的年龄\",{\"1\":{\"118\":1}}],[\"给弹框设置大小\",{\"1\":{\"565\":1}}],[\"给你一点小惩罚\",{\"1\":{\"565\":1}}],[\"给好基友一个弹框\",{\"1\":{\"565\":4}}],[\"给静态方法服务\",{\"1\":{\"551\":1}}],[\"给默认方法服务\",{\"1\":{\"551\":1}}],[\"给引用变量做类型的校验\",{\"1\":{\"487\":1}}],[\"给出相应的提示\",{\"1\":{\"360\":1}}],[\"给出不同的提示\",{\"1\":{\"230\":1}}],[\"给成员变量进行初始化\",{\"1\":{\"410\":1}}],[\"给成员变量进行初始化的\",{\"1\":{\"343\":1}}],[\"给成员变量赋值\",{\"1\":{\"336\":1}}],[\"给数组限定什么类型\",{\"1\":{\"278\":1,\"279\":1,\"280\":1}}],[\"等\",{\"1\":{\"497\":1}}],[\"等是存在所属性的\",{\"1\":{\"418\":1}}],[\"等循环结束之后\",{\"1\":{\"370\":1}}],[\"等同于使用变量或常量\",{\"1\":{\"305\":1}}],[\"等同于变量定义格式\",{\"1\":{\"305\":1}}],[\"等号前后的数据类型必须保持一致\",{\"1\":{\"276\":1}}],[\"等进度条读取完毕之后\",{\"1\":{\"135\":1}}],[\"完美方案\",{\"1\":{\"546\":1}}],[\"完全没有必要用对象去访问\",{\"1\":{\"424\":1}}],[\"完整格式\",{\"0\":{\"274\":1}}],[\"完成以下打印效果\",{\"1\":{\"489\":1}}],[\"完成功能的代码块\",{\"1\":{\"314\":1}}],[\"完成编译运行\",{\"1\":{\"145\":1}}],[\"完成步骤\",{\"1\":{\"62\":1}}],[\"限定了数组以后能存什么类型的数据\",{\"1\":{\"272\":1,\"275\":2}}],[\"限定了变量当中能存储什么类型的数据\",{\"1\":{\"110\":1}}],[\"详解\",{\"0\":{\"272\":1},\"1\":{\"534\":1}}],[\"详情容器\",{\"1\":{\"18\":1}}],[\"容器的类\",{\"1\":{\"269\":1}}],[\"指定关机时间\",{\"1\":{\"564\":1}}],[\"指定时间\",{\"1\":{\"564\":1}}],[\"指子类对象继承的父类类型\",{\"1\":{\"477\":1}}],[\"指的就是\",{\"1\":{\"349\":1}}],[\"指的是一种容器\",{\"1\":{\"269\":1}}],[\"指事物能执行的操作\",{\"1\":{\"325\":1}}],[\"指事物的特征\",{\"1\":{\"325\":1}}],[\"指向的元素进行交换\",{\"1\":{\"296\":1}}],[\"指南\",{\"2\":{\"10\":1}}],[\"猜中了\",{\"1\":{\"267\":1}}],[\"猜数字小游戏\",{\"0\":{\"267\":1}}],[\"恭喜你\",{\"1\":{\"267\":1}}],[\"您猜的数字小了\",{\"1\":{\"267\":1}}],[\"您猜的数字大了\",{\"1\":{\"267\":1}}],[\"比赛\",{\"1\":{\"523\":1}}],[\"比的是地址值是否相等\",{\"1\":{\"386\":1}}],[\"比的是具体的数值是否相等\",{\"1\":{\"386\":1}}],[\"比平均数小\",{\"1\":{\"294\":1}}],[\"比较是否相同\",{\"1\":{\"572\":3}}],[\"比较对象的地址值是没有意义的\",{\"1\":{\"567\":1}}],[\"比较内存地址值一般情况下是没有意义的\",{\"1\":{\"567\":1}}],[\"比较字符串内容是否相同\",{\"1\":{\"358\":1}}],[\"比较字符串对象地址是否相同\",{\"1\":{\"358\":1}}],[\"比较两个对象是否相等\",{\"1\":{\"567\":1,\"569\":2}}],[\"比较两个对象地址值是否相等\",{\"1\":{\"567\":1}}],[\"比较两个字符串内容是否相同\",{\"1\":{\"358\":1}}],[\"比较两个圆的面积\",{\"1\":{\"311\":2}}],[\"比较的是对象的name属性值和age属性值\",{\"1\":{\"567\":1}}],[\"比较的是对象地址值\",{\"1\":{\"357\":1}}],[\"比较的是具体的值\",{\"1\":{\"357\":1}}],[\"比较引用数据类型\",{\"1\":{\"357\":1}}],[\"比较基本数据类型\",{\"1\":{\"357\":1}}],[\"比较\",{\"1\":{\"267\":1,\"383\":1}}],[\"比如二进制中\",{\"1\":{\"572\":1}}],[\"比如判断对象是否相等\",{\"1\":{\"568\":1}}],[\"比如获取当前时间所对应的毫秒值\",{\"1\":{\"561\":1}}],[\"比如学生的吃饭\",{\"1\":{\"346\":1}}],[\"比如javac\",{\"1\":{\"82\":1}}],[\"比如\",{\"1\":{\"59\":1,\"118\":2,\"127\":2,\"128\":2,\"165\":1,\"166\":1,\"184\":2,\"187\":3,\"237\":1,\"263\":1,\"269\":1,\"270\":1,\"271\":1,\"274\":1,\"277\":1,\"495\":1,\"534\":1}}],[\"思路\",{\"1\":{\"302\":1,\"306\":1,\"309\":1,\"317\":1,\"318\":1,\"319\":1}}],[\"思路分析\",{\"1\":{\"267\":1}}],[\"思考\",{\"1\":{\"200\":2,\"489\":1,\"499\":1}}],[\"依次得到\",{\"1\":{\"376\":1}}],[\"依次表示集合中的每一个索引\",{\"1\":{\"400\":1}}],[\"依次表示集合里面的每一个索引\",{\"1\":{\"397\":1}}],[\"依次表示字符串里面的每一个索引\",{\"1\":{\"373\":1}}],[\"依次表示字符串的每一个索引\",{\"1\":{\"364\":1}}],[\"依次表示数组里面的每一个元素\",{\"1\":{\"290\":1,\"292\":1}}],[\"依次表示数组里面的每一个索引\",{\"1\":{\"290\":1,\"292\":1}}],[\"依次表示这个范围之内的每一个数字\",{\"1\":{\"266\":1}}],[\"依次执行\",{\"1\":{\"222\":1}}],[\"看一下objects类中的成员\",{\"1\":{\"568\":1}}],[\"看看我执行了吗\",{\"1\":{\"564\":1}}],[\"看看api文档中针对system类有没有提供对应的构造方法\",{\"1\":{\"561\":1}}],[\"看看api文档中针对math类有没有提供对应的构造方法\",{\"1\":{\"556\":1}}],[\"看家lookhome方法\",{\"1\":{\"489\":2}}],[\"看家\",{\"1\":{\"485\":1}}],[\"看到new关键字\",{\"1\":{\"386\":1}}],[\"看成员方法\",{\"1\":{\"350\":1}}],[\"看构造方法\",{\"1\":{\"350\":1}}],[\"看类的描述\",{\"1\":{\"350\":1}}],[\"看类在哪个包下\",{\"1\":{\"350\":1}}],[\"看调用处是否需要使用方法的结果\",{\"1\":{\"310\":1}}],[\"看number是否能被i整除就可以了\",{\"1\":{\"266\":1}}],[\"看这个范围之内\",{\"1\":{\"266\":1}}],[\"看其结果是true还是false\",{\"1\":{\"241\":1}}],[\"写其他的就报错\",{\"1\":{\"572\":1}}],[\"写成一个方法\",{\"1\":{\"502\":1}}],[\"写在成员位置的代码块\",{\"1\":{\"502\":1}}],[\"写法2\",{\"1\":{\"499\":2}}],[\"写法1报错\",{\"1\":{\"499\":1}}],[\"写法1\",{\"1\":{\"499\":1}}],[\"写一个标准的javabean类\",{\"1\":{\"346\":1}}],[\"写一个循环\",{\"1\":{\"266\":1}}],[\"写不写都有\",{\"1\":{\"343\":1}}],[\"写对应的数据类型\",{\"1\":{\"314\":1}}],[\"写void\",{\"1\":{\"314\":1}}],[\"写作日期为\",{\"1\":{\"32\":1}}],[\"合理暴露\",{\"1\":{\"435\":1}}],[\"合理隐藏\",{\"1\":{\"435\":1}}],[\"合数\",{\"1\":{\"266\":1}}],[\"合法\",{\"1\":{\"230\":1}}],[\"质数\",{\"0\":{\"558\":1},\"1\":{\"266\":2}}],[\"平时在存储整数的时候\",{\"1\":{\"570\":1}}],[\"平时在给变量名\",{\"1\":{\"129\":1}}],[\"平时习惯性使用第一种方式\",{\"1\":{\"273\":1}}],[\"平方根的整数部分\",{\"1\":{\"265\":1}}],[\"平方根\",{\"0\":{\"265\":1},\"1\":{\"265\":3}}],[\"过于繁琐\",{\"1\":{\"489\":1}}],[\"过\",{\"1\":{\"264\":16}}],[\"过生日多一岁\",{\"1\":{\"187\":1}}],[\"逢7过\",{\"1\":{\"264\":2}}],[\"逢七过\",{\"0\":{\"264\":1}}],[\"朋友聚会的时候可能会玩一个游戏\",{\"1\":{\"264\":2}}],[\"参加\",{\"1\":{\"523\":1}}],[\"参数列表\",{\"1\":{\"498\":1,\"507\":1,\"512\":1,\"538\":1,\"548\":1,\"549\":1,\"551\":2}}],[\"参数列表不同\",{\"1\":{\"316\":1}}],[\"参数变更为两个long型参数\",{\"1\":{\"317\":1}}],[\"参数选择两个int型参数\",{\"1\":{\"317\":1}}],[\"参数不同\",{\"1\":{\"316\":1}}],[\"参数不同的方法\",{\"1\":{\"316\":1}}],[\"参数的数量与类型必须与方法定义中的设置相匹配\",{\"1\":{\"304\":1}}],[\"参数中的数据类型与变量名都不能缺少\",{\"1\":{\"304\":1}}],[\"参数3\",{\"1\":{\"304\":1}}],[\"参数2\",{\"1\":{\"304\":2}}],[\"参数1\",{\"1\":{\"304\":3}}],[\"参数范例\",{\"1\":{\"304\":1}}],[\"参数\",{\"1\":{\"304\":2,\"308\":4,\"314\":2,\"319\":1,\"336\":1,\"337\":1,\"340\":1}}],[\"参数为10\",{\"1\":{\"263\":1}}],[\"参与计算\",{\"1\":{\"113\":1}}],[\"随机产生\",{\"1\":{\"379\":1}}],[\"随机数范围的特点\",{\"1\":{\"263\":1}}],[\"随机数的范围\",{\"1\":{\"263\":1}}],[\"随着类的加载而加载\",{\"1\":{\"503\":1}}],[\"随着方法的调用而存在\",{\"1\":{\"333\":1}}],[\"随着对象的消失而消失\",{\"1\":{\"333\":1}}],[\"随着对象的存在而存在\",{\"1\":{\"333\":1}}],[\"随后打印出来\",{\"1\":{\"122\":1,\"123\":1}}],[\"跳过本次循环\",{\"1\":{\"261\":2}}],[\"跳出的意思\",{\"1\":{\"260\":1}}],[\"折叠纸张\",{\"1\":{\"249\":1}}],[\"坑\",{\"1\":{\"249\":1}}],[\"穆朗玛峰的高度\",{\"1\":{\"249\":1}}],[\"珠穆朗玛峰\",{\"0\":{\"249\":1}}],[\"又能接收学生\",{\"1\":{\"476\":1}}],[\"又能被5整除数字有多少个\",{\"1\":{\"245\":1}}],[\"又产生了哪些影响呢\",{\"1\":{\"440\":1,\"444\":1,\"455\":1}}],[\"又叫死循环\",{\"1\":{\"254\":1}}],[\"又叫做\",{\"1\":{\"202\":1}}],[\"又叫比较运算符\",{\"1\":{\"191\":1}}],[\"既表示重写1接口的\",{\"1\":{\"526\":1}}],[\"既能被3整除\",{\"1\":{\"245\":1}}],[\"既然都有房子\",{\"1\":{\"200\":1}}],[\"统计一共有多少个水仙花数\",{\"1\":{\"559\":1}}],[\"统计\",{\"1\":{\"367\":1}}],[\"统计大写\",{\"1\":{\"367\":1}}],[\"统计该字符串中大写字母字符\",{\"1\":{\"366\":1}}],[\"统计有多少个数据比平均值小\",{\"1\":{\"294\":2}}],[\"统计数组里面一共有多少个能被3整除的数字\",{\"1\":{\"291\":1}}],[\"统计个数\",{\"0\":{\"291\":1,\"294\":1}}],[\"统计这个范围中\",{\"1\":{\"245\":1}}],[\"统计次数\",{\"0\":{\"245\":1}}],[\"统计很多数据中\",{\"1\":{\"187\":1}}],[\"仅仅是一个间隔符号而已\",{\"1\":{\"280\":1}}],[\"仅仅是结束条件不同\",{\"1\":{\"244\":1}}],[\"仅仅是对代码的解释说明\",{\"1\":{\"101\":1}}],[\"仅仅是对代码的解释说明而已\",{\"1\":{\"101\":1}}],[\"今后遇到的需求中\",{\"1\":{\"243\":1}}],[\"今天的资料中\",{\"1\":{\"134\":1}}],[\"本包可以访问\",{\"1\":{\"493\":1}}],[\"本包\",{\"1\":{\"493\":1}}],[\"本类\",{\"1\":{\"493\":2}}],[\"本类的\",{\"1\":{\"460\":2}}],[\"本次循环中\",{\"1\":{\"261\":1}}],[\"本知识点了解即可\",{\"1\":{\"250\":1}}],[\"本题要点\",{\"1\":{\"243\":1}}],[\"本页面就是一个示例\",{\"1\":{\"6\":1}}],[\"初始值\",{\"1\":{\"420\":1}}],[\"初始值为0\",{\"1\":{\"243\":1,\"244\":1}}],[\"初始化父类成员使用的\",{\"1\":{\"511\":1}}],[\"初始化方式有显示初始化和构造方法初始化\",{\"1\":{\"500\":1}}],[\"初始化name和age\",{\"1\":{\"461\":1}}],[\"初始化即赋值的意思\",{\"1\":{\"410\":1}}],[\"初始化类的对象数据的\",{\"1\":{\"404\":1}}],[\"初始化的对象时\",{\"1\":{\"343\":1}}],[\"初始化值不同\",{\"1\":{\"333\":1}}],[\"初始化值\",{\"1\":{\"328\":1}}],[\"初始化语句可以空着不写\",{\"1\":{\"255\":1}}],[\"初始化语句\",{\"1\":{\"241\":2,\"247\":1,\"250\":1}}],[\"⑤调用遍历方法\",{\"1\":{\"318\":1}}],[\"⑤在main\",{\"1\":{\"306\":1,\"309\":1}}],[\"⑤回到②继续\",{\"1\":{\"241\":1}}],[\"⑤如果没有任何关系表达式为true\",{\"1\":{\"231\":1}}],[\"条件控制语句可以空着不写\",{\"1\":{\"255\":1}}],[\"条件控制语句\",{\"0\":{\"259\":1},\"1\":{\"241\":2,\"247\":1,\"250\":1}}],[\"条件判断语句可以空着不写\",{\"1\":{\"255\":1}}],[\"条件判断语句\",{\"1\":{\"241\":2,\"247\":1,\"250\":1}}],[\"成绩\",{\"1\":{\"456\":1}}],[\"成员内部类内存图\",{\"0\":{\"536\":1}}],[\"成员内部类面试题\",{\"0\":{\"535\":1}}],[\"成员内部类可以被一些修饰符所修饰\",{\"1\":{\"534\":1}}],[\"成员内部类的细节\",{\"0\":{\"534\":1}}],[\"成员内部类不能定义静态成员\",{\"1\":{\"533\":1}}],[\"成员内部类特点\",{\"1\":{\"533\":1}}],[\"成员内部类\",{\"0\":{\"533\":1},\"1\":{\"533\":1}}],[\"成员内部内\",{\"1\":{\"532\":1}}],[\"成员方法使用public\",{\"1\":{\"494\":1}}],[\"成员方法的访问特点\",{\"0\":{\"470\":1}}],[\"成员方法名\",{\"1\":{\"460\":2}}],[\"成员方法重名\",{\"0\":{\"446\":1}}],[\"成员方法不重名\",{\"0\":{\"445\":1}}],[\"成员方法多个对象共用的一份\",{\"1\":{\"331\":1}}],[\"成员方法调用过程\",{\"1\":{\"330\":1,\"331\":1}}],[\"成员方法\",{\"0\":{\"393\":1,\"444\":1},\"1\":{\"326\":3,\"327\":1,\"328\":2,\"336\":2,\"345\":1,\"404\":1,\"456\":2,\"527\":1,\"538\":1}}],[\"成员变量等\",{\"1\":{\"513\":1}}],[\"成员变量涉及到初始化的问题\",{\"1\":{\"500\":1}}],[\"成员变量重名\",{\"0\":{\"442\":1}}],[\"成员变量不重名\",{\"0\":{\"441\":1}}],[\"成员变量使用private\",{\"1\":{\"494\":1}}],[\"成员变量使用private修饰\",{\"1\":{\"344\":1}}],[\"成员变量使用过程\",{\"1\":{\"330\":1,\"331\":1}}],[\"成员变量的访问特点\",{\"0\":{\"469\":1}}],[\"成员变量的数据均采用默认值\",{\"1\":{\"343\":1}}],[\"成员变量的完整定义格式是\",{\"1\":{\"328\":1}}],[\"成员变量和成员方法\",{\"1\":{\"337\":1}}],[\"成员变量和局部变量的区别\",{\"0\":{\"333\":1}}],[\"成员变量和局部变量\",{\"0\":{\"332\":1}}],[\"成员变量private\",{\"1\":{\"335\":1}}],[\"成员变量存储在各自的内存区域中\",{\"1\":{\"331\":1}}],[\"成员变量\",{\"0\":{\"440\":1,\"500\":1},\"1\":{\"326\":3,\"327\":1,\"328\":2,\"333\":4,\"336\":2,\"337\":1,\"345\":1,\"404\":2,\"412\":1,\"418\":1,\"438\":1,\"456\":2,\"460\":2,\"527\":1,\"538\":1}}],[\"成死循环\",{\"1\":{\"240\":1}}],[\"成功导入后\",{\"1\":{\"157\":1}}],[\"成功新建完毕之后\",{\"1\":{\"154\":1}}],[\"成功新建一个模块之后\",{\"1\":{\"146\":1}}],[\"形参列表必须与父类中的一致\",{\"1\":{\"453\":1}}],[\"形参列表\",{\"1\":{\"411\":1}}],[\"形参\",{\"1\":{\"305\":1}}],[\"形参和实参\",{\"0\":{\"305\":1}}],[\"形\",{\"1\":{\"240\":1}}],[\"反转键盘录入的字符串\",{\"1\":{\"383\":1}}],[\"反转\",{\"1\":{\"381\":1}}],[\"反转字符串\",{\"1\":{\"373\":1}}],[\"反复执行某一段代码\",{\"1\":{\"240\":1}}],[\"反码的出现就是为了解决原码不能计算负数的问题而出现的\",{\"1\":{\"208\":1}}],[\"反码\",{\"0\":{\"207\":1},\"1\":{\"207\":1,\"208\":1}}],[\"循环遍历集合\",{\"1\":{\"402\":1}}],[\"循环遍历数组\",{\"1\":{\"296\":1}}],[\"循环得到每一个元素\",{\"1\":{\"294\":1}}],[\"循环获取数组中的每一个元素\",{\"1\":{\"293\":1}}],[\"循环开始条件可以写1\",{\"1\":{\"293\":1}}],[\"循环的开始条件如果为0\",{\"1\":{\"293\":1}}],[\"循环中开始条件一定是0吗\",{\"1\":{\"293\":1}}],[\"循环就可以停止了\",{\"1\":{\"265\":1}}],[\"循环一直进行\",{\"1\":{\"255\":1}}],[\"循环一直停不下来\",{\"1\":{\"254\":1}}],[\"循环执行一直在打印内容\",{\"1\":{\"255\":1,\"256\":1,\"257\":1}}],[\"循环高级\",{\"0\":{\"252\":1}}],[\"循环才会继续\",{\"1\":{\"249\":1}}],[\"循环才继续\",{\"1\":{\"249\":1}}],[\"循环折叠纸张\",{\"1\":{\"249\":1}}],[\"循环体\",{\"1\":{\"247\":1,\"250\":1}}],[\"循环体语句\",{\"1\":{\"241\":2}}],[\"循环结束\",{\"1\":{\"241\":1,\"361\":1}}],[\"循环结构\",{\"0\":{\"239\":1},\"1\":{\"221\":1}}],[\"循环语句可以在满足循环条件的情况下\",{\"1\":{\"240\":1}}],[\"掌握\",{\"0\":{\"240\":1}}],[\"工资\",{\"1\":{\"435\":2}}],[\"工作日\",{\"1\":{\"238\":3}}],[\"工程\",{\"0\":{\"139\":1},\"1\":{\"137\":1}}],[\"休息日\",{\"1\":{\"238\":4}}],[\"休息日和工作日\",{\"0\":{\"238\":1}}],[\"太麻烦了\",{\"1\":{\"237\":1}}],[\"二\",{\"0\":{\"552\":1},\"1\":{\"237\":1}}],[\"二进制表示为\",{\"1\":{\"212\":2,\"213\":2}}],[\"书写细节\",{\"1\":{\"567\":1}}],[\"书写步骤\",{\"1\":{\"554\":1}}],[\"书写代码时\",{\"1\":{\"434\":1}}],[\"书写一个switch语句去跟week进行匹配\",{\"1\":{\"236\":1}}],[\"书写格式\",{\"0\":{\"179\":1}}],[\"爬山\",{\"1\":{\"236\":2}}],[\"拳击\",{\"1\":{\"236\":2}}],[\"动物在吃\",{\"1\":{\"489\":1}}],[\"动物类\",{\"1\":{\"489\":1}}],[\"动物吃东西\",{\"1\":{\"480\":1}}],[\"动物都可以叫~~~\",{\"1\":{\"449\":1}}],[\"动物跑的很快\",{\"1\":{\"449\":1}}],[\"动物园里有两只老虎\",{\"1\":{\"206\":1}}],[\"动态初始化\",{\"1\":{\"287\":2}}],[\"动感单车\",{\"1\":{\"236\":2}}],[\"慢走\",{\"1\":{\"236\":2}}],[\"游戏图片为\",{\"1\":{\"567\":1}}],[\"游戏规则\",{\"1\":{\"264\":2}}],[\"游泳\",{\"1\":{\"236\":2}}],[\"游乐场玩一天\",{\"1\":{\"232\":2}}],[\"周日\",{\"1\":{\"236\":1}}],[\"周六\",{\"1\":{\"236\":1}}],[\"周五\",{\"1\":{\"236\":1}}],[\"周四\",{\"1\":{\"236\":1}}],[\"周三\",{\"1\":{\"236\":1}}],[\"周二\",{\"1\":{\"236\":1}}],[\"周一\",{\"1\":{\"236\":1}}],[\"跑步\",{\"1\":{\"236\":2,\"523\":1}}],[\"束\",{\"1\":{\"235\":1}}],[\"遇到break就会结\",{\"1\":{\"235\":1}}],[\"无static修饰的内部类\",{\"1\":{\"532\":1,\"533\":1}}],[\"无static修饰的成员\",{\"1\":{\"424\":1}}],[\"无static修饰的成员变量或者成员方法\",{\"1\":{\"424\":1}}],[\"无static修饰的成员变量属于每个对象的\",{\"1\":{\"421\":1}}],[\"无static修饰的成员方法属于每个对象的\",{\"1\":{\"423\":1}}],[\"无需死记硬背\",{\"1\":{\"511\":1,\"526\":1}}],[\"无法确定方法体\",{\"1\":{\"512\":1}}],[\"无法执行\",{\"1\":{\"509\":1}}],[\"无法转换\",{\"1\":{\"488\":1}}],[\"无意义\",{\"1\":{\"477\":1}}],[\"无\",{\"1\":{\"423\":2}}],[\"无论在程序代码中出现几次\",{\"1\":{\"355\":1}}],[\"无论是否使用\",{\"1\":{\"341\":1}}],[\"无参数\",{\"1\":{\"489\":3}}],[\"无参数构造器就没有了\",{\"1\":{\"343\":1}}],[\"无参数构造方法被调用\",{\"1\":{\"412\":1}}],[\"无参数构造方法\",{\"1\":{\"343\":1,\"417\":1,\"418\":1}}],[\"无参数方法的练习\",{\"0\":{\"302\":1}}],[\"无参数方法定义和调用\",{\"0\":{\"301\":1}}],[\"无参构造方法和有参构造方法以及get和set方法略\",{\"1\":{\"567\":1}}],[\"无参构造方法创建对象后使用setxxx\",{\"1\":{\"345\":2}}],[\"无参构造方法\",{\"1\":{\"340\":1,\"344\":1}}],[\"无限循环下面不能再写其他代码了\",{\"1\":{\"258\":1}}],[\"无限循环的注意事项\",{\"0\":{\"258\":1}}],[\"无限循环\",{\"0\":{\"253\":1}}],[\"无效的分数\",{\"1\":{\"232\":1}}],[\"无符号右移\",{\"0\":{\"218\":1},\"1\":{\"214\":1}}],[\"胖揍一顿\",{\"1\":{\"232\":2}}],[\"③编写类的成员方法\",{\"1\":{\"326\":1}}],[\"③调用获取最大值方法\",{\"1\":{\"319\":1}}],[\"③定义一个方法\",{\"1\":{\"318\":1}}],[\"③定义所有的重载方法\",{\"1\":{\"317\":1}}],[\"③根据题设分别设置两种情况下对应的返回结果\",{\"1\":{\"309\":1}}],[\"③使用分支语句分两种情况对两个数字的大小关系进行处理\",{\"1\":{\"302\":1,\"306\":1}}],[\"③执行循环体语句\",{\"1\":{\"241\":1}}],[\"③为每种判断设置对应的条件\",{\"1\":{\"232\":1}}],[\"③如果值为true就执行语句体2\",{\"1\":{\"231\":1}}],[\"③如果关系表达式的值为false就执行语句体2\",{\"1\":{\"228\":1}}],[\"③如果关系表达式的值为false就不执行语句体\",{\"1\":{\"224\":1}}],[\"采用if\",{\"1\":{\"232\":1}}],[\"并将其运算结果在控制台进行输出\",{\"1\":{\"576\":1}}],[\"并将结果进行输出\",{\"1\":{\"567\":1}}],[\"并重写需要用的方法为了避免其他类创建适配器类的对象\",{\"1\":{\"554\":1}}],[\"并且将计算结果在控制台进行输出\",{\"1\":{\"576\":4}}],[\"并且将其结果在控制台进行输出\",{\"1\":{\"574\":1}}],[\"并且重写tostring方法和equals方法\",{\"1\":{\"569\":1}}],[\"并且objects类是被final修饰的\",{\"1\":{\"568\":1}}],[\"并且提供对应的无参构造方法和有参构造方法以及get\",{\"1\":{\"567\":1,\"569\":1}}],[\"并且system类被final修饰了\",{\"1\":{\"561\":1}}],[\"并且math类被final修饰了\",{\"1\":{\"556\":1}}],[\"并且是静态化的变量可以直接用接口名访问\",{\"1\":{\"517\":1}}],[\"并且自动触发\",{\"1\":{\"503\":1}}],[\"并体会简化后的好处\",{\"1\":{\"489\":1}}],[\"并调用register方法\",{\"1\":{\"476\":1}}],[\"并满足子类是父类中的一种\",{\"1\":{\"472\":1}}],[\"并不是父类的所有内容都可以给子类继承的\",{\"1\":{\"438\":1}}],[\"并指定中间的间隔符号\",{\"1\":{\"385\":1}}],[\"并在控制台打印是或不是\",{\"1\":{\"383\":1}}],[\"并在控制台输出结果\",{\"1\":{\"369\":1,\"370\":1,\"384\":1}}],[\"并在控制台输出\",{\"1\":{\"232\":1}}],[\"并在字符串池中维护\",{\"1\":{\"355\":1}}],[\"并通过show方法展示数据\",{\"1\":{\"345\":1}}],[\"并提供set和get方法以及便于显示数据的show方法\",{\"1\":{\"337\":1}}],[\"并提供数据对应的行为\",{\"1\":{\"335\":1}}],[\"并把克隆之后的对象返回出去\",{\"1\":{\"567\":1}}],[\"并把原对象中的数据拷贝过去\",{\"1\":{\"567\":1}}],[\"并把元素累加到sum当中\",{\"1\":{\"294\":1}}],[\"并把求和结果在控制台输出\",{\"1\":{\"243\":1,\"244\":1}}],[\"并添加数据1\",{\"1\":{\"290\":1}}],[\"并打印在控制台上了\",{\"1\":{\"284\":1}}],[\"并产生一个新的字符串\",{\"1\":{\"180\":1}}],[\"假如我们定义一个运动员的接口\",{\"1\":{\"523\":1}}],[\"假如我们要定义如下类\",{\"1\":{\"428\":1}}],[\"假如多个类中存在相同属性和行为时\",{\"1\":{\"428\":1}}],[\"假如你可以控制小明的得分\",{\"1\":{\"232\":1}}],[\"假设在接口中有一个方法\",{\"1\":{\"526\":1}}],[\"假设不重写所有抽象方法\",{\"1\":{\"511\":1}}],[\"假设创建了抽象类的对象\",{\"1\":{\"511\":1}}],[\"假设抽象类让我们创建对象\",{\"1\":{\"509\":1}}],[\"假设demo1和demo2中都有一个student该如何使用\",{\"1\":{\"492\":1}}],[\"假设第一次循环\",{\"1\":{\"370\":1}}],[\"假设某影院售卖了100张票\",{\"1\":{\"230\":1}}],[\"送自行车一辆\",{\"1\":{\"232\":1}}],[\"送他不同的礼物\",{\"1\":{\"232\":1}}],[\"送初恋回家\",{\"1\":{\"122\":1}}],[\"④把结果输出在控制台\",{\"1\":{\"319\":1}}],[\"④用新的输出语句修改遍历操作\",{\"1\":{\"318\":1}}],[\"④完成方法的调用\",{\"1\":{\"317\":1}}],[\"④在main\",{\"1\":{\"302\":1,\"306\":1,\"309\":1}}],[\"④执行条件控制语句\",{\"1\":{\"241\":1}}],[\"④为每种判断设置对应的奖励\",{\"1\":{\"232\":1}}],[\"④\",{\"1\":{\"231\":1}}],[\"④继续执行后面的语句内容\",{\"1\":{\"224\":1,\"228\":1}}],[\"票号不合法\",{\"1\":{\"230\":2}}],[\"票的序号为1~100\",{\"1\":{\"230\":1}}],[\"坐左边\",{\"1\":{\"230\":1}}],[\"坐右边\",{\"1\":{\"230\":1}}],[\"偶数女性\",{\"1\":{\"379\":1}}],[\"偶数\",{\"1\":{\"230\":1,\"292\":1}}],[\"偶数票号坐右侧\",{\"1\":{\"230\":1}}],[\"根据\",{\"1\":{\"499\":1}}],[\"根据需求完成代码\",{\"1\":{\"489\":1}}],[\"根据参数来确定具体调用哪一个构造方法\",{\"1\":{\"463\":2}}],[\"根据参数匹配确认\",{\"1\":{\"460\":2}}],[\"根据id查找对应的学生信息\",{\"1\":{\"401\":3,\"402\":1}}],[\"根据索引获取字符串里面的每一个字符\",{\"1\":{\"364\":1}}],[\"根据字节数组的内容\",{\"1\":{\"354\":2}}],[\"根据字符数组的内容\",{\"1\":{\"354\":2}}],[\"根据传入的字符串\",{\"1\":{\"354\":1}}],[\"根据方法结果再计算出全年营业额\",{\"1\":{\"310\":2}}],[\"根据题设分别设置两种情况下对应的返回结果\",{\"1\":{\"309\":1}}],[\"根据求最大值的思路\",{\"1\":{\"293\":1}}],[\"根据不同情况\",{\"1\":{\"230\":1}}],[\"根据固定的场景\",{\"1\":{\"195\":1}}],[\"影院选座\",{\"0\":{\"230\":1}}],[\"福建大酒店\",{\"1\":{\"229\":1}}],[\"吃骨头\",{\"1\":{\"480\":1,\"485\":1}}],[\"吃鱼\",{\"1\":{\"480\":1,\"485\":1}}],[\"吃完第三个的时候就不吃了\",{\"1\":{\"260\":1}}],[\"吃1~5号包子\",{\"1\":{\"260\":1,\"261\":1}}],[\"吃网红餐厅\",{\"1\":{\"229\":1}}],[\"吃饭\",{\"0\":{\"229\":1},\"1\":{\"428\":4,\"433\":3,\"456\":2}}],[\"示例代码\",{\"0\":{\"394\":1},\"1\":{\"242\":1,\"243\":1,\"244\":1,\"313\":2,\"326\":1,\"327\":1,\"328\":1,\"336\":1,\"337\":1,\"340\":1,\"343\":1,\"345\":1,\"354\":1,\"358\":1}}],[\"示例\",{\"1\":{\"224\":1,\"228\":1,\"423\":1}}],[\"②编写类的成员变量\",{\"1\":{\"326\":1}}],[\"②定义一个方法\",{\"1\":{\"319\":1}}],[\"②定义一个数组\",{\"1\":{\"318\":1}}],[\"②定义对应的重载方法\",{\"1\":{\"317\":1}}],[\"②使用分支语句分两种情况对两个数字的大小关系进行处理\",{\"1\":{\"309\":1}}],[\"②为方法定义两个参数\",{\"1\":{\"306\":1}}],[\"②方法中定义两个变量\",{\"1\":{\"302\":1}}],[\"②执行条件判断语句\",{\"1\":{\"241\":1}}],[\"②由于奖励种类较多\",{\"1\":{\"232\":1}}],[\"②如果值为true就执行语句体1\",{\"1\":{\"231\":1}}],[\"②如果关系表达式的值为true就执行语句体1\",{\"1\":{\"228\":1}}],[\"②如果关系表达式的值为true就执行语句体\",{\"1\":{\"224\":1}}],[\"②path\",{\"1\":{\"83\":1}}],[\"①因为要求结果在一行上输出\",{\"1\":{\"318\":1}}],[\"①定义类\",{\"1\":{\"326\":1}}],[\"①定义一个数组\",{\"1\":{\"319\":1}}],[\"①定义一个方法\",{\"1\":{\"302\":1,\"306\":1,\"309\":1}}],[\"①定义比较两个数字的是否相同的方法compare\",{\"1\":{\"317\":1}}],[\"①执行初始化语句\",{\"1\":{\"241\":1}}],[\"①小明的考试成绩未知\",{\"1\":{\"232\":1}}],[\"①首先计算关系表达式1的值\",{\"1\":{\"231\":1}}],[\"①首先计算关系表达式的值\",{\"1\":{\"224\":1,\"228\":1}}],[\"①java\",{\"1\":{\"83\":1}}],[\"判断对象是否不为null\",{\"1\":{\"569\":1}}],[\"判断对象是否为null\",{\"1\":{\"569\":1}}],[\"判断对象是否为null等等\",{\"1\":{\"568\":1}}],[\"判断1~100000之间有多少个质数\",{\"1\":{\"562\":1}}],[\"判断一个数是否为一个质数\",{\"1\":{\"558\":2}}],[\"判断id是否存在\",{\"1\":{\"402\":1}}],[\"判断用户的是否存在\",{\"0\":{\"402\":1}}],[\"判断比较\",{\"1\":{\"361\":1}}],[\"判断数组中的某一个数是否存在\",{\"1\":{\"320\":1}}],[\"判断当前的元素是否为3的倍数\",{\"1\":{\"291\":1}}],[\"判断\",{\"1\":{\"266\":1,\"559\":1}}],[\"判断该整数是否为一个质数\",{\"1\":{\"266\":2}}],[\"判断是否为质数\",{\"0\":{\"266\":1}}],[\"判断是否是偶数\",{\"1\":{\"244\":1}}],[\"判断每一个数字\",{\"1\":{\"264\":1}}],[\"判断a是否大于b\",{\"1\":{\"228\":1}}],[\"判断a和c的值是否相等\",{\"1\":{\"224\":1}}],[\"判断a和b的值是否相等\",{\"1\":{\"224\":1}}],[\"判断语句\",{\"0\":{\"223\":1}}],[\"判断和选择结构\",{\"1\":{\"221\":1}}],[\"各自的作用是什么\",{\"1\":{\"343\":1}}],[\"各条语句的执行顺序对程序的结果是有直接影响的\",{\"1\":{\"220\":1}}],[\"各种计算机语言都习惯使用该案例作为第一个演示案例\",{\"1\":{\"70\":1}}],[\"流程控制语句分类\",{\"0\":{\"221\":1}}],[\"流程控制语句\",{\"0\":{\"220\":1}}],[\"补齐7位\",{\"1\":{\"376\":1}}],[\"补的一直是0\",{\"1\":{\"218\":1}}],[\"补码需要注意的地方\",{\"1\":{\"209\":1}}],[\"补码\",{\"0\":{\"207\":1},\"1\":{\"207\":1,\"209\":1}}],[\"按定义的位置来分\",{\"1\":{\"532\":1}}],[\"按如下需求定义类\",{\"1\":{\"456\":1}}],[\"按照四舍五入返回最接近参数的int\",{\"1\":{\"557\":1}}],[\"按照四舍五入返回最接近参数的int类型的值\",{\"1\":{\"557\":1}}],[\"按照规范\",{\"1\":{\"516\":1}}],[\"按照要求交换索引对应的元素\",{\"1\":{\"295\":1}}],[\"按照代码的先后顺序\",{\"1\":{\"222\":1}}],[\"按位运算\",{\"1\":{\"215\":2}}],[\"按下快捷键\",{\"1\":{\"60\":1}}],[\"高位补0\",{\"1\":{\"214\":1}}],[\"高位补0或1\",{\"1\":{\"214\":1}}],[\"高媛\",{\"1\":{\"122\":1}}],[\"低位补0\",{\"1\":{\"214\":1}}],[\"向下转型\",{\"0\":{\"484\":1},\"1\":{\"484\":1,\"485\":1,\"486\":1,\"487\":1}}],[\"向下兼容\",{\"1\":{\"90\":1}}],[\"向上转型\",{\"0\":{\"483\":1},\"1\":{\"483\":1,\"485\":1,\"486\":1,\"487\":1}}],[\"向右移两位\",{\"1\":{\"217\":1}}],[\"向右移动\",{\"1\":{\"214\":2}}],[\"向左移两位\",{\"1\":{\"216\":1}}],[\"向左移动\",{\"1\":{\"214\":1}}],[\"含义\",{\"1\":{\"214\":1}}],[\"刚好8位\",{\"1\":{\"213\":1}}],[\"刚刚操作的项目就已经关闭了\",{\"1\":{\"160\":1}}],[\"隐藏细节\",{\"1\":{\"494\":1}}],[\"隐藏着的一些未被发现的缺陷或问题统称为bug\",{\"1\":{\"74\":1}}],[\"隐式转换\",{\"0\":{\"212\":1}}],[\"隐式转换和强制类型转换的底层实现\",{\"0\":{\"211\":1}}],[\"由于jvm终止了\",{\"1\":{\"562\":1}}],[\"由于字体比较小\",{\"1\":{\"146\":1}}],[\"由子类自己决定\",{\"1\":{\"505\":1}}],[\"由虚拟机自动调用\",{\"1\":{\"343\":1}}],[\"由数据类型和变量名组成\",{\"1\":{\"304\":1,\"314\":1}}],[\"由系统给出默认初始化值\",{\"1\":{\"287\":1}}],[\"由此可以引申出隐式转换的底层实现\",{\"1\":{\"210\":1}}],[\"占8个字节\",{\"1\":{\"210\":1}}],[\"占4个字节\",{\"1\":{\"210\":1}}],[\"占2个字节\",{\"1\":{\"210\":1}}],[\"占1个字节\",{\"1\":{\"210\":1}}],[\"现在cloneable表示一旦实现了\",{\"1\":{\"567\":1}}],[\"现在没用\",{\"1\":{\"426\":1}}],[\"现在有不同的植物\",{\"1\":{\"299\":1}}],[\"现在看下基本数据类型\",{\"1\":{\"210\":1}}],[\"现在最新从官网上下载的jdk安装时会自动配置javac\",{\"1\":{\"82\":1}}],[\"另外补码还能多记录一个特殊值\",{\"1\":{\"209\":1}}],[\"跟本身\",{\"1\":{\"559\":1}}],[\"跟现实世界很像\",{\"1\":{\"431\":1}}],[\"跟朋友聊天时\",{\"1\":{\"322\":1}}],[\"跟\",{\"1\":{\"296\":1,\"370\":1}}],[\"跟实际得到的结果就会存在1的偏差\",{\"1\":{\"209\":1}}],[\"跟小学数学中一模一样没有任何区别\",{\"1\":{\"166\":1}}],[\"负数运算的时候\",{\"1\":{\"209\":1}}],[\"负数的补码在反码的基础上+1\",{\"1\":{\"209\":1}}],[\"负数的补码是在其反码的基础上+1\",{\"1\":{\"207\":1}}],[\"负数的反码是在源码的基础上\",{\"1\":{\"208\":1}}],[\"负数的反码是符号位保持不变\",{\"1\":{\"207\":1}}],[\"负的2的63次方\",{\"1\":{\"116\":1}}],[\"负的2的31次方\",{\"1\":{\"116\":1}}],[\"负的2的15次方\",{\"1\":{\"116\":1}}],[\"负的2的7次方\",{\"1\":{\"116\":1}}],[\"正向遍历\",{\"1\":{\"397\":1}}],[\"正着遍历\",{\"1\":{\"373\":1}}],[\"正数的反码不变\",{\"1\":{\"208\":1}}],[\"正数的补码不变\",{\"1\":{\"209\":1}}],[\"正数的补码是其本身\",{\"1\":{\"207\":1}}],[\"正数的补码反码是其本身\",{\"1\":{\"207\":1}}],[\"正确范例\",{\"1\":{\"316\":1}}],[\"正确\",{\"1\":{\"129\":2}}],[\"十全十美数\",{\"1\":{\"559\":1}}],[\"十六进制的\",{\"1\":{\"280\":1}}],[\"十进制的\",{\"1\":{\"213\":1}}],[\"十进制数据的二进制表现形式\",{\"1\":{\"207\":1}}],[\"十位自幂数\",{\"1\":{\"559\":1}}],[\"十位7\",{\"1\":{\"264\":1}}],[\"十位\",{\"1\":{\"167\":4,\"559\":1}}],[\"每32个bit为一组\",{\"1\":{\"573\":1}}],[\"每一位的三次方之和\",{\"1\":{\"559\":1}}],[\"每一次\",{\"1\":{\"355\":1}}],[\"每一种运算符都有各自的优先级\",{\"1\":{\"206\":1}}],[\"每创建一次对象\",{\"1\":{\"343\":1}}],[\"每次新加一个植物都需要写20行代码\",{\"1\":{\"299\":1}}],[\"每循环一次\",{\"1\":{\"294\":1}}],[\"每个类都可以将\",{\"1\":{\"566\":1}}],[\"每个构造方法中都要赋值一次\",{\"1\":{\"500\":1}}],[\"每个对象都存在\",{\"1\":{\"418\":1}}],[\"每个季度的营业额\",{\"1\":{\"310\":1}}],[\"每个\",{\"1\":{\"34\":1}}],[\"求圆的面积\",{\"1\":{\"311\":1}}],[\"求一家商场每个季度的营业额\",{\"1\":{\"310\":2}}],[\"求所有数据的平均数\",{\"1\":{\"294\":2}}],[\"求出所有数据的和\",{\"1\":{\"294\":2}}],[\"求出最终的结果\",{\"1\":{\"206\":1}}],[\"求数组中的最大值\",{\"1\":{\"293\":1}}],[\"求数组里面所有的数据和\",{\"1\":{\"290\":2}}],[\"求最值\",{\"0\":{\"293\":1}}],[\"求偶数和\",{\"0\":{\"244\":1}}],[\"求1\",{\"1\":{\"243\":1,\"244\":1}}],[\"求和变量\",{\"1\":{\"290\":1}}],[\"求和变量的定义位置\",{\"1\":{\"243\":1}}],[\"求和的最终结果必须保存起来\",{\"1\":{\"243\":1,\"244\":1}}],[\"求和\",{\"0\":{\"243\":1,\"290\":1}}],[\"求两个数的较大值\",{\"1\":{\"206\":1}}],[\"已淘汰\",{\"1\":{\"501\":1}}],[\"已知用户名和密码\",{\"1\":{\"360\":1}}],[\"已知学生成绩为\",{\"1\":{\"289\":1}}],[\"已知他们的身高分别为150cm\",{\"1\":{\"206\":1}}],[\"已经获取的总内存大小\",{\"1\":{\"564\":1}}],[\"已经被删除掉了\",{\"1\":{\"562\":1}}],[\"已经被安卓和ios给替代了\",{\"1\":{\"93\":1}}],[\"已经明确了要操作的所有数据\",{\"1\":{\"288\":1}}],[\"格式2\",{\"1\":{\"551\":1}}],[\"格式1\",{\"1\":{\"551\":1}}],[\"格式相仿\",{\"1\":{\"520\":1}}],[\"格式如下\",{\"1\":{\"487\":1,\"497\":1,\"498\":1}}],[\"格式体现\",{\"1\":{\"477\":1}}],[\"格式二\",{\"0\":{\"271\":1}}],[\"格式一\",{\"0\":{\"270\":1}}],[\"格式解释\",{\"1\":{\"241\":1}}],[\"格式\",{\"0\":{\"203\":1,\"234\":1,\"247\":1,\"281\":1,\"285\":1,\"541\":1},\"1\":{\"206\":1,\"224\":1,\"228\":1,\"231\":1,\"250\":1,\"314\":2,\"327\":3,\"340\":1,\"420\":1,\"421\":1,\"422\":1,\"423\":1,\"548\":1,\"549\":1}}],[\"格式详解\",{\"0\":{\"110\":1,\"275\":1}}],[\"三位自幂数\",{\"1\":{\"559\":1}}],[\"三位数\",{\"1\":{\"559\":1}}],[\"三种格式的区别\",{\"0\":{\"251\":1}}],[\"三\",{\"0\":{\"553\":1},\"1\":{\"237\":1}}],[\"三元运算符的最终结果一定要被使用\",{\"1\":{\"205\":1,\"206\":1}}],[\"三元表达式或者问号冒号表达式\",{\"1\":{\"202\":1}}],[\"三个变量记录的就是对应的个数\",{\"1\":{\"367\":1}}],[\"三个玩家\",{\"1\":{\"166\":1}}],[\"三个版本\",{\"1\":{\"90\":1}}],[\"干嘛还要去看车呢\",{\"1\":{\"200\":1}}],[\"发生在子父类之间的关系\",{\"1\":{\"449\":1}}],[\"发短信\",{\"1\":{\"325\":1,\"326\":2}}],[\"发射子弹的代码需要20行\",{\"1\":{\"299\":1}}],[\"发现有\",{\"1\":{\"200\":1}}],[\"发帖\",{\"1\":{\"141\":1}}],[\"密码为\",{\"1\":{\"567\":1}}],[\"密码\",{\"1\":{\"346\":1}}],[\"密码正确\",{\"1\":{\"200\":2}}],[\"密码输入正确\",{\"1\":{\"195\":1}}],[\"温馨提示\",{\"1\":{\"197\":1}}],[\"异或\",{\"0\":{\"196\":1}}],[\"^\",{\"0\":{\"196\":1},\"1\":{\"196\":5}}],[\"买辆车\",{\"1\":{\"195\":1}}],[\"买个房子\",{\"1\":{\"195\":1}}],[\"丈母娘\",{\"1\":{\"195\":1}}],[\"丈母娘选女婿\",{\"1\":{\"195\":1,\"200\":1}}],[\"来优化代码\",{\"1\":{\"472\":1}}],[\"来创建字符串对象\",{\"1\":{\"354\":4}}],[\"来选择使用\",{\"1\":{\"195\":1}}],[\"来解析\",{\"1\":{\"15\":1}}],[\"或\",{\"1\":{\"194\":1}}],[\"或者父类接口\",{\"1\":{\"545\":1}}],[\"或者用鼠标点copy\",{\"1\":{\"492\":1}}],[\"或者实现的父接口类型\",{\"1\":{\"477\":1}}],[\"或者基类\",{\"1\":{\"428\":1}}],[\"或者说压根不用学\",{\"1\":{\"335\":1}}],[\"或者\",{\"1\":{\"194\":1}}],[\"或者是将一个很大的数赋值给一个取值范围很小的变量去接收\",{\"1\":{\"179\":1}}],[\"或者是8的整数倍\",{\"1\":{\"106\":1}}],[\"逻辑核心\",{\"0\":{\"199\":1}}],[\"逻辑或\",{\"1\":{\"194\":1,\"214\":1}}],[\"逻辑与\",{\"1\":{\"194\":1,\"214\":1}}],[\"||和|的运行结果都是一模一样的\",{\"1\":{\"201\":1}}],[\"||\",{\"0\":{\"198\":1},\"1\":{\"197\":1,\"200\":1,\"202\":1,\"264\":2,\"336\":1,\"567\":1}}],[\"|\",{\"0\":{\"194\":1},\"1\":{\"194\":6,\"195\":1,\"200\":1,\"214\":1,\"215\":2}}],[\"千万不要写成=\",{\"1\":{\"193\":1}}],[\"千位\",{\"1\":{\"167\":1}}],[\"然而byte类型的值在参与运算的时候\",{\"1\":{\"191\":1}}],[\"然后比较两个对象是否相同\",{\"1\":{\"567\":1}}],[\"然后调用该对象的tostring方法获取该对象的字符串表现形式\",{\"1\":{\"567\":1}}],[\"然后通过子类对象调用object类中的方法\",{\"1\":{\"566\":1}}],[\"然后通过对象来访问\",{\"1\":{\"424\":1}}],[\"然后计算两个时间的差值\",{\"1\":{\"562\":1}}],[\"然后定义一个实现类\",{\"1\":{\"524\":1}}],[\"然后定义一个猫类\",{\"1\":{\"449\":1}}],[\"然后定义一个学生测试类\",{\"1\":{\"328\":1}}],[\"然后继承人类即可\",{\"1\":{\"434\":1}}],[\"然后继续点击右下角的next\",{\"1\":{\"157\":1}}],[\"然后把arr的单位插入进去\",{\"1\":{\"376\":1}}],[\"然后程序结束掉\",{\"1\":{\"235\":1}}],[\"然后高位补0\",{\"1\":{\"217\":1}}],[\"然后执行向右移两位\",{\"1\":{\"217\":1}}],[\"然后执行向左移两位\",{\"1\":{\"216\":1}}],[\"然后低位补0\",{\"1\":{\"216\":1}}],[\"然后第一位又是符号位\",{\"1\":{\"213\":1}}],[\"然后再去看看有没有车\",{\"1\":{\"200\":1}}],[\"然后再进行计算\",{\"1\":{\"181\":1}}],[\"然后再进行运算\",{\"1\":{\"170\":1,\"171\":1,\"574\":1}}],[\"相同代码重复利用\",{\"1\":{\"430\":1}}],[\"相同的行为\",{\"1\":{\"429\":1}}],[\"相同\",{\"1\":{\"206\":1}}],[\"相当于让java帮我们克隆一个对象\",{\"1\":{\"567\":1}}],[\"相当于\",{\"1\":{\"190\":1}}],[\"相关信息\",{\"1\":{\"14\":1}}],[\"特有方法\",{\"1\":{\"435\":2}}],[\"特点\",{\"1\":{\"250\":1,\"386\":1}}],[\"特殊的用法\",{\"1\":{\"187\":1}}],[\"特例\",{\"1\":{\"182\":1}}],[\"先把具体的数字变成二进制\",{\"1\":{\"573\":1}}],[\"先把被克隆对象中的数组获取出来\",{\"1\":{\"567\":1}}],[\"先创建好biginteger的对象\",{\"1\":{\"572\":1}}],[\"先创建一个对象\",{\"1\":{\"567\":1}}],[\"先创建对象\",{\"1\":{\"537\":1}}],[\"先判断a是否为dog类型\",{\"1\":{\"488\":1}}],[\"先初始化父类空间\",{\"1\":{\"462\":1}}],[\"先有爸爸\",{\"1\":{\"455\":1}}],[\"先检查字符串常量池中有没有字符串abc\",{\"1\":{\"386\":1}}],[\"先键盘录入要说的话\",{\"1\":{\"378\":1}}],[\"先打印数据\",{\"1\":{\"318\":1}}],[\"先执行\",{\"1\":{\"250\":1}}],[\"先计算等号右边的\",{\"1\":{\"187\":2}}],[\"先学习最基础的project\",{\"1\":{\"138\":1}}],[\"购物商场中\",{\"1\":{\"187\":1}}],[\"某些情况下\",{\"1\":{\"187\":1}}],[\"某个数据经常发生改变\",{\"1\":{\"113\":1}}],[\"放在变量的后面\",{\"1\":{\"184\":1}}],[\"放在变量的前面\",{\"1\":{\"184\":1}}],[\"自幂数\",{\"0\":{\"559\":1},\"1\":{\"559\":1}}],[\"自由泳\",{\"1\":{\"544\":1,\"546\":1}}],[\"自动完成\",{\"1\":{\"482\":1}}],[\"自动转换\",{\"0\":{\"483\":1},\"1\":{\"482\":2,\"483\":1}}],[\"自动生成左边的接受变量\",{\"1\":{\"364\":1}}],[\"自然可以赋值给父类类型的变量\",{\"1\":{\"475\":1}}],[\"自己测试\",{\"1\":{\"394\":1}}],[\"自己改写一下求最小智\",{\"1\":{\"293\":1}}],[\"自己不要去写\",{\"1\":{\"227\":1}}],[\"自行车一辆\",{\"1\":{\"232\":1}}],[\"自增自减运算符的应用场景\",{\"0\":{\"187\":1}}],[\"自增运算符\",{\"1\":{\"183\":1}}],[\"自减运算符\",{\"1\":{\"183\":1}}],[\"自定义对齐\",{\"0\":{\"21\":1}}],[\"自定义标题\",{\"1\":{\"18\":5}}],[\"乘法运算\",{\"1\":{\"576\":1}}],[\"乘法\",{\"1\":{\"182\":1,\"572\":2}}],[\"黑\",{\"1\":{\"489\":2}}],[\"黑色\",{\"1\":{\"466\":1}}],[\"黑默丁格\",{\"1\":{\"180\":1}}],[\"黑马程序\",{\"1\":{\"537\":1}}],[\"黑马程序员网站都属于一个个项目\",{\"1\":{\"139\":1}}],[\"黑马程序员\",{\"1\":{\"105\":1,\"420\":2,\"518\":1}}],[\"黑马是www\",{\"1\":{\"490\":1}}],[\"黑马谢广坤\",{\"1\":{\"121\":1}}],[\"产生一个新的字符串\",{\"1\":{\"180\":5,\"370\":1}}],[\"结论\",{\"1\":{\"386\":1}}],[\"结束整个循环\",{\"1\":{\"260\":1}}],[\"结束条件\",{\"1\":{\"241\":1}}],[\"结束\",{\"1\":{\"224\":1,\"228\":1,\"264\":1,\"265\":1}}],[\"结果如下所示\",{\"1\":{\"574\":1}}],[\"结果直接是false\",{\"1\":{\"488\":1}}],[\"结果发现这些成员变量\",{\"1\":{\"418\":1}}],[\"结果只保留整数部分\",{\"1\":{\"265\":2}}],[\"结果就会出错\",{\"1\":{\"208\":1}}],[\"结果为true\",{\"1\":{\"196\":1}}],[\"结果为false\",{\"1\":{\"196\":1}}],[\"结果为3\",{\"1\":{\"180\":1}}],[\"结果才是true\",{\"1\":{\"196\":1}}],[\"结果才是假\",{\"1\":{\"194\":2}}],[\"结果才是真\",{\"1\":{\"194\":2}}],[\"结果\",{\"1\":{\"180\":3}}],[\"结构介绍\",{\"0\":{\"138\":1}}],[\"结构分类\",{\"0\":{\"137\":1}}],[\"嘿嘿\",{\"1\":{\"180\":1}}],[\"核心\",{\"1\":{\"434\":1}}],[\"核心思想\",{\"1\":{\"373\":1}}],[\"核心技巧\",{\"0\":{\"180\":1}}],[\"核心类库\",{\"1\":{\"97\":2}}],[\"被其他权限修饰符修饰的内部类一般用3\",{\"1\":{\"534\":1}}],[\"被它的子类们重写\",{\"1\":{\"505\":1}}],[\"被final修饰的常量名称\",{\"1\":{\"500\":1}}],[\"被final修饰后\",{\"1\":{\"499\":1}}],[\"被修饰的变量\",{\"1\":{\"495\":1}}],[\"被修饰的方法\",{\"1\":{\"495\":1}}],[\"被修饰的类\",{\"1\":{\"495\":1}}],[\"被修饰的内容会有不同的访问权限\",{\"1\":{\"493\":1}}],[\"被jvm调用\",{\"1\":{\"426\":3}}],[\"被java赋予特定含义的英文单词\",{\"1\":{\"103\":1}}],[\"被java赋予了特定含义的英文单词\",{\"1\":{\"103\":1}}],[\"被static修饰的成员是属于类的是放在静态区中\",{\"1\":{\"418\":1}}],[\"被锁定\",{\"1\":{\"361\":1}}],[\"被private修饰的成员只能在本类中才能访问\",{\"1\":{\"337\":1}}],[\"被private修饰的成员\",{\"1\":{\"336\":1}}],[\"被强转的数据\",{\"1\":{\"179\":1}}],[\"目标数组开始位置\",{\"1\":{\"562\":1}}],[\"目标数组\",{\"1\":{\"562\":1}}],[\"目标数据类型\",{\"1\":{\"179\":2}}],[\"目的地数组\",{\"1\":{\"562\":1}}],[\"目的就是不想让调用者创建该类对象\",{\"1\":{\"511\":1}}],[\"目的就是供我们使用\",{\"1\":{\"497\":1}}],[\"目的在于子类对象中包含了其对应的父类空间\",{\"1\":{\"462\":1}}],[\"目前先记住这个格式\",{\"1\":{\"314\":1}}],[\"目录名称\",{\"1\":{\"69\":1}}],[\"目录2\",{\"1\":{\"61\":1}}],[\"目录1\",{\"1\":{\"61\":1}}],[\"目录\",{\"1\":{\"61\":1}}],[\"变更对应的参数类型\",{\"1\":{\"317\":1}}],[\"变成二分之一\",{\"1\":{\"292\":1}}],[\"变成double\",{\"1\":{\"175\":1}}],[\"变化数据\",{\"0\":{\"292\":1}}],[\"变形金刚一个\",{\"1\":{\"232\":2}}],[\"变量值就不可被修改\",{\"1\":{\"517\":1}}],[\"变量和方法\",{\"1\":{\"418\":1}}],[\"变量2\",{\"1\":{\"326\":1}}],[\"变量2的数据类型\",{\"1\":{\"326\":1}}],[\"变量1\",{\"1\":{\"326\":1}}],[\"变量1的数据类型\",{\"1\":{\"326\":1}}],[\"变量需要进行加1或者减1的时候使用\",{\"1\":{\"187\":1}}],[\"变量里面的值会直接先提升为int\",{\"1\":{\"177\":1}}],[\"变量s是short类型的\",{\"1\":{\"177\":1}}],[\"变量b和变量s里面的值会先提升为int参与运算\",{\"1\":{\"177\":1}}],[\"变量b是byte类型的\",{\"1\":{\"177\":1}}],[\"变量b1和变量b2里面的值都会自动提升为int类型的\",{\"1\":{\"176\":1}}],[\"变量d是double类型\",{\"1\":{\"175\":1}}],[\"变量n是long类型\",{\"1\":{\"175\":1}}],[\"变量n是long类型的\",{\"1\":{\"174\":1,\"177\":1}}],[\"变量i是int类型\",{\"1\":{\"175\":1}}],[\"变量i是int类型的\",{\"1\":{\"174\":1}}],[\"变量i里面的值会自动提升为long类型的\",{\"1\":{\"174\":1}}],[\"变量只能存储一个值\",{\"1\":{\"113\":1}}],[\"变量在使用之前必须要赋值\",{\"1\":{\"112\":2}}],[\"变量的练习\",{\"0\":{\"113\":1}}],[\"变量的作用域\",{\"1\":{\"112\":1}}],[\"变量的注意事项\",{\"0\":{\"112\":1}}],[\"变量的定义格式\",{\"0\":{\"109\":1}}],[\"变量名称\",{\"1\":{\"328\":1,\"412\":1}}],[\"变量名不允许重复\",{\"1\":{\"112\":1}}],[\"变量名不能重复\",{\"1\":{\"112\":1,\"113\":1}}],[\"变量名\",{\"1\":{\"109\":1,\"110\":1,\"111\":1,\"113\":1,\"119\":1,\"179\":1,\"304\":1,\"308\":1,\"327\":1,\"420\":1,\"475\":2,\"483\":1,\"484\":1,\"487\":1,\"538\":1,\"576\":1}}],[\"变量就在程序中临时存储数据的容器\",{\"1\":{\"108\":1}}],[\"变量\",{\"0\":{\"107\":1},\"1\":{\"249\":1,\"495\":1,\"533\":1,\"537\":2,\"544\":1}}],[\"什么时候使用内部类\",{\"0\":{\"531\":1}}],[\"什么时候不需要导包\",{\"1\":{\"491\":1}}],[\"什么时候需要导包\",{\"1\":{\"491\":1}}],[\"什么时候需要进行转换\",{\"1\":{\"171\":1}}],[\"什么时候会用到继承\",{\"0\":{\"472\":1}}],[\"什么时候用到匿名内部类\",{\"0\":{\"542\":1}}],[\"什么时候用到有返回值的方法\",{\"1\":{\"308\":1}}],[\"什么时候用到方法\",{\"1\":{\"299\":1}}],[\"什么是设计模式\",{\"0\":{\"554\":1}}],[\"什么是内部类\",{\"0\":{\"530\":1}}],[\"什么是继承\",{\"1\":{\"472\":1}}],[\"什么是集合\",{\"1\":{\"390\":1}}],[\"什么是api\",{\"1\":{\"349\":1}}],[\"什么是方法重写\",{\"1\":{\"467\":1}}],[\"什么是方法\",{\"1\":{\"299\":1}}],[\"什么是变量\",{\"0\":{\"108\":1}}],[\"什么是字面量\",{\"1\":{\"106\":1}}],[\"什么是关键字\",{\"1\":{\"103\":1}}],[\"什么是注释\",{\"1\":{\"101\":1}}],[\"什么是cmd\",{\"0\":{\"59\":1}}],[\"<t>\",{\"1\":{\"569\":3}}],[\"<200\",{\"1\":{\"408\":1}}],[\"<<\",{\"1\":{\"214\":1,\"216\":1}}],[\"<=\",{\"1\":{\"192\":1,\"230\":1,\"232\":4,\"241\":1,\"248\":1,\"260\":1,\"261\":1,\"264\":1,\"265\":1,\"367\":3,\"376\":1,\"558\":1,\"559\":1,\"562\":2}}],[\"<\",{\"1\":{\"171\":5,\"192\":1,\"249\":2,\"265\":7,\"266\":1,\"267\":1,\"284\":1,\"290\":1,\"291\":1,\"292\":2,\"293\":1,\"294\":5,\"295\":2,\"296\":2,\"318\":1,\"320\":1,\"361\":1,\"364\":1,\"367\":1,\"370\":2,\"376\":2,\"378\":1,\"384\":1,\"397\":1,\"400\":1,\"401\":1,\"402\":1,\"416\":1,\"453\":2,\"499\":2,\"562\":5,\"567\":2,\"572\":1}}],[\"两种\",{\"1\":{\"482\":1}}],[\"两种提升规则\",{\"0\":{\"170\":1}}],[\"两同\",{\"1\":{\"316\":1}}],[\"两只老虎的体重分别为通过键盘录入获得\",{\"1\":{\"206\":1}}],[\"两个方法\",{\"1\":{\"364\":1}}],[\"两个明确\",{\"1\":{\"319\":1}}],[\"两个byte类型与两个short类型参数\",{\"1\":{\"317\":1}}],[\"两个条件中\",{\"1\":{\"195\":1}}],[\"两个信息选择不同类型的变量\",{\"1\":{\"123\":1}}],[\"两边都是假\",{\"1\":{\"194\":1}}],[\"两边都是真\",{\"1\":{\"194\":1}}],[\"两边都为假\",{\"1\":{\"194\":1}}],[\"两边都为真\",{\"1\":{\"194\":1}}],[\"个人信息码\",{\"1\":{\"379\":1}}],[\"个人主页\",{\"0\":{\"0\":1}}],[\"个数不同\",{\"1\":{\"316\":1}}],[\"个数\",{\"1\":{\"316\":1}}],[\"个数据\",{\"1\":{\"294\":1}}],[\"个\",{\"1\":{\"291\":1,\"367\":3}}],[\"个包子\",{\"1\":{\"260\":1,\"261\":1}}],[\"个位7\",{\"1\":{\"264\":1}}],[\"个位\",{\"1\":{\"167\":2,\"559\":1}}],[\"针对这个问题怎么解决\",{\"1\":{\"576\":1}}],[\"针对于每一个私有化的成员变量都要提供其对应的get和set方法\",{\"1\":{\"346\":1}}],[\"针对于任意一个数组\",{\"1\":{\"289\":1}}],[\"针对于任意的一个数而言\",{\"1\":{\"167\":1}}],[\"针对private修饰的成员变量\",{\"1\":{\"336\":1,\"337\":1}}],[\"针对不同的操作系统\",{\"1\":{\"67\":1}}],[\"百位\",{\"1\":{\"167\":2,\"559\":1}}],[\"百位并打印出来\",{\"1\":{\"167\":1}}],[\"百位后\",{\"1\":{\"167\":1}}],[\"斗地主发牌\",{\"1\":{\"166\":1}}],[\"奇数男性\",{\"1\":{\"379\":1}}],[\"奇数\",{\"1\":{\"166\":1,\"230\":1,\"292\":1}}],[\"他是一个隐含了名字的内部类\",{\"1\":{\"540\":1}}],[\"他们就会出现多少份\",{\"1\":{\"424\":1}}],[\"他们两个都是做除法运算\",{\"1\":{\"182\":1}}],[\"他做的也是除法运算\",{\"1\":{\"166\":1}}],[\"他只是模拟了dos环境而已\",{\"1\":{\"61\":1}}],[\"取舍模式被封装到了roundingmode这个枚举类中\",{\"1\":{\"576\":1}}],[\"取舍模式\",{\"1\":{\"576\":1}}],[\"取消name和age属性\",{\"1\":{\"567\":1}}],[\"取消内部默认布局\",{\"1\":{\"565\":1}}],[\"取消关机操作\",{\"1\":{\"564\":1}}],[\"取反最多只用一个\",{\"1\":{\"197\":2}}],[\"取反\",{\"0\":{\"197\":1}}],[\"取结果的余数\",{\"1\":{\"182\":1}}],[\"取结果的商\",{\"1\":{\"182\":1}}],[\"取余\",{\"1\":{\"166\":1}}],[\"取模的一些应用场景\",{\"1\":{\"166\":1}}],[\"取模\",{\"1\":{\"166\":1}}],[\"取值范围从小到大的关系\",{\"0\":{\"171\":1}}],[\"取值范围小的\",{\"1\":{\"170\":1,\"171\":1}}],[\"取值范围\",{\"1\":{\"116\":1,\"171\":1}}],[\"符合人类思维习惯\",{\"1\":{\"322\":1}}],[\"符合java语法的式子就是表达式\",{\"1\":{\"166\":1}}],[\"符号位不变\",{\"1\":{\"208\":1}}],[\"符号\",{\"1\":{\"192\":1}}],[\"符号标记\",{\"1\":{\"72\":1}}],[\"表现形式\",{\"1\":{\"477\":1}}],[\"表达式2\",{\"1\":{\"203\":1,\"206\":1}}],[\"表达式1\",{\"1\":{\"203\":1,\"206\":1}}],[\"表达式\",{\"0\":{\"166\":1},\"1\":{\"234\":1}}],[\"表示当前的接口是一个标记性接口\",{\"1\":{\"567\":1}}],[\"表示修饰的内容不可变\",{\"1\":{\"495\":1}}],[\"表示调用父类的构造方法\",{\"1\":{\"455\":1}}],[\"表示字符串中的每一个字符\",{\"1\":{\"367\":1}}],[\"表示字符串中的索引\",{\"1\":{\"367\":1}}],[\"表示数组中不存在该数据\",{\"1\":{\"320\":1}}],[\"表示数组里面的每一个元素\",{\"1\":{\"291\":1}}],[\"表示数组里面的每一个索引\",{\"1\":{\"291\":1}}],[\"表示数组里面的元素\",{\"1\":{\"275\":1}}],[\"表示找到了\",{\"1\":{\"320\":1}}],[\"表示该方法没有返回值\",{\"1\":{\"313\":1}}],[\"表示现在打印的数组是int类型的\",{\"1\":{\"280\":1}}],[\"表示现在打印的是一个数组\",{\"1\":{\"280\":1}}],[\"表示现在定义的是一个数组\",{\"1\":{\"272\":1,\"275\":2}}],[\"表示这个范围之内所有的数字都判断完毕了\",{\"1\":{\"266\":1}}],[\"表示这个类的内容\",{\"1\":{\"104\":1}}],[\"表示最初就认为number是一个质数\",{\"1\":{\"266\":1}}],[\"表示标记\",{\"1\":{\"266\":1}}],[\"表示\",{\"1\":{\"261\":1}}],[\"表示结束方法和返回结果\",{\"1\":{\"313\":1}}],[\"表示结束方法\",{\"1\":{\"313\":1}}],[\"表示结束\",{\"1\":{\"260\":1}}],[\"表示每次循环体执行完毕后\",{\"1\":{\"255\":1}}],[\"表示循环之前不定义任何的控制变量\",{\"1\":{\"255\":1}}],[\"表示一个范围\",{\"1\":{\"245\":1}}],[\"表示身上的钱\",{\"1\":{\"229\":2}}],[\"表示小明的考试名次\",{\"1\":{\"226\":2}}],[\"表示a+b表达式得到的结果还是byte类型的\",{\"1\":{\"191\":1}}],[\"表示确定删除\",{\"1\":{\"155\":1}}],[\"表示在桌面新建一个64位的快捷方式\",{\"1\":{\"135\":1}}],[\"表示语句的结束\",{\"1\":{\"110\":1}}],[\"表示真假\",{\"1\":{\"105\":1}}],[\"表示定义一个类\",{\"1\":{\"104\":1}}],[\"表示操作系统不支持自定义的环境变量\",{\"1\":{\"84\":1}}],[\"表示切换到e盘\",{\"1\":{\"61\":1}}],[\"运动计划\",{\"0\":{\"236\":1}}],[\"运算结果跟|是一模一样的\",{\"1\":{\"198\":1}}],[\"运算结果跟\",{\"1\":{\"197\":1}}],[\"运算结果是一模一样的\",{\"1\":{\"185\":1}}],[\"运算规则\",{\"0\":{\"189\":1},\"1\":{\"214\":1}}],[\"运算过程\",{\"1\":{\"187\":1}}],[\"运算特点\",{\"1\":{\"166\":1}}],[\"运算符\",{\"0\":{\"165\":1},\"1\":{\"214\":1}}],[\"运行cmd命令\",{\"1\":{\"564\":3}}],[\"运行时\",{\"1\":{\"486\":1}}],[\"运行报错\",{\"1\":{\"486\":1}}],[\"运行的是子类中的show方法\",{\"1\":{\"478\":1}}],[\"运行的是编译之后的class文件\",{\"1\":{\"72\":1}}],[\"运行看右边\",{\"1\":{\"478\":1}}],[\"运行看左边\",{\"1\":{\"478\":1}}],[\"运行工具\",{\"1\":{\"97\":1}}],[\"运行命令后的class文件名\",{\"1\":{\"76\":1}}],[\"运行编译之后的class文件\",{\"1\":{\"72\":1}}],[\"运行代码\",{\"1\":{\"72\":1,\"146\":1}}],[\"运行程序进行测试\",{\"1\":{\"557\":1,\"562\":5,\"567\":4,\"576\":2}}],[\"运行程序\",{\"1\":{\"71\":1}}],[\"询问是在本窗口打开还是在一个新的窗口打开\",{\"1\":{\"163\":1}}],[\"从desarray数组中的1索引开始复制过去\",{\"1\":{\"562\":1}}],[\"从上面可以看出类与接口之间是可以多实现的\",{\"1\":{\"524\":1}}],[\"从上面格式可以看出\",{\"1\":{\"521\":1}}],[\"从上面案例可以看出\",{\"1\":{\"477\":1}}],[\"从上往下写\",{\"1\":{\"434\":1,\"466\":1}}],[\"从下往上画\",{\"1\":{\"434\":1}}],[\"从右往左获取数据\",{\"1\":{\"376\":1}}],[\"从到右依次打印得来的\",{\"1\":{\"370\":1}}],[\"从0索引开始打乱数据的顺序\",{\"1\":{\"296\":1}}],[\"从0开始\",{\"1\":{\"263\":1}}],[\"从2开始判断\",{\"1\":{\"266\":1}}],[\"从1开始循环判断\",{\"1\":{\"265\":1}}],[\"从1开始循环\",{\"1\":{\"265\":1}}],[\"从1开始到5结束的数据\",{\"1\":{\"243\":1}}],[\"从任意一个数字开始报数\",{\"1\":{\"264\":2}}],[\"从而结束循环\",{\"1\":{\"240\":1}}],[\"从而提高了代码复用\",{\"1\":{\"436\":1}}],[\"从而提高了代码的运行效率\",{\"1\":{\"199\":1}}],[\"从而提高了程序运行的效率\",{\"1\":{\"200\":1}}],[\"从左到右逐个执行的\",{\"1\":{\"180\":1}}],[\"从列表中移除项目\",{\"1\":{\"162\":1}}],[\"从本地硬盘中选择要导入的模块\",{\"1\":{\"157\":1}}],[\"鼠标放在项目上\",{\"1\":{\"160\":1}}],[\"要用bigdecimal类\",{\"1\":{\"576\":1}}],[\"要用必须返回\",{\"1\":{\"401\":1}}],[\"要删除67这个元素\",{\"1\":{\"562\":2}}],[\"要删除的元素\",{\"1\":{\"393\":1}}],[\"要复制的元素个数\",{\"1\":{\"562\":1}}],[\"要想使用system类我们就需要先创建该类的对象\",{\"1\":{\"561\":1}}],[\"要想使用math类我们就需要先创建该类的对象\",{\"1\":{\"556\":1}}],[\"要把接口里面所有的抽象方法\",{\"1\":{\"526\":1}}],[\"要注意的是\",{\"1\":{\"476\":1}}],[\"要添加的元素\",{\"1\":{\"393\":1}}],[\"要做到两个明确\",{\"1\":{\"314\":1}}],[\"要比较\",{\"1\":{\"311\":1}}],[\"要求3\",{\"1\":{\"559\":1,\"560\":1}}],[\"要求2\",{\"1\":{\"559\":1,\"560\":1}}],[\"要求1\",{\"1\":{\"559\":1}}],[\"要求打印内容方式如下\",{\"1\":{\"379\":1}}],[\"要求打乱数组中所有数据的顺序\",{\"1\":{\"296\":1}}],[\"要求分别使用空参和有参构造方法创建对象\",{\"1\":{\"345\":1}}],[\"要求name和age使用private修饰\",{\"1\":{\"337\":1}}],[\"要求遍历的结果是在一行上的\",{\"1\":{\"318\":2}}],[\"要求\",{\"1\":{\"267\":1,\"292\":1,\"401\":2,\"402\":1,\"509\":1}}],[\"要么自己也定义成抽象类\",{\"1\":{\"522\":1}}],[\"要么全部完成接口申明的功能\",{\"1\":{\"522\":1}}],[\"要么重写抽象类中的所有抽象方法\",{\"1\":{\"512\":1}}],[\"要么直接输出\",{\"1\":{\"206\":1}}],[\"要么直接打印出来\",{\"1\":{\"205\":1}}],[\"要么赋值给一个变量\",{\"1\":{\"205\":1,\"206\":1}}],[\"要么买辆车\",{\"1\":{\"195\":1}}],[\"要么是抽象类\",{\"1\":{\"512\":1}}],[\"要么是false\",{\"1\":{\"193\":1}}],[\"要么是true\",{\"1\":{\"193\":1}}],[\"要转成什么类型的\",{\"1\":{\"179\":1}}],[\"要先点击project\",{\"1\":{\"162\":1}}],[\"要创建一个java模块\",{\"1\":{\"154\":1}}],[\"要根据实际的情况来选择不同类型的变量\",{\"1\":{\"118\":1}}],[\"删除数组中第3个元素\",{\"1\":{\"562\":2}}],[\"删除指定的元素\",{\"1\":{\"394\":1}}],[\"删除指定索引处的元素\",{\"1\":{\"393\":1,\"394\":1}}],[\"删除指定元素\",{\"1\":{\"393\":1}}],[\"删除的模块已经不在了\",{\"1\":{\"155\":1}}],[\"删除模块\",{\"0\":{\"155\":1},\"1\":{\"153\":1}}],[\"删除类文件\",{\"0\":{\"151\":1},\"1\":{\"148\":1}}],[\"确定要重复执行的代码\",{\"1\":{\"241\":1}}],[\"确定循环要重复执行的代码\",{\"1\":{\"241\":1}}],[\"确定循环的结束条件\",{\"1\":{\"241\":2}}],[\"确定循环的开始条件\",{\"1\":{\"241\":2}}],[\"确定删除\",{\"1\":{\"151\":1}}],[\"确定自己电脑上的qq安装在哪里\",{\"1\":{\"62\":1}}],[\"搜索一下font\",{\"1\":{\"146\":1}}],[\"搜索一下notepad++就可以了\",{\"1\":{\"86\":1}}],[\"展开模块点击模块中的java文件\",{\"1\":{\"157\":1}}],[\"展开刚刚新建的模块\",{\"1\":{\"146\":1}}],[\"展示按钮\",{\"1\":{\"565\":1}}],[\"展示\",{\"0\":{\"12\":1}}],[\"准备新建一个模块\",{\"1\":{\"146\":1}}],[\"准备安装\",{\"1\":{\"135\":2}}],[\"首先我们来分析一下如下程序的执行结果\",{\"1\":{\"574\":1}}],[\"首先我们先定义两个接口\",{\"1\":{\"524\":1}}],[\"首先我们要回忆两个事情\",{\"1\":{\"455\":1}}],[\"首先检查父类中是否有该方法\",{\"1\":{\"482\":1,\"485\":1}}],[\"首先定义一个学生类\",{\"1\":{\"328\":1,\"412\":1}}],[\"首先计算出表达式的值\",{\"1\":{\"235\":1}}],[\"首先先看看有没有房\",{\"1\":{\"200\":2}}],[\"首先要新建一个项目\",{\"1\":{\"146\":1}}],[\"首字母大写\",{\"1\":{\"127\":1,\"514\":1}}],[\"双击启动图标\",{\"1\":{\"146\":1}}],[\"双击安装包\",{\"1\":{\"135\":1}}],[\"层级关系\",{\"1\":{\"143\":1}}],[\"至少包含了以下不同的业务\",{\"1\":{\"141\":1}}],[\"至少包含了以下模块\",{\"1\":{\"140\":1}}],[\"咨询模块\",{\"1\":{\"140\":1}}],[\"论坛模块\",{\"1\":{\"140\":1}}],[\"京东\",{\"1\":{\"139\":1}}],[\"淘宝\",{\"1\":{\"139\":1}}],[\"包名\",{\"1\":{\"492\":1}}],[\"包名的每个路径名必须是一个合法的标识符\",{\"1\":{\"490\":1}}],[\"包名的命名规范\",{\"1\":{\"490\":1}}],[\"包名必须用\",{\"1\":{\"490\":1}}],[\"包名就可以定义成com\",{\"1\":{\"490\":1}}],[\"包名一般是公司域名的倒写\",{\"1\":{\"490\":1}}],[\"包是用来分门别类的管理技术\",{\"1\":{\"490\":1}}],[\"包在操作系统中其实就是一个文件夹\",{\"1\":{\"490\":1}}],[\"包括jdk7之前\",{\"1\":{\"515\":1}}],[\"包括jdk7\",{\"1\":{\"513\":1}}],[\"包括狗\",{\"1\":{\"489\":1}}],[\"包括猫\",{\"1\":{\"489\":1}}],[\"包下\",{\"1\":{\"352\":1}}],[\"包头不包尾\",{\"1\":{\"263\":1}}],[\"包左不包右\",{\"1\":{\"263\":1}}],[\"包\",{\"0\":{\"141\":1,\"490\":1},\"1\":{\"137\":1}}],[\"包含了\",{\"1\":{\"541\":1}}],[\"包含了jre和开发工具\",{\"1\":{\"97\":1}}],[\"包含了jvm和java的核心类库\",{\"1\":{\"97\":1}}],[\"包含抽象方法的类\",{\"1\":{\"505\":1}}],[\"包含抽象方法的类就是抽象类\",{\"1\":{\"505\":1}}],[\"包含一切动物\",{\"1\":{\"483\":1}}],[\"包含数量\",{\"1\":{\"143\":1}}],[\"包含\",{\"1\":{\"18\":1}}],[\"项目名称和本地硬盘文件夹的名称都已经修改完毕了\",{\"1\":{\"162\":1}}],[\"项目名称已经修改完毕\",{\"1\":{\"162\":1}}],[\"项目就被打开了\",{\"1\":{\"161\":1}}],[\"项目的相关操作\",{\"0\":{\"159\":1}}],[\"项目\",{\"0\":{\"139\":1},\"1\":{\"137\":1,\"145\":1}}],[\"左移1位便在原来值的基础上乘以2\",{\"1\":{\"216\":1}}],[\"左移运算符\",{\"0\":{\"216\":1}}],[\"左移\",{\"1\":{\"214\":1}}],[\"左右相同结果就是false\",{\"1\":{\"196\":1}}],[\"左右不相同\",{\"1\":{\"196\":1}}],[\"左侧是项目列表\",{\"1\":{\"160\":1}}],[\"左侧选择新建\",{\"1\":{\"88\":1}}],[\"左边是黑色背景\",{\"1\":{\"135\":1}}],[\"保证代码可靠性\",{\"1\":{\"554\":1}}],[\"保持默认设置\",{\"1\":{\"135\":1}}],[\"保存\",{\"1\":{\"72\":1}}],[\"勾选64\",{\"1\":{\"135\":1}}],[\"它们的地址值是不相同的\",{\"1\":{\"567\":1}}],[\"它们的值在创建后不能被更改\",{\"1\":{\"353\":1}}],[\"它的最终写法是\",{\"1\":{\"518\":1}}],[\"它的对象在创建后不能被更改\",{\"1\":{\"353\":1}}],[\"它优先于对象存在\",{\"1\":{\"424\":1}}],[\"它可以用来修饰的成员变量和成员方法\",{\"1\":{\"418\":1}}],[\"它是业界公认的目前用于java程序开发最好的工具\",{\"1\":{\"132\":1}}],[\"它包含了java的运行环境和虚拟机\",{\"1\":{\"97\":1}}],[\"导入完毕之后\",{\"1\":{\"157\":1}}],[\"导入模块\",{\"0\":{\"157\":1},\"1\":{\"153\":1}}],[\"导包的动作必须出现在类定义的上边\",{\"1\":{\"263\":1}}],[\"导包\",{\"0\":{\"491\":1},\"1\":{\"130\":2,\"167\":1,\"263\":2}}],[\"导航栏\",{\"1\":{\"6\":1,\"9\":1}}],[\"方式二\",{\"1\":{\"533\":2,\"562\":1}}],[\"方式一\",{\"1\":{\"533\":2,\"562\":1}}],[\"方式给出的字符串\",{\"1\":{\"355\":1}}],[\"方法在底层会帮我们创建一个对象\",{\"1\":{\"567\":1}}],[\"方法参数说明\",{\"1\":{\"562\":1}}],[\"方法和变量\",{\"1\":{\"495\":1}}],[\"方法打印内容如下\",{\"1\":{\"489\":2}}],[\"方法重写建议加上哪个注解\",{\"1\":{\"467\":1}}],[\"方法重写的注意事项和要求\",{\"0\":{\"453\":1}}],[\"方法重写的本质\",{\"0\":{\"452\":1},\"1\":{\"467\":1}}],[\"方法重写是发生在子父类之间的关系\",{\"1\":{\"451\":1}}],[\"方法重写\",{\"0\":{\"447\":1},\"1\":{\"448\":1,\"495\":1,\"541\":1,\"543\":1}}],[\"方法重载练习\",{\"0\":{\"317\":1}}],[\"方法重载指同一个类中定义的多个方法之间的关系\",{\"1\":{\"316\":1}}],[\"方法重载概念\",{\"1\":{\"316\":1}}],[\"方法重载\",{\"0\":{\"315\":1,\"316\":1}}],[\"方法返回的是自身对象\",{\"1\":{\"382\":1}}],[\"方法介绍\",{\"1\":{\"358\":1}}],[\"方法用public修饰\",{\"1\":{\"336\":2,\"337\":2}}],[\"方法内部或方法声明上\",{\"1\":{\"333\":1}}],[\"方法2\",{\"1\":{\"326\":1}}],[\"方法1\",{\"1\":{\"326\":1}}],[\"方法操作完毕之后返回的数据的数据类型如果方法操作完毕\",{\"1\":{\"314\":1}}],[\"方法有返回值\",{\"1\":{\"313\":1}}],[\"方法有什么好处\",{\"1\":{\"299\":1}}],[\"方法没有返回值\",{\"1\":{\"313\":1}}],[\"方法与方法之间是平级关系\",{\"1\":{\"313\":1}}],[\"方法不能满足自己的需求\",{\"1\":{\"449\":1}}],[\"方法不能嵌套定义\",{\"1\":{\"313\":1}}],[\"方法不调用就不执行\",{\"1\":{\"313\":1}}],[\"方法调用中的参数\",{\"1\":{\"305\":1}}],[\"方法调用时\",{\"1\":{\"304\":1}}],[\"方法定义的小技巧\",{\"1\":{\"305\":1}}],[\"方法定义中的参数\",{\"1\":{\"305\":1}}],[\"方法定义时return后面的返回值与方法定义上的数据类型要匹配\",{\"1\":{\"308\":1}}],[\"方法定义时\",{\"1\":{\"304\":2}}],[\"方法中定义两个变量\",{\"1\":{\"302\":1}}],[\"方法中调用定义好的方法并直接打印结果\",{\"1\":{\"309\":2}}],[\"方法中调用定义好的方法并使用变量保存\",{\"1\":{\"309\":2}}],[\"方法中调用定义好的方法\",{\"1\":{\"302\":2,\"306\":4}}],[\"方法必须先定义\",{\"1\":{\"301\":1}}],[\"方法必须先创建才可以使用\",{\"1\":{\"299\":1}}],[\"方法体\",{\"1\":{\"301\":2,\"304\":2,\"308\":1,\"314\":2,\"316\":8,\"498\":1}}],[\"方法的重写\",{\"1\":{\"477\":1}}],[\"方法的重载虚拟机怎么来进行区分调用的是哪一个\",{\"1\":{\"316\":1}}],[\"方法的访问特点\",{\"0\":{\"468\":1}}],[\"方法的作用就是反转字符串\",{\"1\":{\"373\":1}}],[\"方法的形参\",{\"1\":{\"489\":1}}],[\"方法的形参就可以定义为共同的父类person\",{\"1\":{\"476\":1}}],[\"方法的形参没有与成员变量同名\",{\"1\":{\"338\":1}}],[\"方法的形参如果与成员变量同名\",{\"1\":{\"338\":1}}],[\"方法的通用格式\",{\"0\":{\"314\":1}}],[\"方法的返回值类型为void\",{\"1\":{\"313\":1}}],[\"方法的返回值通常会使用变量接收\",{\"1\":{\"308\":1}}],[\"方法的编写顺序和执行顺序无关\",{\"1\":{\"313\":1}}],[\"方法的注意事项\",{\"0\":{\"312\":1,\"313\":1}}],[\"方法的调用处是否需要使用方法的结果\",{\"1\":{\"402\":1}}],[\"方法的调用处是否需要继续使用方法的结果\",{\"1\":{\"401\":1}}],[\"方法的调用处\",{\"1\":{\"311\":1}}],[\"方法的定义和调用\",{\"0\":{\"300\":1}}],[\"方法的概念\",{\"0\":{\"299\":1}}],[\"方法是程序中最小的执行单元\",{\"1\":{\"299\":1}}],[\"方法创建后并不是直接可以运行的\",{\"1\":{\"299\":1}}],[\"方法\",{\"1\":{\"299\":1,\"317\":1,\"335\":1,\"336\":2,\"337\":2,\"423\":1,\"438\":1,\"489\":3,\"495\":1,\"567\":2}}],[\"方法概述\",{\"0\":{\"298\":1}}],[\"方法括号跟数组名\",{\"1\":{\"273\":1}}],[\"方法名称与父类全部一样\",{\"1\":{\"450\":1}}],[\"方法名称即可访问\",{\"1\":{\"422\":1}}],[\"方法名和参数列表都相同\",{\"1\":{\"448\":1}}],[\"方法名与类名相同\",{\"1\":{\"342\":1}}],[\"方法名相同\",{\"1\":{\"316\":1}}],[\"方法名\",{\"1\":{\"129\":1,\"301\":2,\"304\":4,\"308\":4,\"314\":2,\"327\":1,\"354\":1,\"392\":1,\"393\":1,\"475\":1,\"498\":1,\"507\":1,\"512\":1,\"537\":1,\"538\":1,\"548\":1,\"549\":1,\"551\":2}}],[\"方便调用方法\",{\"1\":{\"494\":1}}],[\"方便创建对象\",{\"1\":{\"494\":1}}],[\"方便以后使用\",{\"1\":{\"272\":1,\"275\":1}}],[\"方便管理和维护\",{\"1\":{\"490\":1}}],[\"方便管理\",{\"1\":{\"68\":1,\"87\":1}}],[\"方括号\",{\"1\":{\"272\":1,\"275\":2}}],[\"错误原因\",{\"1\":{\"316\":2}}],[\"错误范例\",{\"1\":{\"316\":1}}],[\"错误写法\",{\"1\":{\"275\":1}}],[\"错误\",{\"1\":{\"129\":2}}],[\"尽量不要用拼音\",{\"1\":{\"129\":1}}],[\"阿里巴巴命名规范细节\",{\"0\":{\"129\":1}}],[\"软性建议\",{\"0\":{\"126\":1}}],[\"数组拷贝\",{\"1\":{\"562\":1}}],[\"数组元素的确进行复制了\",{\"1\":{\"562\":1}}],[\"数组为int\",{\"1\":{\"384\":1}}],[\"数组为\",{\"1\":{\"369\":1,\"370\":1}}],[\"数组最大值\",{\"0\":{\"319\":1}}],[\"数组\",{\"1\":{\"318\":1,\"320\":1}}],[\"数组遍历\",{\"0\":{\"318\":1}}],[\"数组中每一位能表示的数字\",{\"1\":{\"573\":1}}],[\"数组中最多能存储元素个数\",{\"1\":{\"573\":1}}],[\"数组中的数据按照指定的格式拼接成一个字符串返回\",{\"1\":{\"369\":1,\"370\":1,\"384\":1}}],[\"数组中平均数为\",{\"1\":{\"294\":1}}],[\"数组中所有数据的和为\",{\"1\":{\"294\":1}}],[\"数组中能被3整除的数字有\",{\"1\":{\"291\":1}}],[\"数组中元素访问的格式\",{\"1\":{\"283\":1}}],[\"数组的默认初始化值\",{\"0\":{\"287\":1}}],[\"数组的长度\",{\"1\":{\"284\":1,\"285\":1,\"289\":1}}],[\"数组的地址值\",{\"1\":{\"280\":1}}],[\"数组一旦创建之后\",{\"1\":{\"276\":1}}],[\"数组名\",{\"1\":{\"270\":1,\"271\":1,\"272\":1,\"274\":1,\"275\":1,\"277\":1,\"281\":1,\"283\":1,\"284\":1,\"285\":1,\"289\":1,\"294\":1}}],[\"数值取反\",{\"1\":{\"208\":1}}],[\"数值拆分\",{\"0\":{\"167\":1}}],[\"数字字符有\",{\"1\":{\"367\":1}}],[\"数字字符出现的次数\",{\"1\":{\"366\":1}}],[\"数字出现的次数\",{\"1\":{\"367\":1}}],[\"数字\",{\"1\":{\"167\":7,\"320\":1}}],[\"数字不能开头\",{\"1\":{\"125\":1}}],[\"数据源数组\",{\"1\":{\"562\":1}}],[\"数据初始化\",{\"1\":{\"503\":1}}],[\"数据来自于参数\",{\"1\":{\"309\":1}}],[\"数据来自于方法参数\",{\"1\":{\"306\":1}}],[\"数据\",{\"1\":{\"294\":1,\"308\":1,\"314\":1}}],[\"数据的精度丢失\",{\"1\":{\"179\":1}}],[\"数据值\",{\"1\":{\"109\":1,\"110\":1,\"111\":1,\"113\":1,\"119\":1}}],[\"数据类型是编程语言自己规定的\",{\"1\":{\"573\":1}}],[\"数据类型不一样的时候\",{\"1\":{\"171\":1}}],[\"数据类型\",{\"0\":{\"114\":1},\"1\":{\"109\":1,\"110\":1,\"111\":1,\"113\":1,\"116\":1,\"119\":1,\"270\":1,\"271\":1,\"272\":1,\"274\":2,\"275\":2,\"277\":1,\"285\":2,\"304\":1,\"308\":2,\"328\":1,\"420\":1,\"487\":1,\"538\":1}}],[\"数据在程序中的书写格式\",{\"1\":{\"105\":1,\"106\":1}}],[\"美元符号$组成\",{\"1\":{\"125\":1}}],[\"否则会报错\",{\"1\":{\"562\":2,\"572\":1}}],[\"否则抽象类将毫无意义\",{\"1\":{\"512\":1}}],[\"否则子类也必须定义成抽象类\",{\"1\":{\"511\":1}}],[\"否则编译阶段报错\",{\"1\":{\"450\":1}}],[\"否则该返回值将无意义\",{\"1\":{\"308\":1}}],[\"否则程序将报错\",{\"1\":{\"301\":1,\"304\":1,\"308\":1}}],[\"否则这个数叫做合数\",{\"1\":{\"266\":1}}],[\"否则循环就停止\",{\"1\":{\"249\":1}}],[\"否则循环将一直执行下去\",{\"1\":{\"240\":1}}],[\"否则\",{\"1\":{\"228\":1,\"229\":1,\"509\":1}}],[\"否则没有任何回应\",{\"1\":{\"225\":1}}],[\"否则代码会报错\",{\"1\":{\"125\":1,\"256\":1,\"257\":1}}],[\"否则就会出现问题\",{\"1\":{\"79\":1}}],[\"硬性要求\",{\"0\":{\"125\":1}}],[\"华为\",{\"1\":{\"123\":1}}],[\"刘鑫\",{\"1\":{\"122\":1}}],[\"评分\",{\"1\":{\"122\":1}}],[\"评论\",{\"1\":{\"6\":1,\"9\":1,\"141\":1}}],[\"将最后一个位置的元素设置为0\",{\"1\":{\"562\":1}}],[\"将最终数据打印出来\",{\"1\":{\"243\":1,\"244\":1}}],[\"将内部类定义在方法里面就叫做局部内部类\",{\"1\":{\"538\":1}}],[\"将一个类a定义在另一个类b里面\",{\"1\":{\"530\":1}}],[\"将父类引用转为子类引用\",{\"1\":{\"484\":1}}],[\"将指定的元素追加到此集合的末尾\",{\"1\":{\"393\":1}}],[\"将中间四位号码屏蔽\",{\"1\":{\"377\":2}}],[\"将类的某些信息隐藏在类内部\",{\"1\":{\"335\":1}}],[\"将结果返回给调用处\",{\"1\":{\"320\":2}}],[\"将全班的学生成绩存入数组中\",{\"1\":{\"289\":1}}],[\"将arr数组中\",{\"1\":{\"283\":1}}],[\"将反复进行的事情写入循环结构内部\",{\"1\":{\"243\":1}}],[\"将其拆分为个位\",{\"1\":{\"167\":1}}],[\"将\",{\"1\":{\"122\":1,\"123\":1}}],[\"将你的个人介绍和档案放置在此处\",{\"1\":{\"1\":1}}],[\"男\",{\"1\":{\"121\":1,\"346\":1,\"379\":2,\"404\":1,\"418\":1,\"463\":2}}],[\"默认情况下equals方法比较的是对象的地址值\",{\"1\":{\"567\":1}}],[\"默认调用的就是tostring\",{\"1\":{\"567\":1}}],[\"默认在1分钟之后关机\",{\"1\":{\"564\":1}}],[\"默认方法不是抽象方法\",{\"1\":{\"548\":1}}],[\"默认修饰符\",{\"1\":{\"527\":2}}],[\"默认会加上\",{\"1\":{\"516\":1}}],[\"默认\",{\"1\":{\"493\":2,\"494\":1,\"534\":1,\"547\":1}}],[\"默认先访问父类中无参的构造方法\",{\"1\":{\"471\":1}}],[\"默认是空着不写\",{\"1\":{\"493\":1}}],[\"默认是去找本类中的其他构造方法\",{\"1\":{\"463\":2}}],[\"默认是module\",{\"1\":{\"162\":1}}],[\"默认就存在\",{\"1\":{\"456\":2,\"459\":2,\"461\":1}}],[\"默认就自带了无参数构造器\",{\"1\":{\"343\":1}}],[\"默认将数据添加到末尾\",{\"1\":{\"389\":1}}],[\"默认值不能为0吗\",{\"1\":{\"293\":1}}],[\"默认表示true\",{\"1\":{\"255\":1}}],[\"默认使用double\",{\"1\":{\"120\":1}}],[\"默认使用int\",{\"1\":{\"120\":1}}],[\"默认的安装路径是在c\",{\"1\":{\"68\":1}}],[\"gson\",{\"1\":{\"567\":3}}],[\"girl11\",{\"1\":{\"567\":1}}],[\"goswimming\",{\"1\":{\"546\":5}}],[\"go\",{\"1\":{\"525\":1}}],[\"goto\",{\"1\":{\"103\":1}}],[\"gdx\",{\"1\":{\"378\":2}}],[\"generate\",{\"1\":{\"567\":1}}],[\"gender\",{\"1\":{\"121\":2,\"346\":8,\"379\":2}}],[\"ge\",{\"1\":{\"376\":2,\"559\":2}}],[\"getpath\",{\"1\":{\"567\":1}}],[\"getpassword\",{\"1\":{\"346\":3,\"567\":1}}],[\"getdata\",{\"1\":{\"567\":3}}],[\"getruntime\",{\"1\":{\"564\":9,\"565\":4}}],[\"getwang\",{\"1\":{\"466\":2}}],[\"getclass\",{\"1\":{\"567\":3}}],[\"getcontentpane\",{\"1\":{\"565\":8}}],[\"getcolor\",{\"1\":{\"466\":3,\"489\":7}}],[\"getcapitalnumber\",{\"1\":{\"376\":2}}],[\"getter\",{\"1\":{\"456\":1,\"459\":2,\"461\":2}}],[\"getnum2\",{\"1\":{\"439\":2}}],[\"getname\",{\"1\":{\"337\":3,\"338\":1,\"345\":1,\"400\":1,\"408\":1,\"416\":1,\"435\":4,\"459\":1,\"461\":1,\"463\":2,\"466\":3,\"476\":3,\"489\":1,\"518\":2,\"562\":2,\"567\":2}}],[\"getsource\",{\"1\":{\"565\":1}}],[\"getsex\",{\"1\":{\"463\":2}}],[\"getscore\",{\"1\":{\"459\":1,\"461\":1}}],[\"getsalary\",{\"1\":{\"435\":4}}],[\"getsum\",{\"1\":{\"310\":5}}],[\"getinstance\",{\"1\":{\"533\":2}}],[\"getindex\",{\"1\":{\"401\":2}}],[\"getid\",{\"1\":{\"401\":1,\"402\":1,\"567\":1}}],[\"getgender\",{\"1\":{\"346\":3}}],[\"getemail\",{\"1\":{\"346\":3}}],[\"getusername\",{\"1\":{\"346\":3,\"567\":1}}],[\"get和set\",{\"1\":{\"346\":1}}],[\"get和set方法\",{\"1\":{\"344\":1,\"476\":1}}],[\"getxxx\",{\"1\":{\"337\":1,\"344\":1}}],[\"get\",{\"1\":{\"337\":1,\"393\":1,\"394\":5,\"397\":2,\"400\":1,\"401\":1,\"402\":2}}],[\"getage\",{\"1\":{\"336\":1,\"337\":3,\"338\":1,\"345\":1,\"346\":3,\"400\":1,\"408\":1,\"416\":1,\"435\":4,\"459\":1,\"461\":1,\"463\":2,\"466\":3,\"476\":3,\"489\":8,\"562\":2}}],[\"getarea\",{\"1\":{\"311\":3}}],[\"get变量名\",{\"1\":{\"336\":1}}],[\"getmax\",{\"1\":{\"302\":2,\"304\":2,\"306\":5,\"308\":1,\"309\":3,\"319\":2}}],[\"guessnumber\",{\"1\":{\"267\":3}}],[\"g\",{\"1\":{\"119\":2}}],[\">>>\",{\"1\":{\"214\":1}}],[\">>\",{\"1\":{\"214\":1,\"217\":1}}],[\">=\",{\"1\":{\"192\":1,\"229\":1,\"230\":1,\"232\":4,\"367\":3,\"373\":1,\"376\":1}}],[\">\",{\"1\":{\"118\":5,\"120\":5,\"192\":1,\"206\":4,\"225\":1,\"228\":1,\"237\":4,\"238\":3,\"265\":3,\"267\":1,\"293\":1,\"302\":1,\"306\":1,\"309\":1,\"311\":1,\"319\":1,\"341\":1,\"373\":1,\"379\":11,\"408\":1,\"416\":1,\"493\":3,\"567\":2,\"569\":1}}],[\"同一包中的类\",{\"1\":{\"494\":1}}],[\"同一类中\",{\"1\":{\"494\":1}}],[\"同一个类中\",{\"1\":{\"316\":1}}],[\"同时我们可以发现objects类中所提供的方法都是静态的\",{\"1\":{\"568\":1}}],[\"同时我们发现system类中的方法都是静态的\",{\"1\":{\"561\":1}}],[\"同时我们发现math类中的方法都是静态的\",{\"1\":{\"556\":1}}],[\"同时选择name和age属性\",{\"1\":{\"567\":1}}],[\"同时实现其他接口呢\",{\"1\":{\"526\":2}}],[\"同时可读性好\",{\"1\":{\"467\":1}}],[\"同时可以为对象进行赋值\",{\"1\":{\"343\":1}}],[\"同时每个页面包含\",{\"1\":{\"9\":1}}],[\"同样还是创建一个什么都没有的空项目\",{\"1\":{\"163\":1}}],[\"同样\",{\"1\":{\"117\":1}}],[\"~\",{\"1\":{\"116\":6,\"118\":2,\"232\":1,\"263\":1,\"267\":2,\"364\":1,\"559\":1,\"570\":1,\"572\":3}}],[\"内部有优化\",{\"1\":{\"572\":3}}],[\"内部类名\",{\"1\":{\"537\":1}}],[\"内部类构造器\",{\"1\":{\"537\":2}}],[\"内部类访问外部类对象的格式是\",{\"1\":{\"535\":1}}],[\"内部类如果想要访问外部类的成员变量\",{\"1\":{\"534\":1}}],[\"内部类被static修饰是成员内部类中的特殊情况\",{\"1\":{\"534\":1}}],[\"内部类被private修饰\",{\"1\":{\"534\":1}}],[\"内部类中的方法被调用了\",{\"1\":{\"533\":1}}],[\"内部类\",{\"1\":{\"533\":4,\"537\":5,\"538\":1}}],[\"内部类的使用格式\",{\"1\":{\"533\":1,\"537\":1}}],[\"内部类的分类\",{\"0\":{\"532\":1}}],[\"内部的事物脱离外部的事物无法独立使用\",{\"1\":{\"531\":1}}],[\"内存分析工具\",{\"0\":{\"473\":1}}],[\"内存图\",{\"0\":{\"473\":1}}],[\"内存中位置不同\",{\"1\":{\"333\":1}}],[\"内存占用\",{\"1\":{\"116\":1}}],[\"内容就是abc\",{\"1\":{\"354\":2}}],[\"内容可有可无\",{\"1\":{\"105\":1}}],[\"内容\",{\"1\":{\"15\":1,\"318\":3}}],[\"定义目标数组\",{\"1\":{\"562\":1}}],[\"定义源数组\",{\"1\":{\"562\":1}}],[\"定义接口的实现类\",{\"1\":{\"542\":1}}],[\"定义子类\",{\"1\":{\"542\":1}}],[\"定义在方法中的类\",{\"1\":{\"538\":1}}],[\"定义在测试类中的方法需要加static\",{\"1\":{\"402\":1}}],[\"定义了很多数学运算的方法\",{\"1\":{\"556\":1}}],[\"定义了不同的keeppet方法\",{\"1\":{\"489\":1}}],[\"定义了一个int类型的数组\",{\"1\":{\"269\":1}}],[\"定义person类\",{\"1\":{\"489\":1}}],[\"定义猫类\",{\"1\":{\"489\":1}}],[\"定义狗类\",{\"1\":{\"489\":1}}],[\"定义测试类\",{\"1\":{\"485\":1,\"489\":1}}],[\"定义类\",{\"1\":{\"485\":1}}],[\"定义类的补充注意事项\",{\"1\":{\"328\":1}}],[\"定义方法的时候\",{\"1\":{\"479\":1}}],[\"定义方法时\",{\"1\":{\"314\":1}}],[\"定义集合\",{\"1\":{\"402\":1}}],[\"定义标准学生类\",{\"1\":{\"345\":1}}],[\"定义标准的学生类\",{\"1\":{\"337\":1}}],[\"定义求和变量\",{\"1\":{\"294\":1}}],[\"定义数组\",{\"1\":{\"294\":1,\"376\":1,\"384\":1}}],[\"定义数组用来存储5个值\",{\"1\":{\"293\":1}}],[\"定义数组求最大值\",{\"1\":{\"293\":1}}],[\"定义数组存储1~5\",{\"1\":{\"296\":1}}],[\"定义数组存储数据\",{\"1\":{\"295\":1}}],[\"定义数组存储4个学生的身高\",{\"1\":{\"280\":1}}],[\"定义数组存储3个学生的姓名\",{\"1\":{\"279\":1}}],[\"定义数组存储5个学生的年龄\",{\"1\":{\"278\":1}}],[\"定义两个变量用来记录正确的用户名和密码\",{\"1\":{\"361\":1}}],[\"定义两个变量\",{\"1\":{\"224\":1,\"228\":1}}],[\"定义三个变量记录和尚的身高\",{\"1\":{\"206\":1}}],[\"定义三个变量记录主演的名字\",{\"1\":{\"122\":1}}],[\"定义小数类型的变量记录手机的价格\",{\"1\":{\"123\":1}}],[\"定义小数类型的变量记录电影的评分\",{\"1\":{\"122\":1}}],[\"定义小数类型的变量记录老师的身高\",{\"1\":{\"121\":1}}],[\"定义整数类型的变量记录年龄的年份\",{\"1\":{\"122\":1}}],[\"定义整数类型的变量记录老师的年龄\",{\"1\":{\"121\":1}}],[\"定义布尔类型的变量记录老师的婚姻状况\",{\"1\":{\"121\":1}}],[\"定义字符串类型的变量记录手机的品牌\",{\"1\":{\"123\":1}}],[\"定义字符串类型的变量记录老师的姓名\",{\"1\":{\"121\":1}}],[\"定义字符串变量记录电影的名称\",{\"1\":{\"122\":1}}],[\"定义字符类型的变量记录老师的性别\",{\"1\":{\"121\":1}}],[\"定义5个变量记录老师的信息并打印\",{\"1\":{\"121\":1}}],[\"定义boolean类型的变量\",{\"1\":{\"119\":1}}],[\"定义byte类型的变量\",{\"1\":{\"119\":1}}],[\"定义char类型的变量\",{\"1\":{\"119\":1}}],[\"定义double类型的变量\",{\"1\":{\"119\":1}}],[\"定义float类型的变量\",{\"1\":{\"119\":1}}],[\"定义long类型的变量\",{\"1\":{\"119\":1}}],[\"定义int类型的变量\",{\"1\":{\"119\":1}}],[\"定义short类型的变量\",{\"1\":{\"119\":1}}],[\"定义8种基本数据类型变量\",{\"0\":{\"119\":1}}],[\"定义格式如下\",{\"1\":{\"431\":1}}],[\"定义格式和使用\",{\"0\":{\"419\":1}}],[\"定义格式\",{\"0\":{\"514\":1},\"1\":{\"113\":1,\"301\":1,\"304\":1,\"308\":1,\"420\":1,\"507\":1,\"508\":1,\"538\":1}}],[\"定义一个没有名字的内部类\",{\"1\":{\"545\":1}}],[\"定义一个子类继承抽象类\",{\"1\":{\"509\":2}}],[\"定义一个字符串记录身份证号码\",{\"1\":{\"379\":1}}],[\"定义一个字符串\",{\"1\":{\"373\":1}}],[\"定义一个方法把数字变成大写的中文\",{\"1\":{\"376\":1}}],[\"定义一个方法获取数字\",{\"1\":{\"320\":2}}],[\"定义一个方法\",{\"1\":{\"302\":1,\"306\":1,\"309\":1,\"310\":2,\"319\":1,\"369\":1,\"370\":1,\"372\":1,\"373\":2,\"384\":1,\"401\":2,\"402\":1,\"546\":1}}],[\"定义一个数组用来存多个敏感词\",{\"1\":{\"378\":1}}],[\"定义一个数组表示单位\",{\"1\":{\"376\":1}}],[\"定义一个数组\",{\"1\":{\"286\":2,\"290\":3,\"291\":2,\"292\":2,\"295\":1,\"296\":1,\"319\":1,\"562\":2}}],[\"定义一个变量用来表示钱的大写\",{\"1\":{\"376\":1}}],[\"定义一个变量max用来存储最大值\",{\"1\":{\"293\":1}}],[\"定义一个变量\",{\"1\":{\"266\":1,\"291\":1}}],[\"定义一个变量表示骂人的话\",{\"1\":{\"378\":1}}],[\"定义一个变量表示纸张的厚度\",{\"1\":{\"249\":1}}],[\"定义一个变量表示珠穆朗玛峰的高度\",{\"1\":{\"249\":1}}],[\"定义一个计数器\",{\"1\":{\"249\":1}}],[\"定义一个小数类型的变量\",{\"1\":{\"111\":1}}],[\"定义一个整数类型的变量\",{\"1\":{\"111\":1}}],[\"车上一共几位乘客\",{\"1\":{\"113\":1}}],[\"车上一共多少乘客\",{\"1\":{\"113\":1}}],[\"车上一共有多少乘客\",{\"1\":{\"113\":1}}],[\"问变量result是什么类型的\",{\"1\":{\"174\":1,\"175\":1,\"176\":1,\"177\":1}}],[\"问\",{\"1\":{\"113\":1}}],[\"问题\",{\"1\":{\"77\":1,\"78\":1,\"79\":1,\"80\":1}}],[\"没有名字的内部类\",{\"1\":{\"532\":1}}],[\"没有\",{\"1\":{\"527\":1}}],[\"没有意义\",{\"1\":{\"511\":2}}],[\"没有方法体的方法\",{\"1\":{\"505\":1}}],[\"没有修饰符\",{\"1\":{\"493\":1}}],[\"没有这种动物\",{\"1\":{\"489\":1}}],[\"没有这个类型\",{\"1\":{\"488\":1}}],[\"没有这个星期\",{\"1\":{\"236\":1,\"238\":2}}],[\"没有就报错\",{\"1\":{\"478\":2}}],[\"没有static修饰的成员变量和方法则是属于对象的\",{\"1\":{\"418\":1}}],[\"没有具体的返回值\",{\"1\":{\"342\":1}}],[\"没有void关键字\",{\"1\":{\"342\":1}}],[\"没有返回值类型\",{\"1\":{\"342\":1}}],[\"没有返回值的方法可以省略return语句不写\",{\"1\":{\"313\":1}}],[\"没有默认初始化值\",{\"1\":{\"333\":1}}],[\"没有数据返回\",{\"1\":{\"314\":1}}],[\"没有特定的语法结构\",{\"1\":{\"222\":1}}],[\"没有原码和反码\",{\"1\":{\"209\":1}}],[\"没有不要了\",{\"1\":{\"200\":1}}],[\"没有其他操作\",{\"1\":{\"182\":1}}],[\"没有字符串参与的\",{\"1\":{\"180\":1}}],[\"没有上去乘客\",{\"1\":{\"113\":1}}],[\"没有下来乘客\",{\"1\":{\"113\":2}}],[\"没有用到9~11的新特性\",{\"1\":{\"90\":1}}],[\"说出公交车到终点站之后\",{\"1\":{\"113\":1}}],[\"说明这个成员方法是属于类的\",{\"1\":{\"422\":1}}],[\"说明这个成员变量是属于类的\",{\"1\":{\"420\":1}}],[\"说明\",{\"0\":{\"117\":1},\"1\":{\"61\":1,\"69\":1,\"105\":1,\"354\":1,\"392\":1,\"393\":1}}],[\"了解完常见的构造方法以后\",{\"1\":{\"576\":1}}],[\"了解性的方法可以可以作为扩展视频进行下发\",{\"1\":{\"569\":1}}],[\"了解内容\",{\"1\":{\"556\":1,\"561\":1,\"568\":1}}],[\"了解即可\",{\"1\":{\"500\":1}}],[\"了解一下即可\",{\"1\":{\"196\":1}}],[\"了解\",{\"1\":{\"112\":1,\"113\":1}}],[\"案例图解\",{\"0\":{\"462\":1}}],[\"案例图解分析\",{\"0\":{\"434\":1}}],[\"案例演示\",{\"0\":{\"456\":1,\"485\":1,\"518\":1},\"1\":{\"525\":1,\"533\":1,\"537\":1}}],[\"案例代码实现\",{\"0\":{\"435\":1}}],[\"案例需求\",{\"0\":{\"375\":1,\"396\":1,\"399\":1}}],[\"案例3\",{\"1\":{\"180\":1}}],[\"案例2\",{\"1\":{\"180\":1}}],[\"案例1\",{\"1\":{\"180\":1}}],[\"案例六\",{\"0\":{\"177\":1}}],[\"案例五\",{\"0\":{\"176\":1}}],[\"案例四\",{\"0\":{\"175\":1}}],[\"案例三\",{\"0\":{\"174\":1}}],[\"案例二\",{\"0\":{\"173\":1}}],[\"案例一\",{\"0\":{\"172\":1}}],[\"案例\",{\"0\":{\"182\":1,\"186\":1,\"190\":1,\"206\":1,\"433\":1},\"1\":{\"112\":1,\"166\":2,\"179\":1,\"187\":1}}],[\"浮点数默认是double类型\",{\"1\":{\"117\":1}}],[\"浮点数\",{\"1\":{\"111\":1,\"116\":1,\"120\":1}}],[\"分别统计有多少个四叶玫瑰数和五角星数\",{\"1\":{\"559\":1,\"560\":1}}],[\"分享书写技巧\",{\"1\":{\"466\":1}}],[\"分隔\",{\"1\":{\"304\":1}}],[\"分数不合法\",{\"1\":{\"232\":1}}],[\"分析如下\",{\"1\":{\"428\":1}}],[\"分析\",{\"1\":{\"225\":1,\"226\":1,\"229\":1,\"230\":1,\"232\":1,\"238\":1,\"264\":1,\"265\":1,\"266\":1,\"290\":1,\"291\":1,\"292\":1,\"294\":1,\"328\":1}}],[\"分类\",{\"0\":{\"183\":1,\"188\":1,\"192\":1},\"1\":{\"166\":1,\"182\":1,\"197\":1}}],[\"分类为\",{\"1\":{\"32\":1}}],[\"分步图解\",{\"0\":{\"146\":1}}],[\"分号\",{\"1\":{\"110\":1}}],[\"真正存储在容器中的数据\",{\"1\":{\"110\":1}}],[\"真正的dos命令是1981年微软和ibm出品的ms\",{\"1\":{\"61\":1}}],[\"直接删除\",{\"1\":{\"576\":1}}],[\"直接进1\",{\"1\":{\"576\":1}}],[\"直接输出对象s1\",{\"1\":{\"567\":1}}],[\"直接找父类\",{\"1\":{\"467\":1}}],[\"直接父类间接父类\",{\"1\":{\"431\":1}}],[\"直接类名访问\",{\"1\":{\"426\":1}}],[\"直接用\",{\"1\":{\"420\":1,\"422\":1}}],[\"直接赋值\",{\"1\":{\"386\":1,\"499\":1}}],[\"直接赋值的方式\",{\"1\":{\"386\":1}}],[\"直接赋值的方式得到对象\",{\"1\":{\"358\":1}}],[\"直接赋值的方式创建字符串对象\",{\"1\":{\"354\":2}}],[\"直接赋值方式创建\",{\"1\":{\"355\":1}}],[\"直接调用即可\",{\"1\":{\"314\":1}}],[\"直接调用\",{\"1\":{\"308\":1}}],[\"直接打印count即可\",{\"1\":{\"291\":1}}],[\"直接把变量写在小括号中即可\",{\"1\":{\"227\":1}}],[\"直接点击即可\",{\"1\":{\"160\":1}}],[\"直接点击下一步就可以了\",{\"1\":{\"87\":1}}],[\"直接从硬盘中删掉了\",{\"1\":{\"151\":1}}],[\"直接使用变量名就可以了\",{\"1\":{\"110\":1}}],[\"最常见的取舍方式有如下几个\",{\"1\":{\"576\":1}}],[\"最常用到的内部类就是匿名内部类了\",{\"1\":{\"540\":1}}],[\"最值的认知和讲解我们在数组中已经讲解过了\",{\"1\":{\"319\":1}}],[\"最大索引\",{\"1\":{\"289\":1,\"397\":1}}],[\"最小索引\",{\"1\":{\"289\":1}}],[\"最后一次机会\",{\"1\":{\"361\":1}}],[\"最后\",{\"1\":{\"235\":1}}],[\"最为常用\",{\"1\":{\"202\":1}}],[\"最为常用的格式\",{\"1\":{\"258\":1}}],[\"最为常用的\",{\"1\":{\"187\":1}}],[\"最为常用的数据类型选择\",{\"1\":{\"118\":1}}],[\"最为简单的赋值运算符用法\",{\"1\":{\"187\":1}}],[\"最终就会造成精度丢失\",{\"1\":{\"574\":1}}],[\"最终只是为了调用方法\",{\"1\":{\"542\":1}}],[\"最终的含义\",{\"1\":{\"495\":1}}],[\"最终的结果直接为true\",{\"1\":{\"200\":1}}],[\"最终的结果直接为false\",{\"1\":{\"200\":1}}],[\"最终的结果其实就是两个long相加\",{\"1\":{\"174\":1}}],[\"最终效果为\",{\"1\":{\"377\":2}}],[\"最终控制台输出\",{\"1\":{\"337\":1}}],[\"最终结果也是int类型的\",{\"1\":{\"176\":1}}],[\"最终其实就是两个int类型的相加\",{\"1\":{\"176\":1}}],[\"最终其实就是三个double进行相加\",{\"1\":{\"175\":1}}],[\"最下面会弹出控制台\",{\"1\":{\"146\":1}}],[\"最多补8个空格\",{\"1\":{\"106\":1}}],[\"最少补一个空格\",{\"1\":{\"106\":1}}],[\"制表符\",{\"1\":{\"106\":2}}],[\"空白处\",{\"1\":{\"567\":1}}],[\"空着不写\",{\"1\":{\"453\":1}}],[\"空参\",{\"1\":{\"466\":1}}],[\"空参构造方法\",{\"1\":{\"346\":1}}],[\"空参构造\",{\"1\":{\"346\":1,\"476\":1}}],[\"空参创建的对象通过setxxx赋值\",{\"1\":{\"345\":1}}],[\"空类型\",{\"1\":{\"106\":1}}],[\"空类型的字面量只有一个值\",{\"1\":{\"106\":1}}],[\"空\",{\"1\":{\"106\":1}}],[\"空值\",{\"1\":{\"105\":2}}],[\"只需要用其中一个\",{\"1\":{\"526\":1}}],[\"只需要学习这些类如何使用即可\",{\"1\":{\"349\":1}}],[\"只执行一次\",{\"1\":{\"503\":1}}],[\"只执行重写后的show方法\",{\"1\":{\"446\":1}}],[\"只是访问的时候需要加上外部类\",{\"1\":{\"537\":1}}],[\"只是关键字不同\",{\"1\":{\"520\":1}}],[\"只是方法体中的功能重写写了\",{\"1\":{\"450\":1}}],[\"只是子类无法直接访问而已\",{\"1\":{\"438\":1}}],[\"只是没有了符号位的区分\",{\"1\":{\"218\":1}}],[\"只换行\",{\"1\":{\"318\":1}}],[\"只打印不换行\",{\"1\":{\"318\":1}}],[\"只明确元素个数\",{\"1\":{\"288\":1}}],[\"只有声明还有意义\",{\"1\":{\"505\":1}}],[\"只有虚方法表里面的方法可以被重写\",{\"1\":{\"467\":1}}],[\"只有被添加到虚方法表中的方法才能被重写\",{\"1\":{\"453\":1}}],[\"只有一份\",{\"1\":{\"420\":1,\"422\":1}}],[\"只有当集合里面所有的元素全部比较完毕才能认为是不存在的\",{\"1\":{\"402\":1}}],[\"只有当这个循环结束了\",{\"1\":{\"266\":1}}],[\"只有number是变量名\",{\"1\":{\"263\":1}}],[\"只有r是变量名\",{\"1\":{\"263\":1}}],[\"只有判断为真\",{\"1\":{\"249\":1}}],[\"只有纸张的厚度\",{\"1\":{\"249\":1}}],[\"只有两个值\",{\"1\":{\"105\":1}}],[\"只不过要把里面所有的抽象方法全部重写\",{\"1\":{\"526\":1}}],[\"只不过\",{\"1\":{\"526\":1}}],[\"只不过具有短路效果\",{\"1\":{\"197\":1,\"198\":1}}],[\"只不过获取的是余数而已\",{\"1\":{\"166\":1}}],[\"只能在long的取值范围之内\",{\"1\":{\"572\":1}}],[\"只能在本类进行访问\",{\"1\":{\"336\":1}}],[\"只能通过3\",{\"1\":{\"534\":1}}],[\"只能单继承\",{\"1\":{\"528\":1}}],[\"只能是抽象方法\",{\"1\":{\"527\":1}}],[\"只能是常量\",{\"1\":{\"527\":1}}],[\"只能创建其非抽象子类的对象\",{\"1\":{\"511\":1}}],[\"只能选择其中一个\",{\"1\":{\"500\":1}}],[\"只能赋值一次\",{\"1\":{\"499\":1}}],[\"只能把参数写成这三个类型的父类\",{\"1\":{\"476\":1}}],[\"只能定义三个不同的register方法分别接收学生\",{\"1\":{\"476\":1}}],[\"只能访问静态\",{\"1\":{\"425\":1}}],[\"只能存储引用数据类型\",{\"1\":{\"390\":1}}],[\"只能存在于循环当中\",{\"1\":{\"261\":1}}],[\"只能存一个值\",{\"1\":{\"112\":1}}],[\"只能打印\",{\"1\":{\"106\":1}}],[\"只要进行计算都会产生一个新的biginteger对象\",{\"1\":{\"572\":1}}],[\"只要重写一次即可\",{\"1\":{\"526\":1}}],[\"只要当idea报错之后\",{\"1\":{\"511\":1,\"526\":1}}],[\"只要继承那一个类即可\",{\"1\":{\"428\":1}}],[\"只要字符序列相同\",{\"1\":{\"355\":1}}],[\"只要获取第一个即可\",{\"1\":{\"320\":2}}],[\"只要直接使用就可以了\",{\"1\":{\"262\":1}}],[\"只要满足其中一个\",{\"1\":{\"195\":1}}],[\"只要有一个失败了都不行\",{\"1\":{\"195\":1}}],[\"只要有一个为真\",{\"1\":{\"194\":1}}],[\"只要有一个为假\",{\"1\":{\"194\":1}}],[\"只要用双引号引起来的\",{\"1\":{\"106\":1}}],[\"只要带了小数点\",{\"1\":{\"106\":1}}],[\"欢迎来到黑马程序员\",{\"1\":{\"105\":1}}],[\"布尔类型\",{\"1\":{\"287\":1}}],[\"布尔\",{\"1\":{\"106\":1,\"116\":1,\"120\":1}}],[\"布尔值\",{\"1\":{\"105\":2}}],[\"布局包括\",{\"1\":{\"9\":1}}],[\"布局\",{\"0\":{\"9\":1},\"2\":{\"11\":1}}],[\"布局与功能禁用\",{\"0\":{\"6\":1}}],[\"有的时候计算机并不会将这个数据完全转换成一个二进制数据\",{\"1\":{\"574\":1}}],[\"有多大呢\",{\"1\":{\"570\":1}}],[\"有多少个数据满足要求\",{\"1\":{\"187\":1}}],[\"有点磕碜\",{\"1\":{\"565\":1}}],[\"有static修饰\",{\"1\":{\"537\":1}}],[\"有static修饰的内部类\",{\"1\":{\"532\":1}}],[\"有static修饰成员方法\",{\"1\":{\"422\":1}}],[\"有static修饰成员变量\",{\"1\":{\"420\":1}}],[\"有10个抽象方法\",{\"1\":{\"526\":1}}],[\"有默认的super\",{\"1\":{\"511\":1}}],[\"有默认初始化值\",{\"1\":{\"333\":1}}],[\"有失\",{\"1\":{\"510\":1}}],[\"有得\",{\"1\":{\"510\":1}}],[\"有得有失\",{\"1\":{\"510\":1}}],[\"有且仅能被赋值一次\",{\"1\":{\"495\":1}}],[\"有且仅能一个字符\",{\"1\":{\"105\":1}}],[\"有继承或者实现关系\",{\"1\":{\"477\":1}}],[\"有继承关系\",{\"1\":{\"475\":1}}],[\"有了多态之后\",{\"1\":{\"476\":1}}],[\"有一个默认的super\",{\"1\":{\"471\":1}}],[\"有可能会使用到父类中的数据\",{\"1\":{\"471\":1}}],[\"有什么好处\",{\"1\":{\"467\":1}}],[\"有什么事\",{\"1\":{\"335\":1}}],[\"有参创建的对象直接赋值\",{\"1\":{\"345\":1}}],[\"有参数构造方法\",{\"1\":{\"343\":1,\"417\":1,\"418\":1}}],[\"有需要时去找就行\",{\"1\":{\"335\":1}}],[\"有数据返回\",{\"1\":{\"314\":1}}],[\"有返回值方法中参数的运行过程\",{\"1\":{\"308\":1}}],[\"有返回值方法的调用格式\",{\"1\":{\"308\":1}}],[\"有返回值方法的定义格式\",{\"1\":{\"308\":1}}],[\"有新的植物时直接使用打包好的代码即可\",{\"1\":{\"299\":1}}],[\"有没有数字可以被number整除\",{\"1\":{\"266\":1}}],[\"有效的分数\",{\"1\":{\"232\":1}}],[\"有true则为true\",{\"1\":{\"215\":1}}],[\"有false则为false\",{\"1\":{\"215\":1}}],[\"有车\",{\"1\":{\"200\":2}}],[\"有房\",{\"1\":{\"200\":2}}],[\"有字符串参与的\",{\"1\":{\"180\":5}}],[\"有哪些不容组成\",{\"1\":{\"97\":1}}],[\"有哪些内容组成\",{\"1\":{\"97\":1}}],[\"必须重写实现的全部接口中所有抽象方法\",{\"1\":{\"522\":1}}],[\"必须重写抽象父类中所有的抽象方法\",{\"1\":{\"511\":1}}],[\"必须是抽象类\",{\"1\":{\"512\":1}}],[\"必须做向下转型\",{\"1\":{\"482\":1,\"485\":1}}],[\"必须手动书写\",{\"1\":{\"471\":1}}],[\"必须再第一行\",{\"1\":{\"456\":2,\"459\":2,\"461\":1}}],[\"必须先执行父类的初始化动作\",{\"1\":{\"455\":1}}],[\"必须先定义\",{\"1\":{\"333\":1}}],[\"必须用对象访问\",{\"1\":{\"423\":1}}],[\"必须创建对象调用\",{\"1\":{\"423\":1}}],[\"必须创建类的对象才可以访问\",{\"1\":{\"421\":1,\"423\":1}}],[\"必须返回\",{\"1\":{\"402\":1}}],[\"必须在循环外部\",{\"1\":{\"243\":1}}],[\"必须有浮点数参与运算\",{\"1\":{\"182\":1}}],[\"必须要保证权限大于等于父类权限\",{\"1\":{\"451\":1}}],[\"必须要写\",{\"1\":{\"313\":1}}],[\"必须要有小数参数\",{\"1\":{\"166\":1}}],[\"必须要这么做\",{\"1\":{\"125\":1}}],[\"必须由数字\",{\"1\":{\"125\":1}}],[\"必须使用双引号\",{\"1\":{\"105\":1}}],[\"必须使用单引号\",{\"1\":{\"105\":1}}],[\"必须可以的\",{\"1\":{\"90\":1}}],[\"字母\",{\"1\":{\"125\":1}}],[\"字符类型\",{\"1\":{\"287\":1}}],[\"字符类型的字面量只有两个值\",{\"1\":{\"106\":1}}],[\"字符类型的字面量必须用单引号引起来\",{\"1\":{\"106\":1}}],[\"字符串中的数字必须要跟进制吻合\",{\"1\":{\"572\":1}}],[\"字符串中的数字必须是整数\",{\"1\":{\"572\":1}}],[\"字符串中必须是整数\",{\"1\":{\"572\":1}}],[\"字符串复用\",{\"1\":{\"567\":1}}],[\"字符串存储的内存原理\",{\"1\":{\"386\":1}}],[\"字符串的反转\",{\"1\":{\"380\":1,\"383\":1}}],[\"字符串的拼接\",{\"1\":{\"380\":1,\"383\":1}}],[\"字符串的内容是不会发生改变的\",{\"1\":{\"353\":1}}],[\"字符串效果上相当于字符数组\",{\"1\":{\"353\":1}}],[\"字符串不可变\",{\"1\":{\"353\":1}}],[\"字符串只有+操作\",{\"1\":{\"182\":1}}],[\"字符串\",{\"1\":{\"105\":1,\"106\":2,\"269\":1,\"378\":1}}],[\"字符\",{\"1\":{\"105\":1,\"106\":1,\"116\":1,\"120\":1}}],[\"字面量类型\",{\"1\":{\"105\":1}}],[\"字面量\",{\"0\":{\"105\":1}}],[\"整数类型\",{\"1\":{\"287\":1}}],[\"整数类型和小数类型的取值范围大小关系\",{\"1\":{\"118\":1}}],[\"整数1\",{\"1\":{\"269\":1}}],[\"整数操作只能得到整数\",{\"1\":{\"182\":1}}],[\"整数默认是int类型的\",{\"1\":{\"172\":1}}],[\"整数相除结果只能得到整除\",{\"1\":{\"166\":1}}],[\"整数和小数的取值范围大小关系\",{\"1\":{\"120\":1}}],[\"整数\",{\"1\":{\"105\":1,\"106\":1,\"111\":1,\"116\":1,\"120\":1,\"311\":2}}],[\"告诉程序员\",{\"1\":{\"105\":1,\"106\":1}}],[\"告诉操作系统jdk提供的javac\",{\"1\":{\"83\":1}}],[\"告诉操作系统jdk安装在了哪个位置\",{\"1\":{\"83\":1}}],[\"解决接口与接口实现类之间的矛盾问题\",{\"1\":{\"554\":1}}],[\"解决接口升级的问题\",{\"1\":{\"548\":1}}],[\"解释\",{\"1\":{\"104\":1,\"172\":1,\"173\":1,\"174\":1,\"175\":1,\"176\":1,\"177\":1,\"180\":3,\"192\":1,\"255\":1,\"256\":1,\"257\":1,\"314\":2}}],[\"解惑\",{\"1\":{\"60\":1,\"62\":1,\"90\":1}}],[\"简化格式\",{\"0\":{\"277\":1}}],[\"简单的办法\",{\"1\":{\"346\":1}}],[\"简单了解\",{\"1\":{\"280\":1}}],[\"简单说就是控制循环是否能执行下去\",{\"1\":{\"241\":1}}],[\"简单说就是循环反复执行的事情\",{\"1\":{\"241\":1}}],[\"简单说就是循环开始的时候什么样\",{\"1\":{\"241\":1}}],[\"简单说就是判断循环是否能一直执行下去\",{\"1\":{\"241\":1}}],[\"简单理解\",{\"1\":{\"179\":1,\"325\":2,\"554\":1}}],[\"简单记忆\",{\"0\":{\"169\":1},\"1\":{\"316\":1}}],[\"简单易用\",{\"1\":{\"95\":1}}],[\"简称\",{\"1\":{\"104\":1}}],[\"类似于方法里面的局部变量\",{\"1\":{\"538\":1}}],[\"类似于之前学过的\",{\"1\":{\"443\":1}}],[\"类定义在方法内\",{\"1\":{\"532\":1}}],[\"类定义在了成员位置\",{\"1\":{\"532\":2}}],[\"类和接口的关系\",{\"1\":{\"528\":1}}],[\"类和类的关系\",{\"1\":{\"528\":1}}],[\"类和对象的关系\",{\"1\":{\"325\":1}}],[\"类和对象的理解\",{\"0\":{\"325\":1}}],[\"类和对象\",{\"0\":{\"324\":1}}],[\"类与接口是实现关系\",{\"1\":{\"525\":1}}],[\"类与接口之间的关系是多实现的\",{\"1\":{\"524\":1}}],[\"类与接口的多实现案例\",{\"0\":{\"524\":1}}],[\"类与接口的关系为实现关系\",{\"1\":{\"520\":1}}],[\"类与接口基本实现案例\",{\"0\":{\"523\":1}}],[\"类实现接口的要求和意义\",{\"0\":{\"522\":1}}],[\"类在\",{\"1\":{\"352\":1}}],[\"类代表字符串\",{\"1\":{\"352\":1}}],[\"类中的成员变量私有了\",{\"1\":{\"443\":1}}],[\"类中的成员变量是非私有的\",{\"1\":{\"443\":1}}],[\"类中方法外称为成员位置\",{\"1\":{\"532\":2}}],[\"类中方法外\",{\"1\":{\"333\":1}}],[\"类中方法外的变量\",{\"1\":{\"326\":1}}],[\"类中位置不同\",{\"1\":{\"333\":1}}],[\"类就是对现实事物的一种描述\",{\"1\":{\"325\":1}}],[\"类是具有相同属性和行为的一组对象的集合\",{\"1\":{\"325\":1}}],[\"类是对事物的一种描述\",{\"1\":{\"325\":1}}],[\"类是对象的数据类型\",{\"1\":{\"325\":1}}],[\"类是对现实生活中一类具有共同属性和行为的事物的抽象\",{\"1\":{\"325\":2}}],[\"类的对象\",{\"1\":{\"352\":1}}],[\"类的定义格式如下\",{\"1\":{\"404\":1}}],[\"类的定义步骤\",{\"1\":{\"326\":1}}],[\"类的定义\",{\"0\":{\"326\":1}}],[\"类的组成是由属性和行为两部分组成\",{\"1\":{\"326\":1}}],[\"类的组成\",{\"1\":{\"325\":1}}],[\"类的理解\",{\"1\":{\"325\":1}}],[\"类的相关操作\",{\"0\":{\"148\":1}}],[\"类型转换异常\",{\"1\":{\"486\":1}}],[\"类型不同\",{\"1\":{\"316\":1}}],[\"类型不同或者数量不同\",{\"1\":{\"316\":1}}],[\"类型\",{\"1\":{\"316\":1}}],[\"类\",{\"0\":{\"142\":1},\"1\":{\"104\":1,\"137\":1,\"145\":1,\"325\":2,\"495\":1}}],[\"类名或者接口名\",{\"1\":{\"541\":1}}],[\"类名字\",{\"1\":{\"508\":1}}],[\"类名访问即可\",{\"1\":{\"420\":1,\"422\":1}}],[\"类名需要见名知意\",{\"1\":{\"344\":1}}],[\"类名首字母建议大写\",{\"1\":{\"328\":1}}],[\"类名起名字的时候\",{\"1\":{\"129\":1}}],[\"类名\",{\"1\":{\"76\":1,\"104\":2,\"326\":2,\"327\":4,\"340\":2,\"404\":1,\"405\":2,\"411\":1,\"412\":2,\"420\":1,\"422\":1,\"492\":1,\"497\":1,\"512\":1,\"521\":1,\"523\":1}}],[\"后期在进行两个数的除法运算的时候\",{\"1\":{\"576\":1}}],[\"后续代码无需修改\",{\"1\":{\"479\":1}}],[\"后裔你玩什么啊\",{\"1\":{\"378\":3}}],[\"后调用\",{\"1\":{\"301\":1}}],[\"后面会学\",{\"1\":{\"476\":1}}],[\"后面会出现一个叉\",{\"1\":{\"160\":1}}],[\"后面不能跟具体的数据\",{\"1\":{\"313\":1}}],[\"后面不加数据\",{\"1\":{\"313\":1}}],[\"后面的数字就不需要再找了\",{\"1\":{\"265\":1}}],[\"后面跟上的是类名\",{\"1\":{\"103\":1}}],[\"后缀名\",{\"1\":{\"72\":1}}],[\"后缀名为java的才是java文件\",{\"1\":{\"72\":1}}],[\"非零表示异常退出\",{\"1\":{\"562\":1}}],[\"非private\",{\"1\":{\"467\":1}}],[\"非静态方法可以访问所有\",{\"1\":{\"425\":1}}],[\"非静态方法可以访问静态变量或者静态方法\",{\"1\":{\"425\":1}}],[\"非最大索引\",{\"1\":{\"397\":1}}],[\"非对称字符串\",{\"1\":{\"383\":1}}],[\"非void类型的方法\",{\"1\":{\"314\":1}}],[\"非常的麻烦\",{\"1\":{\"299\":1}}],[\"非常的直观\",{\"1\":{\"103\":1}}],[\"非法字符问题\",{\"1\":{\"76\":1}}],[\"not\",{\"1\":{\"624\":1}}],[\"notepad++\",{\"0\":{\"85\":1},\"1\":{\"88\":1}}],[\"no\",{\"1\":{\"576\":1}}],[\"non\",{\"1\":{\"576\":1}}],[\"nonnull\",{\"1\":{\"569\":2}}],[\"nobut\",{\"1\":{\"565\":5}}],[\"nt\",{\"1\":{\"378\":1}}],[\"num=5\",{\"1\":{\"443\":1}}],[\"num=6\",{\"1\":{\"443\":1}}],[\"num=1\",{\"1\":{\"443\":1}}],[\"num=\",{\"1\":{\"441\":1,\"442\":2,\"443\":3}}],[\"num\",{\"1\":{\"379\":2,\"441\":2,\"442\":6,\"443\":6,\"500\":2,\"572\":2}}],[\"num2=\",{\"1\":{\"441\":1}}],[\"num2\",{\"1\":{\"304\":1,\"439\":6,\"441\":2,\"500\":5}}],[\"num1\",{\"1\":{\"304\":1,\"439\":2}}],[\"numbercount++\",{\"1\":{\"367\":1}}],[\"numbercount\",{\"1\":{\"367\":2}}],[\"number\",{\"1\":{\"167\":4,\"237\":2,\"263\":3,\"265\":7,\"266\":8,\"267\":4,\"283\":2,\"294\":2,\"304\":1,\"305\":2,\"308\":1,\"319\":3,\"320\":2,\"376\":2,\"558\":3,\"562\":6}}],[\"null不能直接打印\",{\"1\":{\"106\":1}}],[\"null\",{\"1\":{\"105\":1,\"106\":3,\"287\":1,\"459\":1,\"565\":3,\"567\":1}}],[\"nested\",{\"1\":{\"561\":1}}],[\"next\",{\"1\":{\"361\":2,\"364\":1,\"367\":1,\"373\":1,\"377\":1,\"378\":1,\"383\":1}}],[\"nextint\",{\"1\":{\"130\":1,\"167\":1,\"206\":2,\"225\":1,\"226\":1,\"229\":1,\"230\":1,\"232\":1,\"236\":1,\"238\":1,\"263\":2,\"265\":1,\"266\":1,\"267\":2,\"294\":1,\"296\":1,\"311\":2,\"376\":1}}],[\"newdata\",{\"1\":{\"567\":2}}],[\"new出来的字符串\",{\"1\":{\"386\":1}}],[\"new\",{\"1\":{\"103\":1,\"130\":1,\"146\":1,\"160\":1,\"167\":1,\"206\":1,\"225\":1,\"226\":1,\"229\":1,\"230\":1,\"232\":1,\"236\":1,\"238\":1,\"263\":2,\"265\":1,\"266\":1,\"267\":2,\"274\":3,\"275\":2,\"278\":1,\"279\":1,\"280\":1,\"285\":1,\"286\":2,\"287\":1,\"289\":2,\"294\":2,\"296\":1,\"311\":1,\"327\":4,\"328\":1,\"336\":1,\"337\":1,\"340\":2,\"343\":4,\"345\":2,\"346\":2,\"354\":3,\"355\":2,\"358\":2,\"361\":1,\"364\":1,\"367\":1,\"373\":1,\"376\":1,\"377\":1,\"378\":1,\"381\":1,\"382\":1,\"383\":2,\"384\":1,\"385\":2,\"386\":1,\"394\":1,\"397\":1,\"400\":4,\"401\":4,\"402\":4,\"405\":2,\"412\":3,\"423\":1,\"435\":3,\"439\":1,\"441\":1,\"442\":1,\"443\":1,\"445\":1,\"446\":1,\"449\":1,\"456\":2,\"459\":1,\"461\":1,\"463\":1,\"466\":2,\"475\":1,\"476\":3,\"478\":1,\"479\":1,\"480\":1,\"483\":2,\"484\":1,\"485\":1,\"486\":1,\"487\":1,\"489\":7,\"492\":2,\"509\":3,\"523\":1,\"533\":7,\"535\":2,\"537\":3,\"541\":1,\"542\":1,\"543\":1,\"544\":3,\"546\":4,\"562\":5,\"565\":9,\"567\":7,\"569\":10,\"572\":4,\"576\":10}}],[\"nanjing\",{\"1\":{\"129\":1}}],[\"name=\",{\"1\":{\"567\":3}}],[\"namesarr\",{\"1\":{\"275\":1,\"279\":2}}],[\"name3\",{\"1\":{\"122\":2}}],[\"name2\",{\"1\":{\"122\":2}}],[\"name1\",{\"1\":{\"122\":2}}],[\"name\",{\"1\":{\"121\":2,\"127\":1,\"129\":2,\"180\":2,\"328\":4,\"336\":3,\"337\":4,\"338\":6,\"340\":2,\"343\":10,\"345\":9,\"404\":1,\"408\":4,\"412\":5,\"416\":5,\"417\":4,\"418\":1,\"423\":2,\"435\":5,\"456\":1,\"459\":1,\"461\":7,\"463\":9,\"466\":12,\"476\":2,\"478\":1,\"489\":12,\"500\":1,\"509\":8,\"518\":1,\"533\":1,\"537\":7,\"562\":14,\"567\":5,\"569\":2}}],[\"native\",{\"1\":{\"103\":1,\"562\":2}}],[\"n\",{\"1\":{\"106\":1,\"174\":2,\"175\":2,\"177\":2,\"337\":2,\"408\":2}}],[\"程序开始了\",{\"1\":{\"562\":1}}],[\"程序开始执行了\",{\"1\":{\"562\":2}}],[\"程序终止了\",{\"1\":{\"562\":2}}],[\"程序的重用性\",{\"1\":{\"554\":1}}],[\"程序判断出该字符串是否是对称字符串\",{\"1\":{\"383\":1}}],[\"程序自动生成一个1\",{\"1\":{\"267\":1}}],[\"程序中所有的双引号字符串\",{\"1\":{\"352\":1}}],[\"程序中的所有字符串文字\",{\"1\":{\"352\":1}}],[\"程序中的写法\",{\"1\":{\"105\":1}}],[\"程序中大多数的代码都是这样执行的\",{\"1\":{\"222\":1}}],[\"程序在运行的时候\",{\"1\":{\"103\":1}}],[\"程序员自己编写的代码\",{\"1\":{\"72\":1}}],[\"关机并重启\",{\"1\":{\"564\":1}}],[\"关机\",{\"1\":{\"564\":1}}],[\"关于枚举我们后期再做重点讲解\",{\"1\":{\"576\":1}}],[\"关于hashcode方法后期再做重点介绍\",{\"1\":{\"567\":1}}],[\"关于接口的使用\",{\"1\":{\"526\":1}}],[\"关于抽象类的使用\",{\"1\":{\"511\":1}}],[\"关于今天知识的小结\",{\"0\":{\"466\":1}}],[\"关于\",{\"1\":{\"418\":1}}],[\"关于字符串的小扩展\",{\"0\":{\"386\":1}}],[\"关于这些扩展\",{\"1\":{\"16\":1}}],[\"关系表达式2\",{\"1\":{\"231\":1}}],[\"关系表达式1\",{\"1\":{\"231\":1}}],[\"关系表达式\",{\"1\":{\"203\":1,\"206\":1,\"224\":1,\"228\":1}}],[\"关系运算符最终的结果一定是布尔类型的\",{\"1\":{\"193\":1}}],[\"关闭项目\",{\"0\":{\"160\":1},\"1\":{\"159\":1}}],[\"关键字修饰方法\",{\"1\":{\"507\":1}}],[\"关键字的使用\",{\"1\":{\"418\":1}}],[\"关键字的特点\",{\"1\":{\"103\":1}}],[\"关键字来修饰成员变量\",{\"1\":{\"407\":1}}],[\"关键字全部小写\",{\"1\":{\"103\":1}}],[\"关键字很多\",{\"1\":{\"103\":1}}],[\"关键字\",{\"0\":{\"102\":1},\"1\":{\"116\":1,\"402\":1,\"431\":1,\"443\":1,\"487\":1,\"495\":1}}],[\"都存储到数组中\",{\"1\":{\"577\":1}}],[\"都无法达到这个上限\",{\"1\":{\"570\":1}}],[\"都完全拷贝过来\",{\"1\":{\"567\":1}}],[\"都必须是在构造方法的第一行\",{\"1\":{\"461\":1,\"464\":1}}],[\"都只会建立一个\",{\"1\":{\"355\":1}}],[\"都被实现为此类的实例\",{\"1\":{\"352\":1}}],[\"都手工书写无参数构造方法\",{\"1\":{\"341\":1}}],[\"都有不同的内存划分\",{\"1\":{\"331\":1}}],[\"都需要发射子弹\",{\"1\":{\"299\":1}}],[\"都是0101010101\",{\"1\":{\"573\":1}}],[\"都是3个\",{\"1\":{\"559\":1,\"560\":1}}],[\"都是一次新的变量c\",{\"1\":{\"499\":1}}],[\"都是被final修饰的\",{\"1\":{\"497\":1}}],[\"都是吃这一行为\",{\"1\":{\"477\":1}}],[\"都是\",{\"1\":{\"352\":1}}],[\"都是先转换为int类型\",{\"1\":{\"191\":1}}],[\"都是字符串类型的字面量\",{\"1\":{\"106\":1}}],[\"都会在第一行默认先调用父类无参数构造方法一次\",{\"1\":{\"457\":1}}],[\"都会在控制台上展示\",{\"1\":{\"146\":1}}],[\"都会申请一个内存空间\",{\"1\":{\"355\":1}}],[\"都会执行\",{\"1\":{\"200\":1}}],[\"都会进行类型提升\",{\"1\":{\"175\":1}}],[\"都会直接先提升为int\",{\"1\":{\"170\":1,\"171\":1}}],[\"都要做到见名知意\",{\"1\":{\"128\":1}}],[\"都不会影响代码运行的结果\",{\"1\":{\"101\":1}}],[\"都可以启动某一个软件\",{\"1\":{\"63\":1}}],[\"当点击上方按钮之后取消关机任务\",{\"1\":{\"565\":1}}],[\"当你的好基友点击中间三个按钮的时候就在n秒之后关机\",{\"1\":{\"565\":1}}],[\"当你要报的数字是包含7或者是7的倍数时都要说过\",{\"1\":{\"264\":2}}],[\"当一个接口中抽象方法过多\",{\"1\":{\"554\":1}}],[\"当一个方法的参数是接口时\",{\"1\":{\"552\":1}}],[\"当一个方法的形参是一个接口\",{\"1\":{\"476\":1}}],[\"当一个方法的形参是一个类\",{\"1\":{\"476\":1}}],[\"当两个接口中存在相同抽象方法的时候\",{\"1\":{\"526\":1}}],[\"当两种条件只要满足其中一个的时候\",{\"1\":{\"195\":1}}],[\"当前类的对象就不能克隆\",{\"1\":{\"567\":1}}],[\"当前类可以访问\",{\"1\":{\"493\":1}}],[\"当前系统的运行环境对象\",{\"1\":{\"564\":2}}],[\"当前时间所对应的毫秒值为\",{\"1\":{\"562\":2}}],[\"当前时间为0时区所对应的时间即就是英国格林尼治天文台旧址所在位置\",{\"1\":{\"562\":1}}],[\"当前字符串不是对称字符串\",{\"1\":{\"383\":1}}],[\"当前字符串是对称字符串\",{\"1\":{\"383\":1}}],[\"当然不能转换成dog对象的\",{\"1\":{\"486\":1}}],[\"当父类引用指向一个子类对象时\",{\"1\":{\"483\":1}}],[\"当使用多态方式调用方法时\",{\"1\":{\"482\":1,\"485\":1}}],[\"当类与类之间\",{\"1\":{\"472\":1}}],[\"当类之间产生了关系\",{\"1\":{\"444\":1,\"455\":1}}],[\"当类之间产生了继承关系后\",{\"1\":{\"440\":1}}],[\"当\",{\"1\":{\"424\":1}}],[\"当循环结束之后\",{\"1\":{\"290\":1,\"291\":1,\"293\":1,\"294\":1,\"295\":1,\"296\":1,\"320\":1,\"367\":1}}],[\"当循环执行完毕时\",{\"1\":{\"243\":1,\"244\":1}}],[\"当访问了数组中不存在的索引\",{\"1\":{\"289\":1}}],[\"当不知道循环次数\",{\"1\":{\"251\":1}}],[\"当知道循环次数或者循环范围的时候\",{\"1\":{\"251\":1}}],[\"当反复\",{\"1\":{\"240\":1}}],[\"当左边能确定整个表达式的结果\",{\"1\":{\"199\":1}}],[\"当左边不能确定整个表达式的结果\",{\"1\":{\"199\":1}}],[\"当我们在程序中写了一个十进制数据\",{\"1\":{\"574\":1}}],[\"当我们在拼接字符串和反转字符串的时候会使用到\",{\"1\":{\"380\":1}}],[\"当我们在代码中写了关键字之后\",{\"1\":{\"103\":1}}],[\"当我们把有限个数据列举出来\",{\"1\":{\"237\":1}}],[\"当我们需要对一个范围进行判断的时候\",{\"1\":{\"237\":1}}],[\"当我们需要同时满足左边和右边两种情况时\",{\"1\":{\"195\":1}}],[\"当+操作中出现了字符\",{\"1\":{\"181\":1}}],[\"当+操作中出现字符串时\",{\"1\":{\"180\":1}}],[\"当字符串跟变量相加的时候\",{\"1\":{\"180\":1}}],[\"当出现连续的\",{\"1\":{\"180\":1}}],[\"当连续进行+操作时\",{\"1\":{\"180\":1}}],[\"当看到这个界面\",{\"1\":{\"135\":1}}],[\"当程序运行之后\",{\"1\":{\"130\":1}}],[\"当以后想要使用变量里面的数据时\",{\"1\":{\"110\":1}}],[\"当注释的内容比较少\",{\"1\":{\"100\":1}}],[\"当电脑重启之后\",{\"1\":{\"84\":1}}],[\"单位byte字节\",{\"1\":{\"564\":2}}],[\"单位byte\",{\"1\":{\"564\":6}}],[\"单继承\",{\"1\":{\"431\":1}}],[\"单独被继承的那一个类称为父类\",{\"1\":{\"428\":1}}],[\"单独写在一行的时候\",{\"1\":{\"185\":1}}],[\"单个对象内存图\",{\"0\":{\"330\":1}}],[\"单行注释\",{\"1\":{\"99\":1,\"101\":1}}],[\"单词\",{\"1\":{\"22\":1}}],[\"跨平台\",{\"1\":{\"95\":1}}],[\"开始编写标准javabean\",{\"1\":{\"466\":1}}],[\"开始条件\",{\"1\":{\"241\":1}}],[\"开始\",{\"1\":{\"224\":1,\"228\":1,\"264\":1,\"265\":1}}],[\"开源\",{\"1\":{\"95\":1}}],[\"开发中\",{\"1\":{\"540\":1}}],[\"开发工具\",{\"1\":{\"97\":1}}],[\"开发java程序\",{\"1\":{\"71\":1,\"82\":1}}],[\"开发常用\",{\"0\":{\"3\":1}}],[\"9字符串拼接案例\",{\"0\":{\"368\":1}}],[\"98\",{\"1\":{\"319\":1,\"354\":1}}],[\"999\",{\"1\":{\"559\":2}}],[\"9999999\",{\"1\":{\"376\":1}}],[\"995次\",{\"1\":{\"558\":1}}],[\"997\",{\"1\":{\"558\":2}}],[\"99\",{\"1\":{\"263\":1,\"267\":1,\"289\":2,\"354\":1,\"435\":3,\"456\":1,\"459\":2,\"461\":2}}],[\"9468\",{\"1\":{\"377\":2}}],[\"94\",{\"1\":{\"232\":1}}],[\"95\",{\"1\":{\"232\":1}}],[\"95~100\",{\"1\":{\"232\":1}}],[\"90\",{\"1\":{\"232\":1}}],[\"90~94\",{\"1\":{\"232\":1}}],[\"9000000e\",{\"1\":{\"116\":1}}],[\"97\",{\"1\":{\"182\":2,\"354\":1}}],[\"9\",{\"0\":{\"95\":1,\"96\":1,\"369\":1,\"370\":1,\"458\":1,\"459\":1,\"460\":1,\"461\":1,\"462\":1,\"463\":1,\"464\":1,\"539\":1,\"540\":1,\"541\":1,\"542\":1,\"543\":1,\"544\":1,\"545\":1,\"546\":1},\"1\":{\"122\":1,\"264\":2,\"265\":2,\"266\":2,\"291\":3,\"292\":3,\"367\":1,\"379\":1,\"456\":1,\"459\":2,\"567\":1}}],[\"渐渐的没落了\",{\"1\":{\"93\":1}}],[\"其主要作用是\",{\"1\":{\"338\":1}}],[\"其次\",{\"1\":{\"235\":1}}],[\"其中getclass\",{\"1\":{\"567\":1}}],[\"其中this\",{\"1\":{\"460\":1}}],[\"其中各类中的构造方法\",{\"1\":{\"455\":1}}],[\"其中各类中的成员方法\",{\"1\":{\"444\":1}}],[\"其中各类中的成员变量\",{\"1\":{\"440\":1}}],[\"其中\",{\"1\":{\"428\":1}}],[\"其中奇数票号坐左侧\",{\"1\":{\"230\":1}}],[\"其中最为主要的还是小型移动设备的开发\",{\"1\":{\"93\":1}}],[\"其余位按位取反\",{\"1\":{\"207\":1}}],[\"其余减法\",{\"1\":{\"182\":1}}],[\"其他代码略\",{\"1\":{\"569\":1}}],[\"其他所有类都继承了\",{\"1\":{\"566\":1}}],[\"其他成员\",{\"1\":{\"510\":1}}],[\"其他包中的子类都可以访问\",{\"1\":{\"493\":1}}],[\"其他\",{\"1\":{\"237\":1}}],[\"其他的teacher和administrator对象是无法传递给register方法方法的\",{\"1\":{\"476\":1}}],[\"其他的都不允许变\",{\"1\":{\"263\":2}}],[\"其他的运算符\",{\"0\":{\"214\":1}}],[\"其他的不要勾选\",{\"1\":{\"135\":1}}],[\"其他数据类型稍后讲解\",{\"1\":{\"111\":1}}],[\"其实是没有数据类型的概念的\",{\"1\":{\"573\":1}}],[\"其实是不对的\",{\"1\":{\"61\":1}}],[\"其实就表示申明一下\",{\"1\":{\"130\":1}}],[\"其实就是名字而已\",{\"1\":{\"275\":1}}],[\"其实就是拿着左边跟右边进行了判断而已\",{\"1\":{\"191\":1}}],[\"其实就是申明一下\",{\"1\":{\"130\":1}}],[\"其实就是先找到scanner这个类在哪\",{\"1\":{\"130\":1}}],[\"其实就是表示先找到scanner这个类在哪\",{\"1\":{\"130\":1}}],[\"其实就是这个容器的名字\",{\"1\":{\"110\":1}}],[\"8统计字符次数案例\",{\"0\":{\"365\":1}}],[\"82\",{\"1\":{\"280\":2}}],[\"85\",{\"1\":{\"280\":2}}],[\"89\",{\"1\":{\"232\":2,\"562\":5}}],[\"80\",{\"1\":{\"232\":3,\"264\":1}}],[\"800\",{\"1\":{\"216\":1}}],[\"8位\",{\"1\":{\"210\":1}}],[\"8844430\",{\"1\":{\"249\":1}}],[\"88\",{\"1\":{\"105\":1,\"289\":2}}],[\"8\",{\"0\":{\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":1,\"138\":1,\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1,\"148\":1,\"149\":1,\"150\":1,\"151\":1,\"152\":1,\"153\":1,\"154\":1,\"155\":1,\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":1,\"161\":1,\"162\":1,\"163\":1,\"366\":1,\"367\":1,\"454\":1,\"455\":1,\"456\":1,\"457\":1,\"528\":1,\"538\":1},\"1\":{\"116\":2,\"119\":1,\"215\":1,\"264\":2,\"266\":2,\"291\":3,\"292\":3,\"379\":1,\"557\":1,\"564\":1,\"567\":1}}],[\"举例2\",{\"1\":{\"559\":1}}],[\"举例1\",{\"1\":{\"559\":1}}],[\"举例\",{\"0\":{\"200\":1,\"286\":1,\"289\":1},\"1\":{\"90\":1,\"104\":1,\"111\":1,\"264\":1,\"269\":1,\"420\":1,\"422\":1}}],[\"新特性\",{\"1\":{\"488\":1}}],[\"新建一个中间类\",{\"1\":{\"526\":1}}],[\"新建项目\",{\"0\":{\"163\":1},\"1\":{\"159\":1}}],[\"新建模块\",{\"0\":{\"154\":1},\"1\":{\"153\":1}}],[\"新建完毕\",{\"1\":{\"149\":1}}],[\"新建类文件\",{\"0\":{\"149\":1},\"1\":{\"148\":1}}],[\"新建文本文档文件\",{\"1\":{\"72\":1}}],[\"新的版本只是在原有的基础上添加了一些新的功能而已\",{\"1\":{\"90\":1}}],[\"0~\",{\"1\":{\"572\":1}}],[\"0表示正常退出\",{\"1\":{\"562\":1}}],[\"09999999999999999\",{\"1\":{\"574\":1}}],[\"09和0\",{\"1\":{\"574\":1}}],[\"09\",{\"0\":{\"387\":1},\"1\":{\"571\":1,\"574\":1}}],[\"08this和super调用构造方法\",{\"1\":{\"463\":1}}],[\"08\",{\"0\":{\"347\":1}}],[\"075\",{\"1\":{\"576\":1}}],[\"07\",{\"0\":{\"321\":1},\"1\":{\"350\":1}}],[\"06\",{\"0\":{\"297\":1},\"1\":{\"350\":1}}],[\"05\",{\"0\":{\"268\":1},\"1\":{\"350\":1}}],[\"04\",{\"0\":{\"219\":1},\"1\":{\"350\":1,\"569\":2,\"571\":1}}],[\"0为false\",{\"1\":{\"214\":2}}],[\"00|00\",{\"1\":{\"216\":1}}],[\"0010\",{\"1\":{\"213\":2}}],[\"0001\",{\"1\":{\"213\":1}}],[\"000000\",{\"1\":{\"217\":1}}],[\"0000\",{\"1\":{\"210\":26,\"212\":8,\"213\":11,\"215\":37,\"216\":11,\"217\":11}}],[\"0变1\",{\"1\":{\"208\":1}}],[\"0正\",{\"1\":{\"207\":1}}],[\"03接口的实现\",{\"1\":{\"523\":1}}],[\"03\",{\"0\":{\"164\":1},\"1\":{\"350\":1,\"569\":3,\"576\":2}}],[\"02\",{\"0\":{\"98\":1},\"1\":{\"350\":1,\"569\":2,\"576\":1}}],[\"0\",{\"1\":{\"90\":3,\"105\":1,\"110\":1,\"113\":1,\"116\":1,\"122\":1,\"123\":1,\"166\":2,\"172\":1,\"175\":1,\"182\":1,\"230\":1,\"232\":1,\"243\":2,\"244\":2,\"249\":2,\"263\":2,\"264\":1,\"266\":1,\"267\":1,\"284\":1,\"287\":3,\"289\":2,\"290\":2,\"291\":3,\"292\":3,\"293\":2,\"294\":6,\"295\":2,\"296\":2,\"306\":2,\"318\":1,\"319\":1,\"320\":1,\"361\":3,\"364\":2,\"367\":5,\"370\":3,\"373\":1,\"376\":4,\"377\":1,\"378\":1,\"379\":2,\"384\":1,\"394\":1,\"397\":1,\"400\":1,\"401\":1,\"402\":1,\"408\":1,\"416\":1,\"459\":1,\"499\":3,\"557\":12,\"558\":2,\"559\":1,\"562\":19,\"564\":1,\"565\":3,\"567\":6,\"572\":3,\"574\":3,\"576\":3}}],[\"01之和\",{\"1\":{\"574\":1}}],[\"01\",{\"0\":{\"57\":1},\"1\":{\"350\":1,\"569\":2,\"571\":1,\"574\":1,\"576\":1}}],[\"7200\",{\"1\":{\"565\":1}}],[\"71毫秒\",{\"1\":{\"562\":1}}],[\"7遍历字符串案例\",{\"0\":{\"362\":1}}],[\"7322484131745958\",{\"1\":{\"557\":1}}],[\"73\",{\"1\":{\"319\":1}}],[\"77\",{\"1\":{\"289\":3}}],[\"78\",{\"1\":{\"280\":2}}],[\"7倍数\",{\"1\":{\"264\":1}}],[\"797693e+308\",{\"1\":{\"116\":1}}],[\"7\",{\"0\":{\"90\":1,\"130\":1,\"158\":1,\"159\":1,\"160\":1,\"161\":1,\"162\":1,\"163\":1,\"267\":1,\"318\":1,\"319\":1,\"320\":1,\"363\":1,\"364\":1,\"447\":1,\"448\":1,\"449\":1,\"450\":1,\"451\":1,\"452\":1,\"453\":1,\"488\":1,\"489\":1,\"527\":1,\"537\":1,\"574\":1,\"575\":1,\"576\":1,\"577\":1},\"1\":{\"119\":1,\"236\":1,\"238\":3,\"264\":3,\"266\":2,\"291\":3,\"292\":3,\"376\":1,\"377\":1,\"379\":2,\"564\":1,\"567\":1,\"572\":1,\"576\":1}}],[\"练习7\",{\"0\":{\"296\":1}}],[\"练习6\",{\"0\":{\"295\":1}}],[\"练习5\",{\"0\":{\"294\":1}}],[\"练习4\",{\"0\":{\"293\":1}}],[\"练习3\",{\"0\":{\"123\":1,\"280\":1,\"292\":1}}],[\"练习2\",{\"0\":{\"122\":1,\"226\":1,\"230\":1,\"249\":1,\"279\":1,\"291\":1,\"346\":1,\"384\":1}}],[\"练习1\",{\"0\":{\"121\":1,\"225\":1,\"229\":1,\"232\":1,\"248\":1,\"278\":1,\"290\":1,\"345\":1,\"383\":1}}],[\"练习\",{\"0\":{\"89\":1,\"167\":1,\"236\":1,\"238\":1,\"328\":1}}],[\"右移1位便在原来值的基础上除以2\",{\"1\":{\"217\":1}}],[\"右移运算符\",{\"0\":{\"217\":1}}],[\"右移\",{\"1\":{\"214\":1}}],[\"右边对象可以实现解耦合\",{\"1\":{\"479\":1}}],[\"右边才会执行\",{\"1\":{\"199\":1}}],[\"右边是白色背景\",{\"1\":{\"135\":1}}],[\"右侧有create\",{\"1\":{\"160\":1}}],[\"右侧选择ansi\",{\"1\":{\"88\":1}}],[\"右键\",{\"1\":{\"567\":1}}],[\"右键空白处\",{\"1\":{\"146\":1}}],[\"右键点击模块名\",{\"1\":{\"156\":1}}],[\"右键点击模块\",{\"1\":{\"155\":1}}],[\"右键点击想要修改的文件\",{\"1\":{\"150\":1}}],[\"右键点击src\",{\"1\":{\"146\":1,\"149\":1}}],[\"右键点击java文件\",{\"1\":{\"88\":1}}],[\"右键点击我的电脑并选择属性\",{\"1\":{\"63\":1}}],[\"右键我的电脑\",{\"1\":{\"63\":1}}],[\"路径名\",{\"1\":{\"490\":2}}],[\"路径不要有中文\",{\"1\":{\"87\":1}}],[\"路径导航\",{\"1\":{\"6\":1,\"9\":1}}],[\"67后面的其他元素依次向前进行移动了一位\",{\"1\":{\"562\":1}}],[\"67\",{\"1\":{\"562\":7}}],[\"6^4\",{\"1\":{\"559\":1}}],[\"6节的内存图\",{\"1\":{\"534\":1}}],[\"6扩展\",{\"0\":{\"526\":1}}],[\"6位\",{\"1\":{\"379\":1}}],[\"6用户登录案例\",{\"0\":{\"359\":1}}],[\"600\",{\"1\":{\"565\":1}}],[\"60\",{\"1\":{\"319\":1}}],[\"66\",{\"1\":{\"289\":3}}],[\"666\",{\"1\":{\"105\":1}}],[\"6d03e736这个整体称之为数组的地址值\",{\"1\":{\"280\":1}}],[\"6d03e736为例\",{\"1\":{\"280\":1}}],[\"6d03e736\",{\"1\":{\"280\":2}}],[\"69\",{\"1\":{\"264\":1}}],[\"64位\",{\"1\":{\"210\":1}}],[\"65\",{\"1\":{\"182\":1,\"280\":2}}],[\"65535\",{\"1\":{\"116\":1}}],[\"6\",{\"0\":{\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":1,\"128\":1,\"152\":1,\"153\":1,\"154\":1,\"155\":1,\"156\":1,\"157\":1,\"266\":1,\"315\":1,\"316\":1,\"317\":1,\"320\":1,\"360\":1,\"361\":1,\"402\":1,\"444\":1,\"445\":1,\"446\":1,\"464\":1,\"481\":1,\"482\":1,\"483\":1,\"484\":1,\"485\":1,\"486\":1,\"487\":2,\"488\":1,\"536\":1,\"546\":1,\"570\":1,\"571\":1,\"572\":1,\"573\":1},\"1\":{\"119\":1,\"236\":1,\"238\":3,\"243\":2,\"264\":2,\"291\":3,\"292\":3,\"379\":2,\"441\":2,\"442\":3,\"443\":1,\"564\":1,\"567\":1,\"572\":1}}],[\"还可以在继承一个类的同时实现多个接口\",{\"1\":{\"528\":1}}],[\"还继承了一个fu类\",{\"1\":{\"526\":1}}],[\"还能接收管理员\",{\"1\":{\"476\":1}}],[\"还有班主任类\",{\"1\":{\"434\":1}}],[\"还有一些特殊字符需要注意\",{\"1\":{\"106\":1}}],[\"还剩下\",{\"1\":{\"361\":1}}],[\"还想赋值只能用set方法赋值\",{\"1\":{\"346\":1}}],[\"还要使用无参数构造方法\",{\"1\":{\"341\":1}}],[\"还是两个参数的\",{\"1\":{\"377\":1}}],[\"还是先将十进制转换为二进制补码形式\",{\"1\":{\"216\":1,\"217\":1}}],[\"还是使用|\",{\"1\":{\"195\":1}}],[\"还是后++\",{\"1\":{\"185\":1}}],[\"还是要配置java\",{\"1\":{\"84\":1}}],[\"还不会编写\",{\"1\":{\"13\":1}}],[\"命令安装到了哪个位置\",{\"1\":{\"83\":1}}],[\"执行语句\",{\"1\":{\"543\":1}}],[\"执行时机\",{\"1\":{\"502\":1}}],[\"执行代码\",{\"1\":{\"411\":1}}],[\"执行方法后的输出结果为\",{\"1\":{\"369\":1,\"370\":1,\"384\":1}}],[\"执行这个循环体时\",{\"1\":{\"240\":1}}],[\"执行流程\",{\"1\":{\"224\":1,\"228\":1,\"231\":1,\"241\":1}}],[\"执行\",{\"1\":{\"83\":1,\"132\":1}}],[\"未包含抽象方法的抽象类\",{\"1\":{\"511\":1}}],[\"未来其他技术要通过这个找jdk\",{\"1\":{\"83\":1}}],[\"未保存的文件在左上角会有\",{\"1\":{\"72\":1}}],[\"而s1和s2两个对象的成员变量值都是相同的\",{\"1\":{\"567\":1}}],[\"而我们通过new关键字创建了两个对象\",{\"1\":{\"567\":1}}],[\"而我们想要在任意目录下都能使用\",{\"1\":{\"82\":1}}],[\"而抽象方法没有具体的方法体\",{\"1\":{\"511\":1}}],[\"而没有方法体\",{\"1\":{\"507\":1}}],[\"而方法主体则没有存在的意义了\",{\"1\":{\"505\":1}}],[\"而不让我们所以改变其内容\",{\"1\":{\"497\":1}}],[\"而不是成员变量\",{\"1\":{\"338\":1}}],[\"而父类没有的方法\",{\"1\":{\"482\":1,\"485\":1}}],[\"而父类中的成员变量name和age依然是没有数据的\",{\"1\":{\"459\":1}}],[\"而cat是一个猫类型\",{\"1\":{\"475\":1}}],[\"而像name\",{\"1\":{\"418\":1}}],[\"而是将这个将其转换成一个无限的\",{\"1\":{\"574\":1}}],[\"而是产生了一个新的biginteger对象记录\",{\"1\":{\"572\":1}}],[\"而是一个静态方法获取biginteger对象\",{\"1\":{\"572\":1}}],[\"而是直接复用\",{\"1\":{\"386\":1}}],[\"而是通过该类提供的方法来实现对隐藏信息的操作和访问\",{\"1\":{\"335\":1}}],[\"而且不能是java的关键字\",{\"1\":{\"490\":1}}],[\"而且多态还可以根据传递的不同对象来调用不同类中的方法\",{\"1\":{\"476\":1}}],[\"而且节约内存\",{\"1\":{\"386\":1}}],[\"而且代码编写特别简洁\",{\"1\":{\"385\":1}}],[\"而且public修饰的类名必须成为代码文件名\",{\"1\":{\"328\":1}}],[\"而且方法体中一般不写return\",{\"1\":{\"314\":1}}],[\"而且\",{\"1\":{\"194\":1,\"220\":1}}],[\"而且自动配置的也只包含了4个工具而已\",{\"1\":{\"83\":1}}],[\"而long类型的取值范围是大于int的取值范围的\",{\"1\":{\"177\":1}}],[\"而在supplier接口中所定义的方法是无参有返回值的方法\",{\"1\":{\"569\":1}}],[\"而在取值范围的顺序中\",{\"1\":{\"172\":1,\"174\":1,\"175\":1}}],[\"而在windows中\",{\"1\":{\"61\":1}}],[\"而其中+是算术运算符的一种\",{\"1\":{\"166\":1}}],[\"而java写好的功能都放在了scanner这个类中\",{\"1\":{\"130\":1}}],[\"而这些工具在jdk的安装目录的bin目录下\",{\"1\":{\"82\":1}}],[\"所在地派出所\",{\"1\":{\"379\":1}}],[\"所有类都直接或者间接的继承自该类\",{\"1\":{\"566\":1}}],[\"所有字母都大写\",{\"1\":{\"500\":1}}],[\"所有地方都可以访问\",{\"1\":{\"493\":1}}],[\"所有的类默认继承object\",{\"1\":{\"465\":1}}],[\"所有的对象都可以共享这个方法\",{\"1\":{\"422\":1}}],[\"所有的对象都可以共享这个变量\",{\"1\":{\"420\":1}}],[\"所有的java代码都会写在src文件夹当中\",{\"1\":{\"149\":1}}],[\"所有的标点符号必须是英文状态下的\",{\"1\":{\"80\":1}}],[\"所有输出语句中的内容\",{\"1\":{\"146\":1}}],[\"所以一般认为biginteger是无限的\",{\"1\":{\"573\":1}}],[\"所以一般会把中间类定义为抽象的\",{\"1\":{\"526\":1}}],[\"所以在实际存储的时候\",{\"1\":{\"573\":1}}],[\"所以在参与计算的时候\",{\"1\":{\"176\":1}}],[\"所以从语法上来讲\",{\"1\":{\"541\":1}}],[\"所以也叫常量\",{\"1\":{\"517\":1}}],[\"所以不强制被重写\",{\"1\":{\"548\":1}}],[\"所以不让我们创建对象\",{\"1\":{\"509\":1}}],[\"所以不能同时出现\",{\"1\":{\"461\":1,\"464\":1}}],[\"所以此时不需要写私有的成员变量\",{\"1\":{\"466\":1}}],[\"所以子类范围小可以直接自动转型给父类类型的变量\",{\"1\":{\"483\":1}}],[\"所以子类的初始化过程中\",{\"1\":{\"455\":1}}],[\"所以子类是无法继承父类构造方法的\",{\"1\":{\"455\":1}}],[\"所以直接访问\",{\"1\":{\"441\":1}}],[\"所以测试类中其他方法也需要是静态的\",{\"1\":{\"426\":1}}],[\"所以必须由对象调用\",{\"1\":{\"424\":1}}],[\"所以只有一份\",{\"1\":{\"424\":1}}],[\"所以静态方法在内存区域中也只存在一份\",{\"1\":{\"422\":1}}],[\"所以静态成员变量在内存区域中也只存在一份\",{\"1\":{\"420\":1}}],[\"所以属于每个对象\",{\"1\":{\"418\":1}}],[\"所以java中成员\",{\"1\":{\"418\":1}}],[\"所以javac\",{\"1\":{\"82\":1}}],[\"所以记录的是字符串常量池中的地址值\",{\"1\":{\"386\":1}}],[\"所以建议使用1个参数的\",{\"1\":{\"377\":1}}],[\"所以要定义3个计数器分别进行统计\",{\"1\":{\"367\":1}}],[\"所以要新建一个java模块\",{\"1\":{\"146\":1}}],[\"所以使用的时候不需要导包\",{\"1\":{\"352\":1}}],[\"所以我们也常常说万物皆对象\",{\"1\":{\"325\":1}}],[\"所以我们必须要把sum返回\",{\"1\":{\"310\":1}}],[\"所以我们需要删掉已经配置完毕的\",{\"1\":{\"83\":1}}],[\"所以用一个箱子把发射子弹的代码装起来\",{\"1\":{\"299\":1}}],[\"所以用if简单\",{\"1\":{\"237\":1}}],[\"所以这里需要在学习一个新的输出语句system\",{\"1\":{\"318\":1}}],[\"所以这里得到左移两位后的结果为\",{\"1\":{\"216\":1,\"217\":1}}],[\"所以这个表达式也称之为算术表达式\",{\"1\":{\"166\":1}}],[\"所以这个时候叫做cmd命令会更准确一些\",{\"1\":{\"61\":1}}],[\"所以得到的结果是\",{\"1\":{\"213\":1}}],[\"所以最终得到的结果就是\",{\"1\":{\"213\":1}}],[\"所以最终结果是long类型的\",{\"1\":{\"177\":1}}],[\"所以出现了精度丢失的情况\",{\"1\":{\"213\":1}}],[\"所以出现了补码\",{\"1\":{\"209\":1}}],[\"所以出现了反码\",{\"1\":{\"208\":1}}],[\"所以说这里底层隐藏了一个强制转换\",{\"1\":{\"191\":1}}],[\"所以做的是加法运算\",{\"1\":{\"180\":1}}],[\"所以做的是拼接操作\",{\"1\":{\"180\":4}}],[\"所以做的也是拼接操作\",{\"1\":{\"180\":1}}],[\"所以变量b和变量s里面的值会再次提升为long\",{\"1\":{\"177\":1}}],[\"所以变量i和变量n里面的值在参与运算的时候\",{\"1\":{\"175\":1}}],[\"所以选择第一个java\",{\"1\":{\"154\":1}}],[\"所以新建一个空的什么都没有的项目\",{\"1\":{\"146\":1}}],[\"所以可以使用免费使用30天\",{\"1\":{\"135\":1}}],[\"所以了解一下即可\",{\"1\":{\"112\":1}}],[\"所以\",{\"1\":{\"101\":1,\"130\":1,\"146\":1,\"149\":1,\"162\":1,\"220\":1,\"386\":1,\"424\":2,\"482\":1,\"485\":1,\"487\":1}}],[\"所以就要配置环境变量\",{\"1\":{\"82\":1}}],[\"所以该大写的地方一定要大写\",{\"1\":{\"78\":1}}],[\"该怎么办\",{\"1\":{\"526\":2}}],[\"该怎么办呢\",{\"1\":{\"495\":1}}],[\"该类所具备的方法\",{\"1\":{\"566\":1}}],[\"该类可以直接访问外部类的成员\",{\"1\":{\"538\":1}}],[\"该类可以称为接口的实现类\",{\"1\":{\"520\":1}}],[\"该类的每个对象都共享同一个类的静态变量和静态方法\",{\"1\":{\"424\":1}}],[\"该子类也必须声明为抽象类\",{\"1\":{\"509\":1}}],[\"该方法的第二个参数是supplier类型的\",{\"1\":{\"569\":1}}],[\"该方法就成了抽象方法\",{\"1\":{\"507\":1}}],[\"该方法称为静态方法\",{\"1\":{\"424\":1}}],[\"该变量称为静态变量\",{\"1\":{\"424\":1}}],[\"该过程成为方法调用\",{\"1\":{\"299\":1}}],[\"该过程成为方法定义\",{\"1\":{\"299\":1}}],[\"该数据在一个字节下\",{\"1\":{\"209\":1}}],[\"该小写的地方一定要小写\",{\"1\":{\"78\":1}}],[\"该路径下存放了jdk工具的一些补充jar包\",{\"1\":{\"69\":1}}],[\"该路径下存放了jdk各模块的授权文档\",{\"1\":{\"69\":1}}],[\"该路径下存放了jdk的各种模块\",{\"1\":{\"69\":1}}],[\"该路径下存放了jdk的各种工具命令\",{\"1\":{\"69\":1}}],[\"该路径下存放了jdk的相关配置文件\",{\"1\":{\"69\":1}}],[\"该路径下存放了一些平台特定的头文件\",{\"1\":{\"69\":1}}],[\"一位自幂数\",{\"1\":{\"559\":1}}],[\"一下math类的成员\",{\"1\":{\"556\":1}}],[\"一步到位\",{\"1\":{\"546\":1}}],[\"一不小心就会遇到这样的问题\",{\"1\":{\"486\":1}}],[\"一不同\",{\"1\":{\"316\":1}}],[\"一方面可以防止重写出错\",{\"1\":{\"450\":1}}],[\"一方面可以提高代码的可读性\",{\"1\":{\"450\":1}}],[\"一定要按照规定的格式进行重写\",{\"1\":{\"512\":1}}],[\"一定要调用父类构造方法先完成父类数据空间的初始化\",{\"1\":{\"471\":1}}],[\"一定要用逗号隔开\",{\"1\":{\"275\":1}}],[\"一定先调用父类的构造方法\",{\"1\":{\"462\":1}}],[\"一定是在堆里面开辟了一个小空间\",{\"1\":{\"386\":1}}],[\"一共有\",{\"1\":{\"294\":1}}],[\"一直猜中为止\",{\"1\":{\"267\":1}}],[\"一直判断到number\",{\"1\":{\"266\":1}}],[\"一直点到finish为止\",{\"1\":{\"157\":1}}],[\"一旦定义了有参数构造器\",{\"1\":{\"343\":1}}],[\"一旦修改之后\",{\"1\":{\"282\":1}}],[\"一旦找到了\",{\"1\":{\"265\":1}}],[\"一旦有对应的值\",{\"1\":{\"235\":1}}],[\"一\",{\"0\":{\"547\":1},\"1\":{\"237\":1}}],[\"一般情况下jdk所提供的类都会重写object类中的tostring方法\",{\"1\":{\"567\":1}}],[\"一般般吧\",{\"1\":{\"565\":1}}],[\"一般都有书写规范\",{\"1\":{\"500\":1}}],[\"一般无需指定初始化值\",{\"1\":{\"328\":1}}],[\"一般不会使用\",{\"1\":{\"215\":1}}],[\"一般来讲在单词之间的空格是不能省略的\",{\"1\":{\"77\":1}}],[\"一座寺庙里住着三个和尚\",{\"1\":{\"206\":1}}],[\"一开始没有乘客\",{\"1\":{\"113\":2}}],[\"一条语句可以定义多个变量\",{\"1\":{\"112\":1,\"113\":1}}],[\"一些特殊字面量的书写\",{\"1\":{\"106\":1}}],[\"一个被数字\",{\"1\":{\"603\":1}}],[\"一个被星标了的苹果文章\",{\"1\":{\"583\":1}}],[\"一个n位自然数等于自身各个数位上数字的n次幂之和\",{\"1\":{\"559\":1}}],[\"一个事物内部还有一个独立的事物\",{\"1\":{\"531\":1}}],[\"一个已经向上转型的子类对象\",{\"1\":{\"484\":1}}],[\"一个类可以实现多个接口\",{\"1\":{\"524\":1}}],[\"一个类可以同时实现多个接口\",{\"1\":{\"524\":1}}],[\"一个类可以有多个子类\",{\"1\":{\"465\":1}}],[\"一个类只能有一个父类\",{\"1\":{\"465\":1}}],[\"一个类只能继承一个直接父类\",{\"1\":{\"431\":1}}],[\"一个子类只能继承一个父类\",{\"1\":{\"431\":1}}],[\"一个通用的名称\",{\"1\":{\"426\":1}}],[\"一个java文件中可以定义多个class类\",{\"1\":{\"328\":1}}],[\"一个循环尽量只做一件事情\",{\"1\":{\"292\":1}}],[\"一个字节的范围\",{\"1\":{\"209\":1}}],[\"一个模块中又有很多的业务\",{\"1\":{\"141\":1}}],[\"一个特殊的值\",{\"1\":{\"105\":1}}],[\"一个完整的java项目有可能会有成千上万个类来组成的\",{\"1\":{\"104\":1}}],[\"一个拥有\",{\"1\":{\"22\":1}}],[\"一行就写完了\",{\"1\":{\"100\":1}}],[\"不帅\",{\"1\":{\"565\":1}}],[\"不让外界创建对象\",{\"1\":{\"526\":1}}],[\"不够灵活\",{\"1\":{\"502\":1}}],[\"不常用\",{\"1\":{\"500\":1}}],[\"不可重新赋值\",{\"1\":{\"499\":2}}],[\"不可改变\",{\"1\":{\"495\":1}}],[\"不可以有多个父类\",{\"1\":{\"465\":1}}],[\"不加权限修饰符\",{\"1\":{\"494\":1}}],[\"不重写\",{\"1\":{\"477\":1}}],[\"不写也存在\",{\"1\":{\"471\":1}}],[\"不写break会引发case穿透现象\",{\"1\":{\"237\":1}}],[\"不支持多继承\",{\"1\":{\"431\":1,\"465\":1}}],[\"不需要背\",{\"1\":{\"511\":1,\"526\":1}}],[\"不需要给jvm返回值\",{\"1\":{\"426\":1}}],[\"不需要我们额外写代码单独实现\",{\"1\":{\"173\":1}}],[\"不需要我们自己再实现了\",{\"1\":{\"130\":1}}],[\"不会修改参与计算的biginteger对象中的借\",{\"1\":{\"572\":1}}],[\"不会创建新的\",{\"1\":{\"386\":1}}],[\"不会删除本地硬盘上的项目\",{\"1\":{\"160\":1}}],[\"不考虑其他字符\",{\"1\":{\"366\":1}}],[\"不是default\",{\"1\":{\"493\":1}}],[\"不是最后一次机会\",{\"1\":{\"361\":1}}],[\"不是一个质数\",{\"1\":{\"266\":3}}],[\"不含有任何内容\",{\"1\":{\"354\":2}}],[\"不用创建对象\",{\"1\":{\"426\":1}}],[\"不用记对象有哪些方法\",{\"1\":{\"335\":1}}],[\"不用刻意去记\",{\"1\":{\"103\":1}}],[\"不允许外部程序直接访问\",{\"1\":{\"335\":1}}],[\"不打印任何内容\",{\"1\":{\"318\":1}}],[\"不包含指定值\",{\"1\":{\"263\":1}}],[\"不同包中的无关类\",{\"1\":{\"494\":1}}],[\"不同包的子类\",{\"1\":{\"494\":1}}],[\"不同权限的访问能力\",{\"0\":{\"494\":1}}],[\"不同的按钮n的值不一样\",{\"1\":{\"565\":1}}],[\"不同的技术类放在不同的包下\",{\"1\":{\"490\":1}}],[\"不同的模块可以存放项目中不同的业务功能代码\",{\"1\":{\"140\":1}}],[\"不同情况执行不同的代码\",{\"1\":{\"232\":1}}],[\"不错哟\",{\"1\":{\"225\":1}}],[\"不相同\",{\"1\":{\"206\":1}}],[\"不能通过实现类名或者对象名调用\",{\"1\":{\"549\":1}}],[\"不能多继承\",{\"1\":{\"528\":1}}],[\"不能满足当前业务的需求\",{\"1\":{\"526\":1}}],[\"不能再更改\",{\"1\":{\"499\":1}}],[\"不能继承final的类\",{\"1\":{\"497\":1}}],[\"不能被重写\",{\"1\":{\"495\":1,\"498\":1}}],[\"不能被继承\",{\"1\":{\"495\":1,\"497\":1}}],[\"不能调用子类拥有\",{\"1\":{\"482\":1,\"485\":1}}],[\"不能比较引用数据类型\",{\"1\":{\"386\":1}}],[\"不能手动调用构造方法\",{\"1\":{\"343\":1}}],[\"不能由return带回结果数据\",{\"1\":{\"342\":1}}],[\"不能互相嵌套定义\",{\"1\":{\"313\":1}}],[\"不能写0\",{\"1\":{\"293\":1}}],[\"不能单独存在的\",{\"1\":{\"260\":1,\"261\":1}}],[\"不能进行计算\",{\"1\":{\"171\":1}}],[\"不能是关键字\",{\"1\":{\"125\":1}}],[\"不断点击next\",{\"1\":{\"157\":1}}],[\"不要用可以返回也可以不返回\",{\"1\":{\"401\":1}}],[\"不要写\",{\"1\":{\"227\":1}}],[\"不要使用下划线或美元符号\",{\"1\":{\"129\":1}}],[\"不要有一些特殊符号\",{\"1\":{\"87\":1}}],[\"不要有空格\",{\"1\":{\"87\":1}}],[\"不要有空格等一些特殊的符号\",{\"1\":{\"68\":1}}],[\"不知道选择哪种数据类型了\",{\"1\":{\"120\":2}}],[\"不太确定范围\",{\"1\":{\"118\":2}}],[\"不带this修饰的变量指的是成员变量\",{\"1\":{\"338\":1}}],[\"不带this修饰的变量指的是形参\",{\"1\":{\"338\":1}}],[\"不带小数点的数字都是整数类型的字面量\",{\"1\":{\"106\":1}}],[\"不带小数的数字\",{\"1\":{\"105\":1}}],[\"不带文件后缀\",{\"1\":{\"76\":1}}],[\"不管对象内部的属性是基本数据类型还是引用数据类型\",{\"1\":{\"567\":1}}],[\"不管用户名是否正确都会去验证密码\",{\"1\":{\"200\":1}}],[\"不管是先++\",{\"1\":{\"185\":1}}],[\"不管是单行注释还是多行注释\",{\"1\":{\"101\":1}}],[\"不管起什么名字\",{\"1\":{\"128\":1}}],[\"不管内容是什么\",{\"1\":{\"106\":1}}],[\"不管里面有没有内容\",{\"1\":{\"106\":1}}],[\"不管里面的内容是什么\",{\"1\":{\"106\":1}}],[\"不管在注释当中写什么内容\",{\"1\":{\"101\":1}}],[\"不一定包含抽象方法\",{\"1\":{\"511\":1}}],[\"不一定\",{\"1\":{\"90\":1}}],[\"多数人知晓的\",{\"1\":{\"554\":1}}],[\"多层继承\",{\"1\":{\"431\":1}}],[\"多态本身是子类类型向父类类型向上转换\",{\"1\":{\"483\":1}}],[\"多态的转型分为向上转型\",{\"1\":{\"482\":1}}],[\"多态的写法就无法访问子类独有功能了\",{\"1\":{\"482\":1}}],[\"多态的弊端\",{\"0\":{\"480\":1}}],[\"多态的优势\",{\"0\":{\"479\":1}}],[\"多态的运行特点\",{\"0\":{\"478\":1}}],[\"多态的定义和前提\",{\"0\":{\"477\":1}}],[\"多态的使用场景\",{\"0\":{\"476\":1}}],[\"多态的前提\",{\"1\":{\"475\":1}}],[\"多态的形式\",{\"0\":{\"475\":1}}],[\"多态体现的格式\",{\"1\":{\"475\":1}}],[\"多态是出现在继承或者实现关系中的\",{\"1\":{\"475\":1}}],[\"多态是继封装\",{\"1\":{\"475\":1}}],[\"多态\",{\"1\":{\"335\":1,\"477\":1,\"544\":1}}],[\"多个接口中存在相同名字的默认方法\",{\"1\":{\"548\":1}}],[\"多个单词用下划线连接\",{\"1\":{\"517\":1}}],[\"多个类可以称为子类\",{\"1\":{\"428\":1}}],[\"多个对象在堆内存中\",{\"1\":{\"331\":1}}],[\"多个对象内存图\",{\"0\":{\"331\":1}}],[\"多个方法的参数不相同\",{\"1\":{\"316\":1}}],[\"多个方法具有相同的方法名\",{\"1\":{\"316\":1}}],[\"多个方法在同一个类中\",{\"1\":{\"316\":1}}],[\"多个参数之间用逗号隔开\",{\"1\":{\"314\":1}}],[\"多个参数之间使用逗号\",{\"1\":{\"304\":1}}],[\"多个元素之间\",{\"1\":{\"275\":1}}],[\"多此一举\",{\"1\":{\"200\":1}}],[\"多行注释不能嵌套使用\",{\"1\":{\"99\":1}}],[\"多行注释\",{\"1\":{\"99\":1,\"101\":1}}],[\"多线程\",{\"1\":{\"95\":1}}],[\"多多练习\",{\"1\":{\"78\":1}}],[\"多总结\",{\"1\":{\"75\":1}}],[\"多尝试\",{\"1\":{\"75\":1}}],[\"多查资料\",{\"1\":{\"75\":1}}],[\"多思考\",{\"1\":{\"75\":1}}],[\"多看\",{\"1\":{\"75\":1}}],[\"漏洞\",{\"1\":{\"74\":1}}],[\"用对象调用\",{\"1\":{\"537\":1}}],[\"用法演示\",{\"0\":{\"461\":1,\"463\":1}}],[\"用变量接收返回结果\",{\"1\":{\"319\":2}}],[\"用来存储数据\",{\"1\":{\"400\":1}}],[\"用来遍历数组\",{\"1\":{\"370\":1}}],[\"用来获取数组中的最大值\",{\"1\":{\"319\":2}}],[\"用来统计次数\",{\"1\":{\"291\":1}}],[\"用来统计折叠的次数\",{\"1\":{\"249\":1}}],[\"用数组遍历通用格式对数组进行遍历\",{\"1\":{\"318\":1}}],[\"用静态初始化完成数组元素初始化\",{\"1\":{\"318\":1,\"319\":2}}],[\"用索引来访问数组中的元素\",{\"1\":{\"289\":1}}],[\"用i\",{\"1\":{\"265\":1}}],[\"用if的第三种格式\",{\"1\":{\"237\":1}}],[\"用while循环\",{\"1\":{\"251\":1}}],[\"用for循环\",{\"1\":{\"251\":1}}],[\"用switch语句\",{\"1\":{\"237\":1}}],[\"用户属性为\",{\"1\":{\"401\":2,\"402\":1}}],[\"用户名为\",{\"1\":{\"567\":1}}],[\"用户名或密码错误\",{\"1\":{\"361\":1}}],[\"用户名\",{\"1\":{\"346\":1}}],[\"用户名正确\",{\"1\":{\"200\":2}}],[\"用户名输入正确\",{\"1\":{\"195\":1}}],[\"用户登录案例\",{\"1\":{\"200\":1}}],[\"用户登录\",{\"1\":{\"195\":1}}],[\"用运算符把常量或者变量连接起来的\",{\"1\":{\"166\":1}}],[\"用于修饰方法方法和类\",{\"1\":{\"506\":1}}],[\"用于早点结束变量生命周期\",{\"1\":{\"501\":1}}],[\"用于构造方法中\",{\"0\":{\"417\":1}}],[\"用于普通的gettter与setter方法\",{\"0\":{\"416\":1}}],[\"用于约束集合中存储元素的数据类型\",{\"1\":{\"390\":1}}],[\"用于给成员变量赋值\",{\"1\":{\"337\":1}}],[\"用于设置成员变量的值\",{\"1\":{\"336\":1}}],[\"用于获取成员变量的值\",{\"1\":{\"336\":1,\"337\":1}}],[\"用于获取两个数字中的较大数\",{\"1\":{\"309\":2}}],[\"用于把数据返回给调用者\",{\"1\":{\"314\":1}}],[\"用于接收两个数字\",{\"1\":{\"306\":2}}],[\"用于保存两个数字\",{\"1\":{\"302\":2}}],[\"用于保存求和的结果\",{\"1\":{\"243\":1,\"244\":1}}],[\"用于打印两个数字中的较大数\",{\"1\":{\"302\":2,\"306\":2}}],[\"用于表示循环执行中每次变化的内容\",{\"1\":{\"241\":1}}],[\"用于表示循环反复执行的内容\",{\"1\":{\"241\":1}}],[\"用于表示循环反复执行的条件\",{\"1\":{\"241\":1}}],[\"用于表示循环开启时的起始状态\",{\"1\":{\"241\":1}}],[\"用于web方向的网站开发\",{\"1\":{\"94\":1}}],[\"用于嵌入式消费类电子设备或者小型移动设备的开发\",{\"1\":{\"93\":1}}],[\"用到了9~11的新特性\",{\"1\":{\"90\":1}}],[\"用到两个命令\",{\"1\":{\"72\":1}}],[\"用8版本能运行吗\",{\"1\":{\"90\":1}}],[\"用8版本开发的代码\",{\"1\":{\"90\":1}}],[\"用11版本开发的代码\",{\"1\":{\"90\":1}}],[\"用11版本能运行吗\",{\"1\":{\"90\":1}}],[\"用记事本打开helloworld\",{\"1\":{\"72\":1}}],[\"other\",{\"0\":{\"619\":1,\"633\":1}}],[\"obj\",{\"1\":{\"565\":5,\"567\":3,\"569\":5}}],[\"object中的克隆是浅克隆\",{\"1\":{\"567\":1}}],[\"objectdemo4\",{\"1\":{\"567\":1}}],[\"objectdemo02\",{\"1\":{\"567\":2}}],[\"objectdemo01测试类\",{\"1\":{\"567\":1}}],[\"objectdemo01\",{\"1\":{\"567\":2}}],[\"objectsdemo02\",{\"1\":{\"569\":1}}],[\"objectsdemo01测试类\",{\"1\":{\"569\":1}}],[\"objectsdemo01\",{\"1\":{\"569\":2}}],[\"objects类提供了一些对象常见操作的方法\",{\"1\":{\"568\":1}}],[\"objects类所在包是在java\",{\"1\":{\"568\":1}}],[\"objects\",{\"1\":{\"567\":2,\"569\":7}}],[\"object类默认的是浅克隆\",{\"1\":{\"567\":1}}],[\"object类中的equals方法的源码\",{\"1\":{\"567\":1}}],[\"object类中tostring方法的源码定义\",{\"1\":{\"567\":1}}],[\"object类所在包是java\",{\"1\":{\"566\":1}}],[\"object\",{\"1\":{\"394\":1,\"431\":1,\"562\":4,\"565\":1,\"566\":2,\"567\":6,\"569\":5,\"572\":2}}],[\"oi\",{\"1\":{\"533\":2,\"535\":2}}],[\"oa\",{\"1\":{\"490\":1}}],[\"ok\",{\"1\":{\"465\":1}}],[\"override\",{\"1\":{\"450\":2,\"467\":1,\"476\":3,\"489\":2,\"498\":2,\"509\":2,\"523\":3,\"524\":2,\"542\":1,\"543\":1,\"544\":2,\"546\":1,\"565\":1,\"567\":4}}],[\"override重写注解\",{\"0\":{\"450\":1}}],[\"o\",{\"1\":{\"394\":1,\"533\":2,\"567\":5,\"569\":1}}],[\"operatordemo12\",{\"1\":{\"206\":1}}],[\"operatordemo8\",{\"1\":{\"191\":1}}],[\"operatordemo7\",{\"1\":{\"190\":1}}],[\"operatordemo6\",{\"1\":{\"187\":1}}],[\"operatordemo2\",{\"1\":{\"179\":1}}],[\"ones\",{\"1\":{\"167\":2}}],[\"original\",{\"1\":{\"354\":1}}],[\"or\",{\"1\":{\"161\":1,\"162\":1}}],[\"oracle\",{\"1\":{\"67\":1}}],[\"outer01\",{\"1\":{\"537\":4}}],[\"outer\",{\"1\":{\"533\":8,\"535\":4}}],[\"out\",{\"1\":{\"72\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"105\":5,\"111\":2,\"112\":4,\"113\":2,\"119\":8,\"121\":5,\"122\":6,\"123\":2,\"130\":2,\"166\":5,\"167\":4,\"172\":1,\"179\":1,\"180\":1,\"182\":1,\"186\":2,\"187\":3,\"190\":2,\"191\":1,\"194\":9,\"196\":4,\"197\":3,\"206\":6,\"212\":1,\"213\":2,\"215\":2,\"216\":1,\"217\":1,\"224\":4,\"225\":2,\"226\":2,\"228\":4,\"229\":3,\"230\":4,\"232\":6,\"236\":9,\"237\":4,\"238\":7,\"241\":1,\"242\":3,\"243\":1,\"244\":1,\"248\":2,\"249\":1,\"255\":1,\"256\":1,\"257\":1,\"260\":1,\"261\":1,\"263\":1,\"264\":2,\"265\":3,\"266\":5,\"267\":5,\"280\":2,\"283\":3,\"289\":2,\"290\":1,\"291\":2,\"292\":1,\"293\":1,\"294\":4,\"295\":1,\"296\":1,\"302\":2,\"306\":2,\"309\":2,\"310\":1,\"311\":4,\"313\":1,\"317\":8,\"318\":12,\"319\":1,\"320\":1,\"326\":2,\"327\":4,\"328\":4,\"336\":2,\"337\":3,\"338\":3,\"340\":2,\"343\":1,\"345\":1,\"346\":4,\"354\":4,\"358\":7,\"361\":5,\"364\":3,\"367\":4,\"370\":5,\"373\":2,\"376\":4,\"377\":2,\"378\":4,\"379\":4,\"381\":2,\"382\":2,\"383\":3,\"384\":1,\"385\":4,\"394\":12,\"397\":4,\"400\":1,\"401\":1,\"402\":1,\"408\":1,\"412\":5,\"416\":1,\"420\":2,\"422\":1,\"423\":2,\"426\":1,\"435\":10,\"439\":5,\"441\":2,\"442\":2,\"443\":3,\"445\":2,\"446\":2,\"449\":3,\"450\":1,\"456\":4,\"459\":6,\"461\":6,\"463\":3,\"466\":2,\"476\":4,\"478\":1,\"480\":4,\"485\":4,\"488\":1,\"489\":10,\"498\":4,\"499\":2,\"509\":2,\"523\":3,\"524\":2,\"533\":3,\"535\":3,\"537\":2,\"542\":1,\"544\":2,\"546\":3,\"557\":12,\"558\":2,\"559\":2,\"562\":12,\"564\":5,\"565\":2,\"567\":8,\"569\":7,\"572\":14,\"574\":1,\"576\":8}}],[\"springmvc\",{\"0\":{\"623\":1}}],[\"spring\",{\"0\":{\"622\":1}}],[\"sportman\",{\"1\":{\"523\":2,\"524\":3,\"525\":1}}],[\"snipaste\",{\"1\":{\"571\":1}}],[\"s=gson\",{\"1\":{\"567\":1}}],[\"srcarray\",{\"1\":{\"562\":17}}],[\"srcpos\",{\"1\":{\"562\":3}}],[\"src\",{\"1\":{\"562\":3}}],[\"sqrt\",{\"1\":{\"558\":1,\"562\":1}}],[\"swimming\",{\"1\":{\"542\":3,\"544\":6,\"546\":5}}],[\"swim\",{\"1\":{\"542\":2,\"544\":4,\"546\":6}}],[\"switch和if第三种格式各自的使用场景\",{\"1\":{\"237\":1}}],[\"switch在jdk12的新特性\",{\"1\":{\"237\":1}}],[\"switch的扩展知识\",{\"0\":{\"237\":1}}],[\"switchdemo2\",{\"1\":{\"236\":1}}],[\"switch语句\",{\"0\":{\"233\":1}}],[\"switch\",{\"1\":{\"103\":1,\"221\":1,\"234\":1,\"236\":1,\"237\":1,\"238\":2}}],[\"shutdown\",{\"1\":{\"564\":2,\"565\":4}}],[\"shi\",{\"1\":{\"559\":2}}],[\"shift\",{\"1\":{\"492\":1}}],[\"showjdialog\",{\"1\":{\"565\":5}}],[\"showname\",{\"1\":{\"537\":2}}],[\"show2\",{\"1\":{\"439\":3,\"445\":2,\"498\":4}}],[\"show1\",{\"1\":{\"439\":3,\"498\":4}}],[\"show\",{\"1\":{\"336\":2,\"337\":2,\"338\":1,\"340\":2,\"343\":5,\"345\":3,\"441\":2,\"442\":2,\"443\":2,\"445\":2,\"446\":6,\"476\":5,\"478\":1,\"548\":1,\"549\":1,\"551\":1}}],[\"short类型\",{\"1\":{\"269\":1}}],[\"short类型的10\",{\"1\":{\"210\":1}}],[\"short\",{\"1\":{\"103\":1,\"116\":1,\"118\":1,\"119\":1,\"120\":2,\"170\":1,\"171\":3,\"172\":1,\"174\":1,\"175\":1,\"177\":2,\"317\":7}}],[\"somethind\",{\"1\":{\"489\":2}}],[\"something表示喂养的东西\",{\"1\":{\"489\":2}}],[\"something表示吃的东西\",{\"1\":{\"489\":3}}],[\"something\",{\"1\":{\"489\":18}}],[\"sout\",{\"1\":{\"284\":1}}],[\"sstudent\",{\"1\":{\"479\":1}}],[\"salary\",{\"1\":{\"435\":10,\"509\":8}}],[\"sleep\",{\"1\":{\"423\":3}}],[\"size\",{\"1\":{\"393\":1,\"394\":2,\"397\":2,\"400\":1,\"401\":1,\"402\":1}}],[\"sj\",{\"1\":{\"385\":8,\"567\":3}}],[\"sb\",{\"1\":{\"381\":7,\"382\":4,\"384\":6}}],[\"smallcount++\",{\"1\":{\"367\":1}}],[\"smallcount\",{\"1\":{\"367\":2}}],[\"s4\",{\"1\":{\"343\":2,\"354\":3,\"358\":3}}],[\"s3\",{\"1\":{\"343\":2,\"354\":3,\"358\":5,\"400\":2,\"546\":2,\"562\":2}}],[\"s2是直接赋值的\",{\"1\":{\"386\":1}}],[\"s2\",{\"1\":{\"343\":2,\"345\":2,\"354\":3,\"358\":3,\"386\":1,\"400\":2,\"412\":5,\"456\":1,\"459\":4,\"461\":4,\"492\":1,\"544\":3,\"562\":2,\"567\":3,\"569\":2}}],[\"s1对象的字符串表现形式为\",{\"1\":{\"567\":3}}],[\"s1记录的是new出来的\",{\"1\":{\"386\":1}}],[\"s1\",{\"1\":{\"343\":2,\"345\":4,\"354\":3,\"358\":5,\"386\":1,\"400\":2,\"412\":5,\"456\":1,\"492\":1,\"562\":2,\"567\":9,\"569\":14}}],[\"se\",{\"0\":{\"626\":1}}],[\"sex确实是每个学生对象都应该有的属性\",{\"1\":{\"418\":1}}],[\"sex\",{\"1\":{\"404\":1,\"418\":2,\"463\":9}}],[\"setdata\",{\"1\":{\"567\":1}}],[\"setdefaultcloseoperation\",{\"1\":{\"565\":1}}],[\"setpath\",{\"1\":{\"567\":1}}],[\"setpassword\",{\"1\":{\"346\":2,\"567\":1}}],[\"setid\",{\"1\":{\"567\":1}}],[\"setmodal\",{\"1\":{\"565\":1}}],[\"setlayout\",{\"1\":{\"565\":1}}],[\"setlocationrelativeto\",{\"1\":{\"565\":2}}],[\"setalwaysontop\",{\"1\":{\"565\":2}}],[\"setage\",{\"1\":{\"336\":2,\"337\":2,\"338\":1,\"345\":2,\"346\":2,\"408\":1,\"416\":1,\"435\":4,\"463\":1,\"466\":1,\"476\":3,\"489\":2,\"562\":1}}],[\"settitle\",{\"1\":{\"565\":1}}],[\"setter省略\",{\"1\":{\"456\":1,\"459\":2,\"461\":2}}],[\"setter方法访问父类的private成员变量\",{\"1\":{\"438\":1,\"439\":1}}],[\"setfont\",{\"1\":{\"565\":1}}],[\"setbounds\",{\"1\":{\"565\":6}}],[\"setvisible\",{\"1\":{\"565\":2}}],[\"set和get方法\",{\"1\":{\"489\":1}}],[\"setwang\",{\"1\":{\"466\":1}}],[\"setcolor\",{\"1\":{\"466\":1,\"489\":1}}],[\"setsize\",{\"1\":{\"565\":2}}],[\"setsex\",{\"1\":{\"463\":1}}],[\"setsalary\",{\"1\":{\"435\":5}}],[\"setnum2\",{\"1\":{\"439\":1}}],[\"setname\",{\"1\":{\"337\":2,\"338\":1,\"345\":2,\"408\":1,\"416\":1,\"435\":4,\"463\":1,\"466\":1,\"476\":3,\"489\":1,\"562\":1}}],[\"set\",{\"1\":{\"393\":1,\"394\":3}}],[\"setgender\",{\"1\":{\"346\":2}}],[\"setemail\",{\"1\":{\"346\":2}}],[\"setusername\",{\"1\":{\"346\":2,\"567\":1}}],[\"set方法\",{\"1\":{\"336\":1,\"337\":1,\"567\":1,\"569\":1}}],[\"set变量名\",{\"1\":{\"336\":1}}],[\"setxxx\",{\"1\":{\"335\":1,\"337\":1}}],[\"sendmessage\",{\"1\":{\"326\":2,\"327\":1}}],[\"subtract\",{\"1\":{\"572\":2,\"576\":2}}],[\"substring\",{\"1\":{\"377\":2,\"379\":3}}],[\"supplier\",{\"1\":{\"569\":1}}],[\"supplier<\",{\"1\":{\"569\":1}}],[\"super调用\",{\"1\":{\"467\":1}}],[\"super访问成员我们已经接触过了\",{\"1\":{\"460\":1}}],[\"super访问父类成员变量\",{\"0\":{\"443\":1}}],[\"super和this完整的用法如下\",{\"1\":{\"460\":1}}],[\"super和this的用法格式\",{\"0\":{\"460\":1}}],[\"super代表的是父类对象的引用\",{\"1\":{\"443\":1}}],[\"superclass\",{\"1\":{\"428\":1}}],[\"super\",{\"0\":{\"458\":1,\"461\":1,\"462\":1},\"1\":{\"103\":1,\"443\":2,\"456\":2,\"457\":2,\"459\":2,\"460\":3,\"461\":4,\"464\":3,\"466\":2,\"471\":1,\"489\":2,\"509\":2,\"562\":1,\"567\":1}}],[\"summary内部类或者内部接口的描述\",{\"1\":{\"561\":1}}],[\"sum4\",{\"1\":{\"310\":2}}],[\"sum3\",{\"1\":{\"310\":2}}],[\"sum2\",{\"1\":{\"310\":2}}],[\"sum1\",{\"1\":{\"310\":2}}],[\"sum的值就是累加之后的结果\",{\"1\":{\"290\":1}}],[\"sum\",{\"1\":{\"243\":18,\"244\":5,\"290\":4,\"294\":5,\"310\":4,\"559\":2}}],[\"s\",{\"1\":{\"177\":2,\"328\":9,\"336\":4,\"337\":8,\"340\":2,\"354\":2,\"358\":2,\"364\":1,\"370\":10,\"373\":4,\"386\":1,\"476\":4,\"542\":2,\"546\":4,\"564\":3,\"565\":3,\"567\":1}}],[\"sdk\",{\"1\":{\"157\":1}}],[\"scale\",{\"1\":{\"576\":2}}],[\"scannerdemo1\",{\"1\":{\"130\":1}}],[\"scanner\",{\"1\":{\"130\":3,\"167\":2,\"206\":2,\"225\":2,\"226\":2,\"229\":2,\"230\":2,\"232\":2,\"236\":3,\"238\":2,\"265\":2,\"266\":2,\"267\":2,\"311\":3,\"361\":2,\"364\":2,\"367\":2,\"373\":2,\"376\":3,\"377\":2,\"378\":2,\"383\":2,\"497\":1}}],[\"school\",{\"1\":{\"518\":1}}],[\"schoolname\",{\"1\":{\"420\":4,\"422\":1}}],[\"sc\",{\"1\":{\"130\":2,\"167\":2,\"206\":3,\"225\":2,\"226\":2,\"229\":2,\"230\":2,\"232\":2,\"236\":2,\"238\":2,\"265\":2,\"266\":2,\"267\":2,\"311\":3,\"361\":3,\"364\":2,\"367\":2,\"373\":2,\"376\":2,\"377\":2,\"378\":2,\"383\":2,\"537\":2}}],[\"scoresarr\",{\"1\":{\"286\":1}}],[\"score\",{\"1\":{\"122\":2,\"232\":9,\"456\":4,\"459\":4,\"461\":4}}],[\"synchronized\",{\"1\":{\"103\":1}}],[\"systemdemo3\",{\"1\":{\"562\":1}}],[\"systemdemo02\",{\"1\":{\"562\":2}}],[\"systemdemo01\",{\"1\":{\"562\":3}}],[\"systemdemo2\",{\"1\":{\"562\":1}}],[\"system包含了系统操作的一些常用的方法\",{\"1\":{\"561\":1}}],[\"system类所在包为java\",{\"1\":{\"561\":1}}],[\"system首字母必须大写\",{\"1\":{\"78\":1}}],[\"system\",{\"1\":{\"72\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"105\":5,\"111\":2,\"112\":4,\"113\":2,\"119\":8,\"121\":5,\"122\":6,\"123\":2,\"130\":3,\"166\":5,\"167\":5,\"172\":1,\"179\":1,\"180\":1,\"182\":1,\"186\":2,\"187\":3,\"190\":2,\"191\":1,\"194\":9,\"196\":4,\"197\":3,\"206\":7,\"212\":1,\"213\":2,\"215\":2,\"216\":1,\"217\":1,\"224\":4,\"225\":3,\"226\":3,\"228\":4,\"229\":4,\"230\":5,\"232\":7,\"236\":10,\"237\":4,\"238\":8,\"241\":1,\"242\":3,\"243\":1,\"244\":1,\"248\":2,\"249\":1,\"255\":1,\"256\":1,\"257\":1,\"260\":1,\"261\":1,\"263\":1,\"264\":2,\"265\":4,\"266\":6,\"267\":6,\"280\":2,\"283\":3,\"289\":2,\"290\":1,\"291\":2,\"292\":1,\"293\":1,\"294\":4,\"295\":1,\"296\":1,\"302\":2,\"306\":2,\"309\":2,\"310\":1,\"311\":5,\"313\":1,\"317\":8,\"318\":11,\"319\":1,\"320\":1,\"326\":2,\"327\":4,\"328\":4,\"336\":2,\"337\":3,\"338\":3,\"340\":2,\"343\":1,\"345\":1,\"346\":4,\"354\":4,\"358\":7,\"361\":6,\"364\":4,\"367\":5,\"370\":5,\"373\":3,\"376\":5,\"377\":3,\"378\":5,\"379\":4,\"381\":2,\"382\":2,\"383\":4,\"384\":1,\"385\":4,\"394\":12,\"397\":4,\"400\":1,\"401\":1,\"402\":1,\"408\":1,\"412\":5,\"416\":1,\"420\":2,\"422\":1,\"423\":2,\"426\":1,\"435\":10,\"439\":5,\"441\":2,\"442\":2,\"443\":3,\"445\":2,\"446\":2,\"449\":3,\"450\":1,\"456\":4,\"459\":6,\"461\":6,\"463\":3,\"466\":2,\"476\":4,\"478\":1,\"480\":4,\"485\":4,\"488\":1,\"489\":10,\"498\":4,\"499\":2,\"509\":2,\"523\":3,\"524\":2,\"533\":2,\"535\":3,\"537\":2,\"542\":1,\"544\":2,\"546\":3,\"557\":12,\"558\":2,\"559\":2,\"562\":20,\"564\":5,\"565\":2,\"567\":12,\"569\":7,\"572\":14,\"574\":1,\"576\":8}}],[\"status\",{\"1\":{\"562\":1,\"564\":2}}],[\"static不能省略\",{\"1\":{\"549\":1}}],[\"static等\",{\"1\":{\"534\":1}}],[\"static修饰的成员属于类\",{\"1\":{\"424\":1}}],[\"static修饰\",{\"1\":{\"423\":2}}],[\"static可以修饰成员变量或者修饰方法\",{\"1\":{\"419\":1}}],[\"static是静态的意思\",{\"1\":{\"419\":1}}],[\"static关键字在java开发非常的重要\",{\"1\":{\"418\":1}}],[\"static\",{\"0\":{\"425\":1},\"1\":{\"72\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"103\":1,\"105\":1,\"111\":1,\"112\":1,\"113\":1,\"119\":1,\"121\":1,\"122\":1,\"123\":1,\"130\":1,\"179\":1,\"187\":1,\"190\":1,\"191\":1,\"206\":1,\"212\":1,\"213\":2,\"215\":2,\"216\":1,\"217\":1,\"224\":1,\"228\":1,\"236\":1,\"242\":1,\"243\":1,\"244\":1,\"263\":1,\"283\":1,\"289\":1,\"301\":2,\"302\":2,\"304\":4,\"306\":2,\"308\":4,\"309\":2,\"310\":2,\"311\":2,\"313\":5,\"314\":2,\"316\":8,\"317\":5,\"318\":2,\"319\":2,\"320\":2,\"327\":1,\"328\":1,\"336\":1,\"337\":1,\"340\":1,\"343\":1,\"345\":1,\"346\":1,\"354\":1,\"358\":1,\"361\":1,\"364\":1,\"367\":1,\"370\":3,\"373\":2,\"376\":2,\"377\":1,\"378\":2,\"379\":1,\"381\":1,\"382\":1,\"383\":1,\"384\":2,\"394\":1,\"397\":1,\"400\":1,\"401\":2,\"402\":2,\"412\":1,\"418\":1,\"420\":3,\"422\":3,\"423\":2,\"424\":1,\"426\":2,\"435\":1,\"439\":1,\"441\":1,\"442\":1,\"443\":1,\"445\":1,\"446\":1,\"449\":1,\"456\":1,\"459\":1,\"461\":1,\"463\":1,\"466\":1,\"467\":1,\"476\":2,\"480\":1,\"485\":1,\"486\":1,\"487\":1,\"489\":1,\"499\":1,\"509\":1,\"517\":2,\"518\":1,\"523\":1,\"527\":1,\"533\":3,\"535\":1,\"537\":3,\"542\":1,\"544\":1,\"546\":2,\"549\":2,\"551\":2,\"557\":17,\"558\":2,\"562\":14,\"564\":3,\"565\":1,\"567\":3,\"569\":16,\"572\":4,\"574\":1,\"576\":6}}],[\"start\",{\"1\":{\"562\":2}}],[\"star\",{\"1\":{\"377\":2}}],[\"stu\",{\"1\":{\"340\":1,\"400\":3,\"405\":1,\"423\":4,\"562\":3}}],[\"study\",{\"1\":{\"328\":2,\"422\":2,\"423\":1}}],[\"student类\",{\"1\":{\"567\":1,\"569\":1}}],[\"studentdemo\",{\"1\":{\"328\":1,\"336\":1,\"337\":1,\"340\":1,\"343\":1,\"345\":1}}],[\"student\",{\"1\":{\"328\":3,\"336\":3,\"337\":3,\"338\":1,\"340\":6,\"343\":16,\"345\":7,\"400\":7,\"404\":1,\"405\":2,\"408\":2,\"412\":6,\"416\":1,\"417\":3,\"418\":3,\"420\":4,\"422\":2,\"423\":4,\"435\":3,\"456\":7,\"459\":5,\"461\":5,\"463\":6,\"476\":3,\"492\":4,\"500\":4,\"542\":3,\"546\":2,\"562\":12,\"567\":23,\"569\":28}}],[\"str\",{\"1\":{\"364\":4,\"367\":3,\"370\":2,\"373\":5,\"382\":2,\"383\":3,\"384\":2,\"385\":2}}],[\"structure\",{\"1\":{\"154\":1,\"157\":1,\"162\":1}}],[\"strictfp\",{\"1\":{\"103\":1}}],[\"stringjoiner跟stringbuilder一样\",{\"1\":{\"385\":1}}],[\"stringjoiner\",{\"0\":{\"385\":1},\"1\":{\"385\":4,\"567\":3}}],[\"stringbuilderdemo7\",{\"1\":{\"384\":1}}],[\"stringbuilderdemo\",{\"1\":{\"384\":1}}],[\"stringbuilderdemo6\",{\"1\":{\"383\":1}}],[\"stringbuilderdemo4\",{\"1\":{\"382\":1}}],[\"stringbuilderdemo3\",{\"1\":{\"381\":1}}],[\"stringbuilder在打印其对象时\",{\"1\":{\"381\":1}}],[\"stringbuilder\",{\"0\":{\"380\":1},\"1\":{\"380\":1,\"381\":2,\"382\":2,\"383\":1,\"384\":2}}],[\"stringdemo11\",{\"1\":{\"379\":1}}],[\"stringdemo9\",{\"1\":{\"376\":1}}],[\"stringdemo\",{\"1\":{\"376\":1,\"379\":1}}],[\"stringdemo02\",{\"1\":{\"358\":1}}],[\"stringdemo01\",{\"1\":{\"354\":1}}],[\"string类\",{\"0\":{\"351\":1}}],[\"string\",{\"1\":{\"72\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"105\":1,\"111\":1,\"112\":1,\"113\":1,\"119\":1,\"121\":2,\"122\":5,\"123\":2,\"130\":1,\"179\":1,\"180\":1,\"187\":1,\"190\":1,\"191\":1,\"206\":2,\"212\":1,\"213\":2,\"215\":2,\"216\":1,\"217\":1,\"224\":1,\"228\":1,\"236\":1,\"242\":1,\"243\":1,\"244\":1,\"263\":1,\"279\":4,\"283\":1,\"289\":1,\"302\":1,\"306\":1,\"309\":1,\"310\":1,\"311\":1,\"313\":2,\"317\":1,\"318\":1,\"319\":1,\"320\":1,\"326\":1,\"327\":1,\"328\":2,\"336\":2,\"337\":4,\"338\":3,\"340\":2,\"343\":6,\"345\":5,\"346\":13,\"352\":3,\"353\":1,\"354\":18,\"355\":1,\"358\":9,\"361\":5,\"364\":2,\"367\":2,\"370\":4,\"373\":6,\"376\":7,\"377\":5,\"378\":6,\"379\":5,\"381\":1,\"382\":2,\"383\":3,\"384\":3,\"385\":1,\"386\":4,\"394\":1,\"397\":1,\"400\":1,\"401\":3,\"402\":3,\"404\":1,\"408\":4,\"412\":2,\"416\":3,\"417\":2,\"418\":2,\"420\":2,\"422\":2,\"423\":2,\"426\":2,\"435\":4,\"439\":1,\"441\":1,\"442\":1,\"443\":1,\"445\":1,\"446\":1,\"449\":1,\"456\":2,\"459\":2,\"461\":5,\"463\":6,\"466\":17,\"476\":2,\"480\":1,\"485\":1,\"486\":1,\"487\":1,\"489\":24,\"497\":1,\"499\":1,\"500\":1,\"509\":9,\"518\":3,\"523\":5,\"533\":3,\"535\":1,\"537\":4,\"542\":1,\"544\":1,\"546\":1,\"557\":1,\"558\":1,\"562\":13,\"564\":3,\"565\":2,\"567\":24,\"569\":6,\"572\":6,\"574\":1,\"576\":3}}],[\"输入错误\",{\"1\":{\"236\":1}}],[\"输入新的项目名称\",{\"1\":{\"162\":1}}],[\"输入完毕点击refactor\",{\"1\":{\"156\":1}}],[\"输入完毕点击下面的refactor\",{\"1\":{\"150\":1}}],[\"输入要修改的新的模块名\",{\"1\":{\"156\":1}}],[\"输入想要修改的名字\",{\"1\":{\"150\":1}}],[\"输入类名\",{\"1\":{\"146\":1,\"149\":1}}],[\"输入模块的名称\",{\"1\":{\"146\":1,\"154\":1}}],[\"输入项目的存放路径\",{\"1\":{\"146\":1}}],[\"输入项目的名称\",{\"1\":{\"146\":1,\"163\":1}}],[\"输写程序内容\",{\"1\":{\"72\":1}}],[\"输出地址值一般没有意义\",{\"1\":{\"567\":1}}],[\"输出\",{\"1\":{\"459\":2,\"461\":2,\"463\":3,\"562\":2,\"569\":3}}],[\"输出值\",{\"1\":{\"412\":1}}],[\"输出集合\",{\"1\":{\"394\":1}}],[\"输出内容不换行\",{\"1\":{\"318\":1}}],[\"输出内容并换行\",{\"1\":{\"318\":1}}],[\"输出调用\",{\"1\":{\"308\":1}}],[\"输出数据5\",{\"1\":{\"242\":1}}],[\"输出数据1\",{\"1\":{\"242\":1}}],[\"输出数据\",{\"0\":{\"242\":1}}],[\"输出工作日\",{\"1\":{\"238\":1}}],[\"输出结果\",{\"1\":{\"167\":1,\"372\":1,\"373\":1,\"456\":1,\"562\":1,\"567\":2,\"569\":4}}],[\"输出变量记录的值\",{\"1\":{\"123\":1}}],[\"输出5个变量的值\",{\"1\":{\"121\":1}}],[\"输出打印\",{\"1\":{\"113\":1}}],[\"输出字符串\",{\"1\":{\"105\":1}}],[\"输出boolean值true\",{\"1\":{\"105\":1}}],[\"输出一个字符\",{\"1\":{\"105\":1}}],[\"输出一个小数\",{\"1\":{\"105\":1}}],[\"输出一个整数\",{\"1\":{\"105\":1}}],[\"输出qq\",{\"1\":{\"62\":1}}],[\"输出回车\",{\"1\":{\"60\":1}}],[\"编写中间类xxxadapter\",{\"1\":{\"554\":1}}],[\"编写成员内部类的注意点\",{\"1\":{\"534\":1}}],[\"编写代码时\",{\"1\":{\"494\":1}}],[\"编写代码\",{\"1\":{\"146\":1,\"567\":1}}],[\"编写程序\",{\"1\":{\"71\":1}}],[\"编译无法通过而报错\",{\"1\":{\"511\":2}}],[\"编译都错误\",{\"1\":{\"482\":1,\"485\":1}}],[\"编译报错\",{\"1\":{\"480\":1}}],[\"编译看左边的父类中有没有show这个方法\",{\"1\":{\"478\":1}}],[\"编译看左边的父类中有没有name这个属性\",{\"1\":{\"478\":1}}],[\"编译看左边\",{\"1\":{\"478\":2,\"480\":1}}],[\"编译错误\",{\"1\":{\"313\":1}}],[\"编译\",{\"1\":{\"83\":1,\"132\":1}}],[\"编译命令后的java文件名需要带文件后缀\",{\"1\":{\"76\":1}}],[\"编译后会产生一个class文件\",{\"1\":{\"72\":1}}],[\"编译文件\",{\"1\":{\"72\":1}}],[\"编译程序\",{\"1\":{\"71\":1}}],[\"编辑此页链接\",{\"1\":{\"6\":1}}],[\"lookhome\",{\"1\":{\"488\":1,\"489\":1}}],[\"long类型的\",{\"1\":{\"210\":1}}],[\"long类型的变量\",{\"1\":{\"120\":1}}],[\"long\",{\"1\":{\"103\":1,\"116\":1,\"118\":1,\"119\":1,\"120\":2,\"171\":2,\"172\":1,\"174\":2,\"175\":2,\"177\":6,\"317\":5,\"562\":4,\"564\":6,\"572\":2}}],[\"lj\",{\"1\":{\"378\":1}}],[\"law\",{\"1\":{\"523\":3,\"524\":3,\"525\":2}}],[\"lang包\",{\"1\":{\"556\":1,\"561\":1,\"566\":1}}],[\"lang\",{\"1\":{\"352\":1,\"491\":1,\"576\":1}}],[\"launcher\",{\"1\":{\"135\":1}}],[\"len\",{\"1\":{\"381\":2,\"385\":2}}],[\"length\",{\"1\":{\"284\":2,\"289\":1,\"290\":1,\"291\":1,\"292\":2,\"293\":1,\"294\":5,\"295\":2,\"296\":3,\"318\":2,\"319\":1,\"320\":1,\"364\":2,\"367\":1,\"370\":4,\"373\":1,\"376\":2,\"378\":1,\"381\":1,\"384\":2,\"385\":1,\"562\":11,\"567\":3}}],[\"legal\",{\"1\":{\"69\":1}}],[\"lintao\",{\"1\":{\"435\":8}}],[\"list\",{\"1\":{\"397\":11,\"400\":6,\"401\":8,\"402\":9}}],[\"lisi\",{\"1\":{\"279\":2,\"346\":2,\"400\":1,\"401\":1,\"402\":1,\"562\":1}}],[\"lib\",{\"1\":{\"69\":1}}],[\"bd9\",{\"1\":{\"572\":1}}],[\"bd8\",{\"1\":{\"572\":2}}],[\"bd7\",{\"1\":{\"572\":2}}],[\"bd6\",{\"1\":{\"572\":6}}],[\"bd5\",{\"1\":{\"572\":3}}],[\"bd4\",{\"1\":{\"572\":4}}],[\"bd3\",{\"1\":{\"572\":4}}],[\"bd2\",{\"1\":{\"572\":7}}],[\"bd10\",{\"1\":{\"572\":2}}],[\"bd1\",{\"1\":{\"572\":8}}],[\"banana\",{\"0\":{\"630\":1}}],[\"banzhuren\",{\"1\":{\"435\":2}}],[\"base\",{\"1\":{\"576\":1}}],[\"bai\",{\"1\":{\"559\":2}}],[\"b则称为外部类\",{\"1\":{\"530\":1}}],[\"bys\",{\"1\":{\"354\":4}}],[\"byte类型的\",{\"1\":{\"210\":1}}],[\"byte类型的取值范围\",{\"1\":{\"118\":1}}],[\"byte的取值范围\",{\"1\":{\"120\":1}}],[\"byte\",{\"1\":{\"103\":1,\"116\":1,\"118\":1,\"119\":1,\"120\":2,\"170\":1,\"171\":3,\"172\":1,\"173\":1,\"174\":1,\"175\":1,\"176\":2,\"177\":2,\"191\":7,\"212\":2,\"213\":5,\"317\":7,\"353\":1,\"354\":3}}],[\"bbb\",{\"1\":{\"269\":1,\"318\":1,\"382\":1,\"385\":5,\"397\":1}}],[\"b2\",{\"1\":{\"176\":2,\"576\":13}}],[\"b1\",{\"1\":{\"176\":2,\"576\":13}}],[\"bigdecimal存储原理\",{\"1\":{\"577\":1}}],[\"bigdecimaldemo02\",{\"1\":{\"576\":4}}],[\"bigdecimaldemo01\",{\"1\":{\"574\":1,\"576\":1}}],[\"bigdecimal\",{\"1\":{\"576\":33}}],[\"bigdecimal所在包是在java\",{\"1\":{\"575\":1}}],[\"bigdecimal类中使用最多的还是提供的进行四则运算的方法\",{\"1\":{\"572\":1,\"576\":1}}],[\"biginteger的底层原理\",{\"1\":{\"573\":1}}],[\"biginteger能表示的最大数字为\",{\"1\":{\"573\":1}}],[\"bigintegerdemo2\",{\"1\":{\"572\":1}}],[\"bigintegerdemo1\",{\"1\":{\"572\":1}}],[\"biginteger内部记录的值不能发生改变\",{\"1\":{\"572\":1}}],[\"biginteger\",{\"1\":{\"572\":69}}],[\"biginteger所在包是在java\",{\"1\":{\"571\":1}}],[\"bigcount++\",{\"1\":{\"367\":1}}],[\"bigcount\",{\"1\":{\"367\":2}}],[\"bit\",{\"1\":{\"135\":1}}],[\"bin\",{\"1\":{\"69\":1,\"84\":1}}],[\"brand\",{\"1\":{\"123\":2,\"326\":2,\"327\":4}}],[\"break\",{\"0\":{\"260\":1},\"1\":{\"103\":1,\"234\":3,\"236\":8,\"238\":3,\"259\":1,\"260\":1,\"265\":2,\"266\":1,\"267\":1,\"361\":1,\"376\":2}}],[\"b\",{\"1\":{\"111\":2,\"112\":2,\"119\":2,\"166\":2,\"173\":2,\"177\":2,\"179\":2,\"187\":2,\"190\":4,\"191\":7,\"206\":5,\"212\":2,\"213\":4,\"215\":4,\"224\":2,\"228\":2,\"302\":3,\"306\":5,\"308\":1,\"309\":3,\"310\":1,\"316\":1,\"317\":8,\"354\":1,\"358\":1,\"465\":2,\"499\":2,\"518\":2,\"557\":6,\"569\":1}}],[\"boolean\",{\"1\":{\"103\":1,\"116\":1,\"119\":1,\"120\":1,\"121\":1,\"266\":1,\"308\":2,\"317\":4,\"358\":2,\"393\":2,\"394\":1,\"402\":2,\"558\":1,\"562\":3,\"565\":1,\"567\":4,\"569\":6,\"572\":3}}],[\"bug的解决\",{\"0\":{\"75\":1}}],[\"bug\",{\"0\":{\"74\":1}}],[\"be\",{\"1\":{\"31\":1}}],[\"jlabel\",{\"1\":{\"565\":4}}],[\"jbutton\",{\"1\":{\"565\":8}}],[\"jframe\",{\"1\":{\"565\":1}}],[\"jumpman\",{\"1\":{\"524\":1}}],[\"j\",{\"1\":{\"295\":5}}],[\"jetbrains\",{\"1\":{\"134\":1}}],[\"jiage\",{\"1\":{\"129\":1}}],[\"jhat\",{\"1\":{\"97\":1}}],[\"jdialog\",{\"1\":{\"565\":9}}],[\"jdb\",{\"1\":{\"97\":1}}],[\"jdk9的新特性\",{\"1\":{\"547\":1}}],[\"jdk默认加上\",{\"1\":{\"534\":1}}],[\"jdk8的新特性\",{\"1\":{\"547\":1}}],[\"jdk8之后不需要手动写\",{\"1\":{\"534\":1}}],[\"jdk8以前必须手动写final\",{\"1\":{\"534\":1}}],[\"jdk8出现的\",{\"1\":{\"385\":1}}],[\"jdk16开始才可以定义静态变量\",{\"1\":{\"534\":1}}],[\"jdk16之前不能定义静态变量\",{\"1\":{\"534\":1}}],[\"jdk14的时候提出了新特性\",{\"1\":{\"488\":1}}],[\"jdk7以前\",{\"1\":{\"527\":1,\"547\":1}}],[\"jdk7之前\",{\"1\":{\"513\":1}}],[\"jdk包含了jre\",{\"1\":{\"97\":1}}],[\"jdk是java的开发工具包\",{\"1\":{\"97\":1}}],[\"jdk是什么\",{\"1\":{\"97\":1}}],[\"jdk\",{\"1\":{\"84\":1,\"97\":2,\"349\":1}}],[\"jdk的安装目录介绍\",{\"0\":{\"69\":1}}],[\"jre包含了jvm\",{\"1\":{\"97\":1}}],[\"jre是java的运行环境\",{\"1\":{\"97\":1}}],[\"jre是什么\",{\"1\":{\"97\":1}}],[\"jre\",{\"1\":{\"97\":2}}],[\"jre和jdk\",{\"0\":{\"97\":1}}],[\"jvm剩余内存大小\",{\"1\":{\"564\":2}}],[\"jvm已经从系统中获取总内存大小\",{\"1\":{\"564\":2}}],[\"jvm能从系统中获取总内存大小\",{\"1\":{\"564\":2}}],[\"jvm三者的包含关系\",{\"1\":{\"97\":1}}],[\"jvm虚拟机\",{\"1\":{\"97\":1}}],[\"jvm\",{\"1\":{\"97\":2,\"355\":1}}],[\"jmods\",{\"1\":{\"69\":1}}],[\"java就给我们提供了bigdecimal供我们进行数据运算\",{\"1\":{\"574\":1}}],[\"java常见api\",{\"0\":{\"555\":1}}],[\"java语法规定\",{\"1\":{\"505\":1}}],[\"java语言数据类型的分类\",{\"0\":{\"115\":1}}],[\"java语言跨平台的原理\",{\"0\":{\"96\":1}}],[\"java语言的数据类型分为\",{\"1\":{\"120\":1}}],[\"java语言的小型版\",{\"1\":{\"93\":1}}],[\"java语言的发展\",{\"0\":{\"90\":1}}],[\"java语言对大小写敏感\",{\"1\":{\"76\":1}}],[\"java提供了final\",{\"1\":{\"495\":1}}],[\"java提供了\",{\"1\":{\"487\":1}}],[\"java提供了不同的虚拟机\",{\"1\":{\"96\":1}}],[\"java只支持单继承\",{\"1\":{\"465\":1}}],[\"java集合\",{\"0\":{\"387\":1}}],[\"java在底层对他做了一些特殊处理\",{\"1\":{\"381\":1}}],[\"java类\",{\"1\":{\"349\":1}}],[\"java字符串常用api\",{\"0\":{\"347\":1}}],[\"java为什么要使用面向对象的方式来编程\",{\"0\":{\"322\":1}}],[\"java面向对象进阶\",{\"0\":{\"403\":1}}],[\"java面向对象\",{\"0\":{\"321\":1}}],[\"java方法\",{\"0\":{\"297\":1}}],[\"java数组\",{\"0\":{\"268\":1}}],[\"java流程控制语句\",{\"0\":{\"219\":1}}],[\"java运算符和表达式\",{\"0\":{\"164\":1}}],[\"java运行环境\",{\"1\":{\"97\":1}}],[\"java中默认是int类型\",{\"1\":{\"570\":1}}],[\"java中\",{\"1\":{\"525\":1}}],[\"java中接口是可以被多实现的\",{\"1\":{\"524\":1}}],[\"java中字面量的分类\",{\"1\":{\"106\":1}}],[\"java中的api\",{\"1\":{\"349\":1}}],[\"java中的注释分为三种\",{\"1\":{\"99\":1}}],[\"java中的符号都是英文格式的\",{\"1\":{\"76\":1}}],[\"java项目最基本的组成单元\",{\"1\":{\"104\":1}}],[\"java已经写好的东西\",{\"1\":{\"97\":1}}],[\"java程序真正运行的地方\",{\"1\":{\"97\":1}}],[\"java程序开发运行流程\",{\"0\":{\"71\":1}}],[\"java虚拟机会通过参数的不同来区分同名的方法\",{\"1\":{\"316\":1}}],[\"java虚拟机\",{\"1\":{\"97\":1}}],[\"java的主要特性\",{\"0\":{\"95\":1}}],[\"java的三大平台\",{\"0\":{\"91\":1}}],[\"javaee\",{\"0\":{\"94\":1},\"1\":{\"91\":1,\"394\":3}}],[\"javame\",{\"0\":{\"93\":1},\"1\":{\"91\":1}}],[\"java15\",{\"1\":{\"90\":1}}],[\"java8\",{\"1\":{\"90\":1}}],[\"java5\",{\"1\":{\"90\":1}}],[\"java可以直接使用\",{\"1\":{\"82\":1}}],[\"java命令的路径到path环境变量中去\",{\"1\":{\"82\":1}}],[\"java代码中\",{\"1\":{\"78\":1}}],[\"javac\",{\"1\":{\"72\":1,\"97\":1}}],[\"javac和java就放在这个目录\",{\"1\":{\"69\":1}}],[\"java文件\",{\"1\":{\"72\":2}}],[\"java\",{\"0\":{\"626\":1,\"627\":1},\"1\":{\"72\":2,\"76\":2,\"82\":1,\"83\":1,\"97\":5,\"130\":1,\"236\":1,\"263\":2,\"311\":1,\"352\":3,\"376\":1,\"394\":1,\"491\":1,\"567\":1,\"572\":2,\"576\":5}}],[\"java是单继承的\",{\"1\":{\"431\":1}}],[\"java是通过static关键字来区分的\",{\"1\":{\"418\":1}}],[\"java是当之无愧的龙头老大\",{\"1\":{\"94\":1}}],[\"java是一门非常火的计算机语言\",{\"1\":{\"65\":1}}],[\"java是什么\",{\"0\":{\"65\":1}}],[\"java概述\",{\"0\":{\"64\":1}}],[\"javase\",{\"0\":{\"92\":1},\"1\":{\"61\":1,\"91\":1}}],[\"java基础语法\",{\"0\":{\"57\":1,\"98\":1}}],[\"以良好的格式\",{\"1\":{\"567\":1}}],[\"以接口为例\",{\"1\":{\"544\":1}}],[\"以达到输出的内容\",{\"1\":{\"535\":1}}],[\"以后一般会用第三方工具进行克隆\",{\"1\":{\"567\":1}}],[\"以后接口中的抽象方法建议不要写上public\",{\"1\":{\"516\":1}}],[\"以后跟开发相关的所有软件建议都安装在同一个文件夹中\",{\"1\":{\"68\":1}}],[\"以上案例中针对不同的动物\",{\"1\":{\"489\":1}}],[\"以前判断是否为质数的方式\",{\"1\":{\"562\":1}}],[\"以前用于接收键盘录入数据的\",{\"1\":{\"426\":1}}],[\"以前我们定义过如下类\",{\"1\":{\"418\":1}}],[\"以前下载的老版本的jdk是没有自动配置的\",{\"1\":{\"83\":1}}],[\"以字符串的形式从键盘接受一个手机号\",{\"1\":{\"377\":2}}],[\"以\",{\"1\":{\"280\":1,\"355\":1}}],[\"以下为语法上要注意的细节\",{\"1\":{\"511\":1,\"526\":1}}],[\"以下\",{\"1\":{\"232\":1}}],[\"以+=为例\",{\"1\":{\"191\":1}}],[\"以此类推\",{\"1\":{\"167\":1}}],[\"以黑马程序员官方网站的论坛模块为例\",{\"1\":{\"141\":1}}],[\"以便初始化继承自父类对象的name和age\",{\"1\":{\"459\":1}}],[\"以便覆盖父类的该方\",{\"1\":{\"449\":1}}],[\"以便\",{\"1\":{\"12\":1}}],[\"傻瓜式安装\",{\"1\":{\"68\":1,\"87\":1}}],[\"安全性\",{\"1\":{\"95\":1}}],[\"安全的在\",{\"1\":{\"18\":1}}],[\"安卓也是可以用java来开发的\",{\"1\":{\"93\":1}}],[\"安装路径不要有中文\",{\"1\":{\"68\":1}}],[\"安装\",{\"0\":{\"68\":1,\"87\":1,\"135\":1}}],[\"也要给你一点小惩罚\",{\"1\":{\"565\":2}}],[\"也表示重写2接口的\",{\"1\":{\"526\":1}}],[\"也就是一个接口可以同时继承多个接口\",{\"1\":{\"525\":1}}],[\"也就是说在接口中定义的成员变量实际上是一个常量\",{\"1\":{\"517\":1}}],[\"也就是说\",{\"1\":{\"352\":1,\"482\":1,\"485\":1}}],[\"也称为重写或者复写\",{\"1\":{\"448\":1}}],[\"也需要写上\",{\"1\":{\"344\":1}}],[\"也可以将匿名内部类作为参数传递\",{\"1\":{\"546\":1}}],[\"也可以访问方法内的局部变量\",{\"1\":{\"538\":1}}],[\"也可以访问非静态的成员变量和非静态的成员方法\",{\"1\":{\"425\":1}}],[\"也可以在类中方法外\",{\"1\":{\"532\":1}}],[\"也可以多继承\",{\"1\":{\"528\":1}}],[\"也可以多实现\",{\"1\":{\"528\":1}}],[\"也可以称为接口的子类\",{\"1\":{\"520\":1}}],[\"也可以有普通方法\",{\"1\":{\"513\":1}}],[\"也可以看成是一个容器\",{\"1\":{\"385\":1}}],[\"也可以单独的书写return\",{\"1\":{\"313\":1}}],[\"也可以省略\",{\"1\":{\"237\":1}}],[\"也是java提前写好的类\",{\"1\":{\"262\":1}}],[\"也是真正干活的代码\",{\"1\":{\"130\":1}}],[\"也不知道循环范围\",{\"1\":{\"251\":1}}],[\"也用到了自增运算符\",{\"1\":{\"187\":1}}],[\"也用到了自增或者自减运算符\",{\"1\":{\"187\":1}}],[\"也会造成数据精度的丢失\",{\"1\":{\"213\":1}}],[\"也会导致数据精度丢失\",{\"1\":{\"179\":1}}],[\"也会出现刚刚新建的模块\",{\"1\":{\"154\":1}}],[\"也叫对象拷贝\",{\"1\":{\"567\":1}}],[\"也叫构造器\",{\"1\":{\"340\":1}}],[\"也叫角标\",{\"1\":{\"283\":1}}],[\"也叫做\",{\"1\":{\"559\":1}}],[\"也叫做实现方法\",{\"1\":{\"509\":1}}],[\"也叫做非\",{\"1\":{\"197\":1}}],[\"也叫做编程语言\",{\"1\":{\"65\":1}}],[\"也叫自动类型提升\",{\"1\":{\"168\":1}}],[\"也有对应的安装包\",{\"1\":{\"67\":1}}],[\"到本地硬盘中手动修改文件夹的名称\",{\"1\":{\"162\":1}}],[\"到资料文件夹中\",{\"1\":{\"135\":1}}],[\"到了终点站\",{\"1\":{\"113\":1}}],[\"到了终点站之后\",{\"1\":{\"113\":1}}],[\"到了2000年以后\",{\"1\":{\"61\":1}}],[\"到今天day01资料文件中\",{\"1\":{\"67\":1}}],[\"就需要用到biginteger\",{\"1\":{\"570\":1}}],[\"就需要重写clone方法并修改里面的方法体\",{\"1\":{\"567\":1}}],[\"就需要加入强制转换\",{\"1\":{\"178\":1}}],[\"就让这个类实现对应的接口就可以了\",{\"1\":{\"552\":1}}],[\"就可考虑使用匿名内部类\",{\"1\":{\"542\":1}}],[\"就可以适配器设计模式\",{\"1\":{\"554\":1}}],[\"就可以考虑使用继承\",{\"1\":{\"472\":1}}],[\"就可以直接得到父类的成员变量和方法\",{\"1\":{\"436\":1}}],[\"就可以把数组里面的每一个元素都获取出来\",{\"1\":{\"284\":1}}],[\"就可以把我的小棉袄穿走了\",{\"1\":{\"195\":1}}],[\"就可以使用string类型的数组来存储\",{\"1\":{\"269\":1}}],[\"就可以使用double类型的数组来存储\",{\"1\":{\"269\":1}}],[\"就可以使用int类型的数组来存储\",{\"1\":{\"269\":1}}],[\"就可以穿走小棉袄了\",{\"1\":{\"195\":1}}],[\"就可以开始免费试用30天了\",{\"1\":{\"135\":1}}],[\"就重写哪个方法\",{\"1\":{\"526\":1}}],[\"就好比是干爹一样\",{\"1\":{\"526\":1}}],[\"就好比是亲爸爸一样\",{\"1\":{\"526\":1}}],[\"就把方法定义为抽象的\",{\"1\":{\"512\":1}}],[\"就被子类继承下来了\",{\"1\":{\"473\":1}}],[\"就说明这个方法必须是重写父类的方法\",{\"1\":{\"450\":1}}],[\"就必须再写一个无参数构造方法\",{\"1\":{\"341\":1}}],[\"就近原则\",{\"1\":{\"338\":1,\"467\":1}}],[\"就得封装对应的数据\",{\"1\":{\"335\":1}}],[\"就表示我已经找到了所有的比平均数小的数据\",{\"1\":{\"294\":1}}],[\"就表示数组里面所有的数字都判断完毕了\",{\"1\":{\"291\":1}}],[\"就表示数组在内存中的位置\",{\"1\":{\"280\":1}}],[\"就表示idea已经成功安装完毕\",{\"1\":{\"135\":1}}],[\"就打印过\",{\"1\":{\"264\":1}}],[\"就会调用一次构造方法\",{\"1\":{\"343\":1}}],[\"就会生成一个新的随机数\",{\"1\":{\"294\":1}}],[\"就会引发索引越界异常\",{\"1\":{\"289\":1}}],[\"就会执行default语句体部分\",{\"1\":{\"235\":1}}],[\"就会执行相应的语句\",{\"1\":{\"235\":1}}],[\"就会用包来管理这些不同的业务\",{\"1\":{\"141\":1}}],[\"就执行语句体n+1\",{\"1\":{\"231\":1}}],[\"就吃经济实惠的沙县小吃\",{\"1\":{\"229\":1}}],[\"就在控制台输出\",{\"1\":{\"224\":2}}],[\"就用到了自增运算符\",{\"1\":{\"187\":1}}],[\"就超出了范围\",{\"1\":{\"179\":1}}],[\"就发给第一个玩家\",{\"1\":{\"166\":1}}],[\"就发现模块名和文件夹名都已经修改完毕\",{\"1\":{\"156\":1}}],[\"就右键点击该文件\",{\"1\":{\"151\":1}}],[\"就跟以前写作文时候的句号是一样的\",{\"1\":{\"110\":1}}],[\"就知道要做什么事情了\",{\"1\":{\"103\":1}}],[\"就已经不提供32位版本的安装包了\",{\"1\":{\"67\":1}}],[\"就是计算0\",{\"1\":{\"574\":1}}],[\"就是默认权限\",{\"1\":{\"494\":1}}],[\"就是子类继承父类的属性和行为\",{\"1\":{\"429\":1}}],[\"就是给对象中的成员变量进行赋值的\",{\"1\":{\"340\":1}}],[\"就是给数组在内存中开辟了一个空间\",{\"1\":{\"275\":1}}],[\"就是用的洗衣机帮我们完成这件事情\",{\"1\":{\"322\":1}}],[\"就是数组容器中每一个小格子对应的编号\",{\"1\":{\"283\":1}}],[\"就是数组在内存中真正的地址值\",{\"1\":{\"280\":1}}],[\"就是一个名字而已\",{\"1\":{\"272\":1}}],[\"就是\",{\"1\":{\"265\":2}}],[\"就是网红餐厅\",{\"1\":{\"229\":1}}],[\"就是转换后的结果刚好是1个字节\",{\"1\":{\"213\":1}}],[\"就是判断左边是否小于等于右边\",{\"1\":{\"192\":1}}],[\"就是判断左边是否小于右边\",{\"1\":{\"192\":1}}],[\"就是判断左边是否大于等于右边\",{\"1\":{\"192\":1}}],[\"就是判断左边是否大于右边\",{\"1\":{\"192\":1}}],[\"就是判断左边跟右边是否不相等\",{\"1\":{\"192\":1}}],[\"就是判断左边跟右边是否相等\",{\"1\":{\"192\":1}}],[\"就是让变量a里面的值\",{\"1\":{\"186\":2}}],[\"就是小的给大的\",{\"1\":{\"169\":1}}],[\"就是把数组里面所有的内容一个一个全部取出来\",{\"1\":{\"284\":1}}],[\"就是把左边跟右边进行运算\",{\"1\":{\"189\":1}}],[\"就是把10赋值给变量a\",{\"1\":{\"187\":1}}],[\"就是把等号右边的结果赋值给左边的变量\",{\"1\":{\"187\":1}}],[\"就是把变量里面的值\",{\"1\":{\"183\":1}}],[\"就是把变量里面的值+1\",{\"1\":{\"183\":1}}],[\"就是把一个取值范围小的数据或者变量\",{\"1\":{\"168\":1}}],[\"就是把自己配置的路径\",{\"1\":{\"63\":1}}],[\"就是对常量或者变量进行操作的符号\",{\"1\":{\"165\":1}}],[\"就是真正写代码的地方\",{\"1\":{\"142\":1}}],[\"就是编译java文件\",{\"1\":{\"72\":1}}],[\"就是在windows操作系统中\",{\"1\":{\"59\":1}}],[\"因为父类中的克隆方法是浅克隆\",{\"1\":{\"567\":1}}],[\"因为此时选择的是在生成hashcode方法时所涉及到的属性\",{\"1\":{\"567\":1}}],[\"因为\",{\"1\":{\"567\":1}}],[\"因为中间类没有什么实际的意义\",{\"1\":{\"526\":1}}],[\"因为没有必要啊\",{\"1\":{\"516\":1}}],[\"因为没有具体返回值类型\",{\"1\":{\"313\":1}}],[\"因为子类对象会调用自己重写的方法\",{\"1\":{\"505\":1}}],[\"因为每次循环\",{\"1\":{\"499\":1}}],[\"因为每个对象都可以访问\",{\"1\":{\"418\":1}}],[\"因为猫类中没有独有的属性\",{\"1\":{\"466\":1}}],[\"因为main方法是静态的\",{\"1\":{\"426\":1}}],[\"因为静态变量或者静态方法直接通过类名访问即可\",{\"1\":{\"424\":1}}],[\"因为类只有一个\",{\"1\":{\"420\":1,\"422\":1}}],[\"因为只有当集合里面所有的元素都比较完了\",{\"1\":{\"401\":1}}],[\"因为只有用户名和密码同时都正确了\",{\"1\":{\"195\":1}}],[\"因为java在底层对其做了一些特殊处理\",{\"1\":{\"381\":1}}],[\"因为java从9版本开始\",{\"1\":{\"67\":1}}],[\"因为stringbuilder是java已经写好的类\",{\"1\":{\"381\":1}}],[\"因为现在我要截取到最后\",{\"1\":{\"377\":1}}],[\"因为右侧是数据的个位\",{\"1\":{\"376\":1}}],[\"因为其存在默认值\",{\"1\":{\"328\":1}}],[\"因为方法的调用处\",{\"1\":{\"310\":1}}],[\"因为永远执行不到\",{\"1\":{\"258\":1}}],[\"因为原来是正数\",{\"1\":{\"217\":1}}],[\"因为b1和b2都是byte类型的\",{\"1\":{\"176\":1}}],[\"因为byte的取值范围是小的\",{\"1\":{\"173\":1}}],[\"因为我们是学习阶段\",{\"1\":{\"135\":1}}],[\"因为这个版本最为稳定\",{\"1\":{\"90\":1}}],[\"因此具体调用所传入的lambda表达式如下所示\",{\"1\":{\"569\":1}}],[\"因此我们可以通过类名直接去调用这些方法\",{\"1\":{\"568\":1}}],[\"因此我们不能使用new关键字去创建objects的对象\",{\"1\":{\"568\":1}}],[\"因此我们就不能直接通过new关键字去创建system类的对象\",{\"1\":{\"561\":1}}],[\"因此我们就不能直接通过new关键字去创建math类的对象\",{\"1\":{\"556\":1}}],[\"因此我们就需要首先查看一下api文档\",{\"1\":{\"556\":1,\"561\":1}}],[\"因此该类不能被继承\",{\"1\":{\"568\":1}}],[\"因此该类是不能被继承的\",{\"1\":{\"556\":1,\"561\":1}}],[\"因此一般情况下我们都会重写object类中的equals方法\",{\"1\":{\"567\":1}}],[\"因此比较完毕以后的结果就是true\",{\"1\":{\"567\":1}}],[\"因此比较结果就是false\",{\"1\":{\"567\":1}}],[\"因此后期为了方便进行测试\",{\"1\":{\"567\":1}}],[\"因此如上代码的等同于如下代码\",{\"1\":{\"567\":1}}],[\"因此重写tostring方法的意义就是以良好的格式\",{\"1\":{\"567\":1}}],[\"因此输出\",{\"1\":{\"562\":1}}],[\"因此在使用的时候就需要进行导包\",{\"1\":{\"571\":1,\"575\":1}}],[\"因此在使用的时候需要进行导包\",{\"1\":{\"568\":1}}],[\"因此在使用的时候我们可以直接通过类名去调用\",{\"1\":{\"556\":1,\"561\":1}}],[\"因此在使用的时候不需要进行导包\",{\"1\":{\"556\":1,\"561\":1}}],[\"因此可以借助于\",{\"1\":{\"15\":1}}],[\"因此\",{\"1\":{\"12\":1}}],[\"重点讲解内容\",{\"1\":{\"557\":1,\"562\":1,\"566\":1,\"567\":1,\"569\":1}}],[\"重点\",{\"0\":{\"539\":1},\"1\":{\"477\":1,\"503\":1}}],[\"重写object中的clone方法\",{\"1\":{\"567\":1}}],[\"重写完毕以后运行程序进行测试\",{\"1\":{\"567\":1}}],[\"重写完毕以后\",{\"1\":{\"567\":1}}],[\"重写的时候去掉default关键字\",{\"1\":{\"548\":1}}],[\"重写的方法尽量和父类保持一致\",{\"1\":{\"453\":1}}],[\"重写抽象方法\",{\"1\":{\"542\":1}}],[\"重写接口中的方法\",{\"1\":{\"542\":1}}],[\"重写父类的抽象方法\",{\"1\":{\"509\":1}}],[\"重写方法\",{\"1\":{\"541\":1}}],[\"重写方法有哪些基本要求\",{\"1\":{\"467\":1}}],[\"重写方法的名称\",{\"1\":{\"453\":1}}],[\"重写注解校验\",{\"1\":{\"450\":1}}],[\"重新实现\",{\"1\":{\"448\":1,\"450\":1}}],[\"重新认识一下main方法\",{\"0\":{\"426\":1}}],[\"重要\",{\"0\":{\"343\":1}}],[\"重要功能\",{\"1\":{\"341\":1}}],[\"重要的内容\",{\"1\":{\"24\":1}}],[\"重载与返回值无关\",{\"1\":{\"316\":1}}],[\"重载仅针对同一个类中方法的名称与参数进行识别\",{\"1\":{\"316\":1}}],[\"重载仅对应方法的定义\",{\"1\":{\"316\":1}}],[\"重复的代码\",{\"1\":{\"299\":1}}],[\"重复代码\",{\"1\":{\"241\":1}}],[\"重复使用某个值\",{\"1\":{\"113\":1}}],[\"重装成64位的操作系统\",{\"1\":{\"67\":1}}],[\"需要用static修饰\",{\"1\":{\"549\":1}}],[\"需要访问父类构造方法\",{\"1\":{\"511\":1}}],[\"需要通过static关键字修饰\",{\"1\":{\"503\":1}}],[\"需要带子类和父类中所有的属性\",{\"1\":{\"466\":1}}],[\"需要使用关键字default修饰\",{\"1\":{\"548\":1}}],[\"需要使用super\",{\"1\":{\"443\":1}}],[\"需要使用jdk提供的开发工具\",{\"1\":{\"82\":1}}],[\"需要把子类中共性的内容抽取到父类中\",{\"1\":{\"434\":1}}],[\"需要把用户对象里面的id拿出来再进行比较\",{\"1\":{\"402\":1}}],[\"需要注意\",{\"1\":{\"431\":1}}],[\"需要注意的是\",{\"1\":{\"421\":1,\"423\":1,\"443\":1}}],[\"需要拼接元素和逗号空格\",{\"1\":{\"370\":1}}],[\"需要见名知意\",{\"1\":{\"328\":1}}],[\"需要什么\",{\"1\":{\"318\":1,\"320\":1}}],[\"需要什么才能完成\",{\"1\":{\"310\":1,\"311\":1,\"402\":1}}],[\"需要继续使用这个结果\",{\"1\":{\"310\":1}}],[\"需要三个月的营业额\",{\"1\":{\"310\":1}}],[\"需要三个步骤\",{\"1\":{\"71\":1}}],[\"需要手动使用后\",{\"1\":{\"299\":1}}],[\"需要结合隐式转换考虑\",{\"1\":{\"269\":1}}],[\"需要对求和操作添加限制条件\",{\"1\":{\"244\":1}}],[\"需要定义一个变量\",{\"1\":{\"243\":1,\"244\":1}}],[\"需要在方法内部创建对象并使用\",{\"1\":{\"538\":1}}],[\"需要在子类中重写\",{\"1\":{\"526\":1}}],[\"需要在合适的时候把循环判断条件修改为false\",{\"1\":{\"240\":1}}],[\"需要在末尾加上f标识符\",{\"1\":{\"120\":1}}],[\"需要在末尾加上l标识符\",{\"1\":{\"120\":1}}],[\"需要转换成一样的类型才能进行计算\",{\"1\":{\"171\":1}}],[\"需要先关闭当前项目\",{\"1\":{\"162\":1}}],[\"需要记忆以下几点\",{\"0\":{\"118\":1}}],[\"需要写在多行\",{\"1\":{\"100\":1}}],[\"需要下载对应版本的jdk\",{\"1\":{\"67\":1}}],[\"需求2\",{\"1\":{\"283\":1,\"378\":1}}],[\"需求1\",{\"1\":{\"283\":1,\"378\":1}}],[\"需求\",{\"1\":{\"62\":1,\"113\":1,\"121\":1,\"122\":1,\"123\":1,\"167\":1,\"206\":3,\"224\":2,\"225\":1,\"226\":1,\"228\":1,\"229\":1,\"230\":1,\"232\":1,\"236\":1,\"238\":1,\"241\":1,\"242\":3,\"243\":1,\"244\":1,\"245\":1,\"264\":2,\"265\":2,\"266\":2,\"267\":1,\"290\":1,\"291\":1,\"292\":1,\"293\":1,\"294\":1,\"295\":1,\"296\":1,\"302\":1,\"306\":1,\"309\":1,\"310\":2,\"311\":2,\"317\":1,\"318\":1,\"319\":1,\"320\":1,\"328\":1,\"337\":1,\"345\":1,\"377\":1,\"383\":1,\"384\":1,\"401\":2,\"402\":1,\"466\":1,\"489\":1,\"558\":1,\"565\":1}}],[\"注\",{\"1\":{\"569\":1}}],[\"注解可以校验重写是否正确\",{\"1\":{\"467\":1}}],[\"注解\",{\"1\":{\"450\":1}}],[\"注释内容不会参与编译和运行\",{\"1\":{\"101\":1}}],[\"注释的使用细节\",{\"1\":{\"101\":1}}],[\"注释的分类\",{\"1\":{\"101\":1}}],[\"注释的内容不会参与编译和运行的\",{\"1\":{\"101\":1}}],[\"注释就是对代码进行解释说明的文字\",{\"1\":{\"101\":1}}],[\"注释是对代码的解释和说明文字\",{\"1\":{\"99\":1}}],[\"注释\",{\"0\":{\"99\":1},\"1\":{\"373\":1}}],[\"注释之前的内容被视为文章摘要\",{\"1\":{\"30\":1}}],[\"注意事项\",{\"0\":{\"451\":1},\"1\":{\"113\":1}}],[\"注意点\",{\"0\":{\"101\":1,\"185\":1,\"191\":1,\"193\":1,\"205\":1,\"273\":1,\"276\":1},\"1\":{\"179\":1,\"182\":1,\"197\":1,\"206\":1}}],[\"注意\",{\"1\":{\"72\":4,\"82\":1,\"99\":1,\"103\":1,\"106\":1,\"180\":1,\"191\":1,\"299\":1,\"301\":1,\"304\":1,\"308\":2,\"316\":1,\"343\":1,\"353\":1,\"381\":1,\"461\":1,\"493\":1,\"500\":1,\"508\":1,\"516\":1,\"535\":1}}],[\"注意2\",{\"1\":{\"67\":1}}],[\"注意1\",{\"1\":{\"67\":1}}],[\"warning\",{\"1\":{\"565\":3}}],[\"watchhouse\",{\"1\":{\"485\":1,\"486\":2,\"487\":2}}],[\"wang\",{\"1\":{\"466\":8}}],[\"wangwu\",{\"1\":{\"279\":2,\"400\":1,\"401\":1,\"402\":1,\"562\":1}}],[\"work\",{\"1\":{\"479\":1,\"509\":6}}],[\"world\",{\"1\":{\"394\":2,\"426\":1}}],[\"web\",{\"0\":{\"627\":1}}],[\"week\",{\"1\":{\"236\":2,\"238\":3}}],[\"weight2\",{\"1\":{\"206\":2}}],[\"weight1\",{\"1\":{\"206\":2}}],[\"while格式\",{\"0\":{\"256\":1,\"257\":1}}],[\"while是先执行\",{\"1\":{\"251\":1}}],[\"while循环\",{\"0\":{\"246\":1,\"250\":1}}],[\"while\",{\"1\":{\"103\":1,\"221\":2,\"247\":1,\"248\":1,\"249\":1,\"250\":1,\"256\":1,\"257\":1,\"258\":1,\"267\":1,\"376\":2}}],[\"www\",{\"1\":{\"67\":1,\"134\":1}}],[\"with\",{\"1\":{\"88\":1}}],[\"wine\",{\"1\":{\"225\":2}}],[\"window\",{\"1\":{\"163\":1}}],[\"windows逐渐的以图形化界面为主了\",{\"1\":{\"61\":1}}],[\"win98之前的操作系统是以非图形化的dos为基础的\",{\"1\":{\"61\":1}}],[\"win\",{\"1\":{\"60\":1}}],[\"will\",{\"1\":{\"31\":1}}],[\"下面这个不是构造\",{\"1\":{\"572\":1}}],[\"下面两种写法\",{\"1\":{\"499\":1}}],[\"下面是子类\",{\"1\":{\"434\":1}}],[\"下面我想得到数组里面的每一个元素并进行拼接\",{\"1\":{\"370\":1}}],[\"下面的代码就不执行了\",{\"1\":{\"261\":1}}],[\"下标\",{\"1\":{\"283\":1}}],[\"下划线\",{\"1\":{\"125\":1}}],[\"下来一位乘客\",{\"1\":{\"113\":6}}],[\"下一步即可\",{\"1\":{\"68\":1}}],[\"下一篇\",{\"1\":{\"6\":1}}],[\"下载\",{\"0\":{\"67\":1,\"134\":1}}],[\"计数器count\",{\"1\":{\"367\":1}}],[\"计算完毕以后计算机会把运算的结果再转换成十进制数据给我们展示\",{\"1\":{\"574\":1}}],[\"计算a的b次幂的值\",{\"1\":{\"557\":1}}],[\"计算出数组的长度\",{\"1\":{\"287\":1}}],[\"计算并返回\",{\"1\":{\"265\":2}}],[\"计算得到的实际结果和我们预期的结果刚好是相反的\",{\"1\":{\"208\":1}}],[\"计算关系表达式的值\",{\"1\":{\"204\":1}}],[\"计算规则\",{\"0\":{\"204\":1},\"1\":{\"196\":1,\"197\":1,\"208\":1,\"209\":1}}],[\"计算机会将这个十进制数据转换成二进制数据\",{\"1\":{\"574\":1}}],[\"计算机中的计算和存储都是以补码的形式进行的\",{\"1\":{\"209\":1}}],[\"计算机使用反码计算存在的问题\",{\"0\":{\"209\":1}}],[\"计算机使用原码计算存在的问题\",{\"0\":{\"208\":1}}],[\"计算机发展\",{\"1\":{\"135\":10,\"146\":17,\"149\":3,\"150\":3,\"151\":2,\"154\":7,\"155\":3,\"156\":4,\"157\":11,\"160\":3,\"161\":3,\"162\":9,\"163\":6}}],[\"计算机语言\",{\"1\":{\"65\":1}}],[\"计划\",{\"1\":{\"25\":2}}],[\"人里面有一颗心脏\",{\"1\":{\"531\":1}}],[\"人类\",{\"1\":{\"456\":1}}],[\"人物信息为\",{\"1\":{\"379\":2}}],[\"人家要什么类型的\",{\"1\":{\"306\":1}}],[\"人家要几个\",{\"1\":{\"306\":1}}],[\"人的年龄\",{\"1\":{\"118\":1}}],[\"人与计算机之间进行信息交流沟通的一种特殊语言\",{\"1\":{\"65\":1}}],[\"人与人交流沟通的表达方式\",{\"1\":{\"65\":1}}],[\"人机交互\",{\"0\":{\"58\":1}}],[\"语句体n+1\",{\"1\":{\"231\":1,\"234\":1}}],[\"语句体2\",{\"1\":{\"228\":1,\"231\":1,\"234\":1}}],[\"语句体1\",{\"1\":{\"228\":1,\"231\":1,\"234\":1}}],[\"语句体\",{\"1\":{\"224\":1}}],[\"语言\",{\"1\":{\"65\":1}}],[\"语法\",{\"1\":{\"17\":1,\"34\":1}}],[\"语法进行了扩展\",{\"1\":{\"16\":1}}],[\"语法扩展\",{\"1\":{\"15\":1}}],[\"再次运行程序\",{\"1\":{\"567\":1}}],[\"再次重新配置path环境变量\",{\"1\":{\"83\":1}}],[\"再比如终止当前jvm等等\",{\"1\":{\"561\":1}}],[\"再实现其他多个接口\",{\"1\":{\"526\":1}}],[\"再实现多个接口\",{\"1\":{\"526\":1}}],[\"再创建其子类对象本身\",{\"1\":{\"462\":1}}],[\"再把字符串变回对象就可以了\",{\"1\":{\"567\":1}}],[\"再把stringbuilder变回字符串\",{\"1\":{\"382\":1}}],[\"再把最终的结果赋值给左边\",{\"1\":{\"190\":1}}],[\"再转成中文\",{\"1\":{\"376\":1}}],[\"再拼接\",{\"1\":{\"373\":1}}],[\"再拼接最后一个右括号\",{\"1\":{\"370\":1}}],[\"再进行判断\",{\"1\":{\"402\":1}}],[\"再进行换行\",{\"1\":{\"318\":1}}],[\"再进行运算\",{\"1\":{\"170\":1,\"171\":1}}],[\"再跟number进行比较\",{\"1\":{\"265\":1}}],[\"再执行自己\",{\"1\":{\"471\":2}}],[\"再执行\",{\"1\":{\"251\":1}}],[\"再判断\",{\"1\":{\"250\":1,\"251\":1}}],[\"再选择已经安装的jdk版本即可\",{\"1\":{\"157\":1}}],[\"再选择rename\",{\"1\":{\"156\":1}}],[\"再按回车\",{\"1\":{\"146\":1,\"149\":1}}],[\"再找环境变量\",{\"1\":{\"63\":1}}],[\"再点击copy\",{\"1\":{\"492\":1}}],[\"再点击rename\",{\"1\":{\"150\":1}}],[\"再点击new\",{\"1\":{\"146\":1}}],[\"再点击右下角的next\",{\"1\":{\"146\":3}}],[\"再点击ok\",{\"1\":{\"135\":1,\"157\":1,\"162\":1}}],[\"再点击首选项\",{\"1\":{\"88\":1}}],[\"再点击确定即可\",{\"1\":{\"63\":1}}],[\"再点击下面的环境变量\",{\"1\":{\"63\":2}}],[\"会弹出如下对话框\",{\"1\":{\"567\":1}}],[\"会写一个继承结构下的标准javabean即可\",{\"1\":{\"466\":1}}],[\"会出现覆盖效果\",{\"1\":{\"448\":1}}],[\"会先在子类中查找有没有对应的方法\",{\"1\":{\"445\":1}}],[\"会先找当前路径\",{\"1\":{\"63\":1}}],[\"会存储在静态区\",{\"1\":{\"424\":1}}],[\"会返回字符串的长度\",{\"1\":{\"364\":1}}],[\"会根据索引获取对应的字符\",{\"1\":{\"364\":1}}],[\"会根据他不同的考试成绩\",{\"1\":{\"232\":1}}],[\"会拿着字符到计算机内置的ascii码表中去查对应的数字\",{\"1\":{\"181\":1}}],[\"会将前后的数据进行拼接\",{\"1\":{\"180\":1}}],[\"会在idea的列表中删除\",{\"1\":{\"160\":1}}],[\"会发现代码报错\",{\"1\":{\"157\":1}}],[\"会有最终界面提示\",{\"1\":{\"135\":1}}],[\"会不会影响以后工作呢\",{\"1\":{\"90\":1}}],[\"会使用\",{\"1\":{\"15\":1}}],[\"移动的好处\",{\"1\":{\"63\":1}}],[\"移动到最上面\",{\"1\":{\"63\":1}}],[\"把这些字符在ascii码表上的值\",{\"1\":{\"577\":1}}],[\"把这句话中的敏感词进行替换\",{\"1\":{\"378\":1}}],[\"把数据看成字符串\",{\"1\":{\"577\":1}}],[\"把对象变成一个字符串\",{\"1\":{\"567\":1}}],[\"把a对象的属性值完全拷贝给b对象\",{\"1\":{\"567\":1}}],[\"把arr1中对象的地址值赋值给arr2中\",{\"1\":{\"562\":1}}],[\"把结果进行输出\",{\"1\":{\"567\":1}}],[\"把结果输出在控制台\",{\"1\":{\"319\":1}}],[\"把srcarray数组中从0索引开始的3个元素\",{\"1\":{\"562\":1}}],[\"把以上四步合成一步呢\",{\"1\":{\"542\":1}}],[\"把判断和强转合并成了一行\",{\"1\":{\"488\":1}}],[\"把父类name属性的值打印出来\",{\"1\":{\"478\":1}}],[\"把共性写到父类中\",{\"1\":{\"466\":1}}],[\"把他们相同的属性和行为都定义在人类中\",{\"1\":{\"434\":1}}],[\"把用户对象添加到集合当中\",{\"1\":{\"401\":1,\"402\":1}}],[\"把学生对象添加到集合中\",{\"1\":{\"400\":1}}],[\"把说的话中所有的敏感词都替换为\",{\"1\":{\"378\":1}}],[\"把大写数字和单位拼接到result当中\",{\"1\":{\"376\":1}}],[\"把转换之后的大写拼接到moneystr当中\",{\"1\":{\"376\":1}}],[\"把789变成\",{\"1\":{\"375\":1}}],[\"把2135变成\",{\"1\":{\"375\":1}}],[\"把倒着拼接之后的结果返回即可\",{\"1\":{\"373\":1}}],[\"把传递进来的字符串进行反转\",{\"1\":{\"373\":1}}],[\"把新的字符串再赋值给s\",{\"1\":{\"370\":1}}],[\"把一个数组变成字符串\",{\"1\":{\"370\":1}}],[\"把一个小的赋值给一个大的是可以直接给的\",{\"1\":{\"172\":1}}],[\"把\",{\"1\":{\"369\":1,\"370\":1,\"384\":1}}],[\"把生成的随机数添加的数组当中\",{\"1\":{\"294\":1}}],[\"把随机数存入到数组当中\",{\"1\":{\"294\":1}}],[\"把反复猜的代码写在循环中\",{\"1\":{\"267\":1}}],[\"把左边和右边相加\",{\"1\":{\"190\":1}}],[\"把最终的结果赋值给左边\",{\"1\":{\"189\":1}}],[\"把计算的结果赋值给左边的变量\",{\"1\":{\"187\":2}}],[\"把每一张牌都定义一个序号\",{\"1\":{\"166\":1}}],[\"把代码编写\",{\"1\":{\"132\":1}}],[\"把前面字符串的长度补齐到8\",{\"1\":{\"106\":1}}],[\"把当前配置的路径移动到最上面\",{\"1\":{\"63\":1}}],[\"把软件的完整路径\",{\"1\":{\"63\":2}}],[\"点击project\",{\"1\":{\"163\":1}}],[\"点击项目后面的叉\",{\"1\":{\"162\":1}}],[\"点击open\",{\"1\":{\"161\":1,\"162\":1}}],[\"点击ok\",{\"1\":{\"146\":1,\"156\":1,\"161\":1,\"162\":1,\"163\":1,\"567\":1}}],[\"点击右下角的finish\",{\"1\":{\"154\":1,\"163\":1}}],[\"点击右下角的next\",{\"1\":{\"154\":1}}],[\"点击右下角的ok\",{\"1\":{\"146\":1,\"154\":1}}],[\"点击refactor\",{\"1\":{\"150\":1}}],[\"点击run\",{\"1\":{\"146\":1}}],[\"点击finish完成生成操作\",{\"1\":{\"567\":1}}],[\"点击finish即可\",{\"1\":{\"135\":1}}],[\"点击file\",{\"1\":{\"146\":1,\"154\":1,\"157\":1,\"160\":1,\"162\":1,\"163\":1}}],[\"点击java\",{\"1\":{\"146\":1,\"149\":1}}],[\"点击+\",{\"1\":{\"146\":1,\"154\":1,\"157\":1}}],[\"点击module\",{\"1\":{\"146\":1}}],[\"点击左下方的empty\",{\"1\":{\"146\":1}}],[\"点击左侧的高级系统设置\",{\"1\":{\"63\":1}}],[\"点击creat\",{\"1\":{\"146\":1}}],[\"点击蓝色的evaluate\",{\"1\":{\"135\":1}}],[\"点击第一排第二个\",{\"1\":{\"135\":1}}],[\"点击install\",{\"1\":{\"135\":1}}],[\"点击browse修改安装路径\",{\"1\":{\"135\":1}}],[\"点击next\",{\"1\":{\"135\":2,\"567\":1}}],[\"点击设置\",{\"1\":{\"88\":1}}],[\"点击上移\",{\"1\":{\"63\":1}}],[\"点击新建\",{\"1\":{\"63\":1}}],[\"点击高级系统设置\",{\"1\":{\"63\":1}}],[\"第3个包子有虫子就跳过\",{\"1\":{\"261\":1}}],[\"第五次\",{\"1\":{\"243\":1}}],[\"第五站\",{\"1\":{\"113\":2}}],[\"第五步\",{\"1\":{\"63\":1}}],[\"第四次\",{\"1\":{\"243\":1}}],[\"第四章\",{\"0\":{\"239\":1}}],[\"第四站\",{\"1\":{\"113\":2}}],[\"第四步\",{\"1\":{\"63\":1,\"180\":1}}],[\"第二个圆更大\",{\"1\":{\"311\":1}}],[\"第二次赋值\",{\"1\":{\"499\":2}}],[\"第二次循环\",{\"1\":{\"370\":1,\"376\":1}}],[\"第二次\",{\"1\":{\"243\":1}}],[\"第二章\",{\"0\":{\"223\":1}}],[\"第二站\",{\"1\":{\"113\":2}}],[\"第二步\",{\"1\":{\"63\":1,\"130\":1,\"177\":1,\"180\":2}}],[\"第一个圆更大\",{\"1\":{\"311\":1}}],[\"第一个关键字class\",{\"0\":{\"104\":1}}],[\"第一次赋值\",{\"1\":{\"499\":1}}],[\"第一次循环\",{\"1\":{\"376\":1}}],[\"第一次\",{\"1\":{\"243\":1}}],[\"第一次启动会询问\",{\"1\":{\"135\":1}}],[\"第一种格式的细节\",{\"0\":{\"227\":1}}],[\"第一章\",{\"0\":{\"220\":1}}],[\"第一站\",{\"1\":{\"113\":2}}],[\"第一步\",{\"1\":{\"63\":1,\"130\":1,\"177\":1,\"180\":2}}],[\"第三方写的代码导入到项目中\",{\"1\":{\"567\":1}}],[\"第三次\",{\"1\":{\"243\":1}}],[\"第三章\",{\"0\":{\"233\":1}}],[\"第三站\",{\"1\":{\"113\":2}}],[\"第三行代码中的helloworld必须用双引号引起来\",{\"1\":{\"79\":1}}],[\"第三步\",{\"1\":{\"63\":1,\"130\":1,\"180\":1}}],[\"第六步\",{\"1\":{\"63\":1}}],[\"图解示例如下\",{\"1\":{\"63\":1}}],[\"图片引入\",{\"1\":{\"33\":1}}],[\"图片增强\",{\"0\":{\"26\":1}}],[\"可见\",{\"1\":{\"429\":1,\"494\":1}}],[\"可做可不做\",{\"1\":{\"63\":2}}],[\"可以超出long的取值范围\",{\"1\":{\"572\":1}}],[\"可以理解为\",{\"1\":{\"570\":1}}],[\"可以将hashcode方法删除\",{\"1\":{\"567\":1}}],[\"可以获取到程序运行时设计到的一些信息\",{\"1\":{\"563\":1}}],[\"可以传递接口所有实现类的对象\",{\"1\":{\"552\":1}}],[\"可以单继承\",{\"1\":{\"528\":1}}],[\"可以单实现\",{\"1\":{\"528\":1}}],[\"可以继承一个类的同时\",{\"1\":{\"526\":1}}],[\"可以有构造方法\",{\"1\":{\"511\":1}}],[\"可以写这些类的父类\",{\"1\":{\"489\":1}}],[\"可以接收所有子类对象\",{\"1\":{\"479\":1}}],[\"可以让类跟类之间产生子父的关系\",{\"1\":{\"472\":1}}],[\"可以多层继承\",{\"1\":{\"465\":1}}],[\"可以调用本类中的其他构造方法\",{\"1\":{\"464\":1}}],[\"可以调用父类构造方法初始化继承自父类的成员变量的数据\",{\"1\":{\"464\":1}}],[\"可以不写\",{\"1\":{\"456\":2,\"459\":2,\"461\":1}}],[\"可以在方法中\",{\"1\":{\"532\":1}}],[\"可以在接口跟实现类中间\",{\"1\":{\"526\":1}}],[\"可以在父类中提供公共的getxxx方法和setxxx方法\",{\"1\":{\"443\":1}}],[\"可以在输入法中进行对应的设置\",{\"1\":{\"80\":1}}],[\"可以通过getter\",{\"1\":{\"438\":1}}],[\"可以通过手机帮我们完成这件事情\",{\"1\":{\"322\":1}}],[\"可以声明一个子类继承另外一个父类\",{\"1\":{\"431\":1}}],[\"可以把内部类理解成寄生\",{\"1\":{\"530\":1}}],[\"可以把多个构造方法中重复的代码抽取出来\",{\"1\":{\"502\":1}}],[\"可以把多个子类中重复的代码抽取到父类中\",{\"1\":{\"472\":1}}],[\"可以把多个子类中重复的代码抽取到父类中了\",{\"1\":{\"430\":1}}],[\"可以把字符串倒着遍历\",{\"1\":{\"373\":1}}],[\"可以使多种事物之间形成一种关系体系\",{\"1\":{\"429\":1}}],[\"可以使用下面这两种方式\",{\"1\":{\"502\":1}}],[\"可以使用强制类型转换的格式\",{\"1\":{\"484\":1}}],[\"可以使用带参构造\",{\"1\":{\"341\":1}}],[\"可以使用键盘录入的方式获取值\",{\"1\":{\"232\":1}}],[\"可以使用或\",{\"1\":{\"195\":1}}],[\"可以使用且\",{\"1\":{\"195\":1}}],[\"可以被所有对象共享\",{\"1\":{\"424\":1}}],[\"可以直接被类名调用\",{\"1\":{\"424\":1}}],[\"可以直接去调用自身其他的方法\",{\"1\":{\"382\":1}}],[\"可以直接给\",{\"1\":{\"169\":1}}],[\"可以看做是对象的内存地址值\",{\"1\":{\"567\":1}}],[\"可以看成是一个容器\",{\"1\":{\"380\":1}}],[\"可以看到这里a+b得到的结果\",{\"1\":{\"191\":1}}],[\"可以区别成员变量和局部变量\",{\"1\":{\"338\":1}}],[\"可以修饰成员\",{\"1\":{\"337\":1}}],[\"可以少学\",{\"1\":{\"335\":1}}],[\"可以找扫地机器人帮我们完成这件事事情\",{\"1\":{\"322\":1}}],[\"可以返回\",{\"1\":{\"320\":1}}],[\"可以返回也可以不返回\",{\"1\":{\"310\":1,\"402\":1}}],[\"可以省略不写\",{\"1\":{\"313\":1,\"457\":1}}],[\"可以省略return\",{\"1\":{\"313\":1}}],[\"可以提高代码的可维护性\",{\"1\":{\"299\":1}}],[\"可以提高代码的复用性\",{\"1\":{\"299\":1}}],[\"可以同来存储同种数据类型的多个值\",{\"1\":{\"269\":1}}],[\"可以变\",{\"1\":{\"263\":2}}],[\"可以成功赋值\",{\"1\":{\"173\":1}}],[\"可以判断a是否为偶数\",{\"1\":{\"166\":1}}],[\"可以用构造方法获取\",{\"1\":{\"572\":1}}],[\"可以用静态方法获取\",{\"1\":{\"572\":1}}],[\"可以用于修饰类\",{\"1\":{\"495\":1}}],[\"可以用来修饰成员\",{\"1\":{\"336\":1}}],[\"可以用在switch和循环中\",{\"1\":{\"260\":1}}],[\"可以用取模来判断\",{\"1\":{\"166\":1}}],[\"可以用单行注释\",{\"1\":{\"100\":1}}],[\"可以利用取模来判断一个数是奇数还是偶数\",{\"1\":{\"166\":1}}],[\"可以点击new\",{\"1\":{\"163\":1}}],[\"可以点击右上角的setup\",{\"1\":{\"157\":1}}],[\"可以点击右上角关闭\",{\"1\":{\"135\":1}}],[\"可以再建一个新的项目\",{\"1\":{\"160\":1}}],[\"可以存放多个模块\",{\"1\":{\"140\":1}}],[\"可以到官方网站自行下载\",{\"1\":{\"134\":1}}],[\"可以选择long类型\",{\"1\":{\"118\":1}}],[\"可以选择byte类型\",{\"1\":{\"118\":1}}],[\"可以定义多个变量\",{\"1\":{\"112\":1}}],[\"可以打开我的电脑之后右键点击空白处\",{\"1\":{\"63\":1}}],[\"可以叫做dos命令\",{\"1\":{\"61\":1}}],[\"可以根据文件结构将它们转换为不同的页面\",{\"1\":{\"12\":1}}],[\"步骤\",{\"1\":{\"63\":1,\"84\":1}}],[\"作为超类\",{\"1\":{\"566\":1}}],[\"作为方法参数传递\",{\"1\":{\"546\":1}}],[\"作为父类\",{\"1\":{\"465\":1}}],[\"作用就是结束方法\",{\"1\":{\"402\":1}}],[\"作用是给成员变量进行初始化的\",{\"1\":{\"343\":1}}],[\"作用不大\",{\"1\":{\"280\":1}}],[\"作用\",{\"0\":{\"282\":1},\"1\":{\"63\":1,\"105\":1,\"283\":1,\"340\":2,\"370\":1,\"385\":1,\"502\":1,\"503\":1,\"548\":1}}],[\"作者设置为\",{\"1\":{\"32\":1}}],[\"环境变量失效了\",{\"1\":{\"84\":1}}],[\"环境变量\",{\"0\":{\"63\":1,\"81\":1}}],[\"5^3\",{\"1\":{\"559\":1}}],[\"57\",{\"1\":{\"379\":1}}],[\"54\",{\"1\":{\"379\":1}}],[\"53\",{\"1\":{\"379\":1}}],[\"52\",{\"1\":{\"379\":1}}],[\"5299\",{\"1\":{\"123\":1}}],[\"51\",{\"1\":{\"379\":1}}],[\"5字符串的比较\",{\"0\":{\"356\":1}}],[\"55四舍五入的结果为\",{\"1\":{\"557\":2}}],[\"55\",{\"1\":{\"293\":3,\"318\":2,\"379\":1,\"557\":1}}],[\"5的数据求和几乎完全一样\",{\"1\":{\"244\":1}}],[\"5之间的数据和是\",{\"1\":{\"243\":1}}],[\"5之间的数据和\",{\"1\":{\"243\":1}}],[\"5和5\",{\"1\":{\"242\":1}}],[\"500\",{\"1\":{\"565\":1}}],[\"50\",{\"1\":{\"217\":1,\"379\":1,\"565\":2}}],[\"568db2f2\",{\"1\":{\"280\":1}}],[\"56\",{\"1\":{\"213\":2,\"269\":1,\"379\":1,\"562\":6}}],[\"5\",{\"0\":{\"63\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"114\":1,\"115\":1,\"116\":1,\"119\":1,\"121\":1,\"122\":2,\"123\":1,\"147\":1,\"148\":1,\"149\":1,\"150\":1,\"151\":1,\"157\":1,\"163\":1,\"265\":1,\"312\":1,\"313\":1,\"314\":1,\"339\":1,\"340\":1,\"341\":1,\"342\":1,\"343\":1,\"344\":1,\"345\":1,\"346\":1,\"357\":1,\"358\":1,\"401\":1,\"413\":1,\"414\":1,\"415\":1,\"416\":1,\"417\":1,\"440\":1,\"441\":1,\"442\":1,\"443\":1,\"453\":1,\"463\":1,\"480\":1,\"486\":1,\"501\":1,\"502\":1,\"503\":1,\"512\":1,\"524\":1,\"525\":1,\"535\":1,\"545\":1,\"560\":1,\"568\":1,\"569\":1},\"1\":{\"76\":1,\"105\":3,\"119\":1,\"121\":1,\"225\":1,\"236\":1,\"238\":3,\"241\":2,\"242\":1,\"243\":1,\"248\":1,\"260\":1,\"261\":1,\"264\":2,\"265\":2,\"277\":1,\"280\":1,\"283\":1,\"287\":1,\"289\":7,\"290\":4,\"291\":3,\"292\":3,\"293\":2,\"295\":4,\"296\":1,\"308\":2,\"318\":1,\"320\":1,\"346\":1,\"370\":2,\"376\":1,\"379\":2,\"435\":1,\"441\":2,\"442\":1,\"443\":1,\"482\":1,\"489\":1,\"564\":1,\"567\":1,\"572\":3}}],[\"​\",{\"1\":{\"62\":1,\"63\":3,\"67\":3,\"68\":1,\"70\":1,\"72\":2,\"74\":1,\"77\":2,\"78\":3,\"79\":1,\"80\":2,\"82\":1,\"86\":2,\"87\":1,\"88\":2,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":3,\"94\":2,\"99\":1,\"100\":3,\"101\":2,\"103\":2,\"104\":3,\"108\":1,\"109\":1,\"110\":7,\"111\":3,\"113\":9,\"117\":2,\"118\":3,\"140\":1,\"141\":1,\"142\":1,\"143\":5,\"165\":2,\"166\":3,\"200\":10,\"215\":2,\"232\":5,\"237\":2,\"240\":1,\"241\":2,\"245\":3,\"250\":1,\"251\":4,\"254\":1,\"256\":1,\"257\":1,\"260\":1,\"261\":2,\"264\":4,\"265\":1,\"266\":1,\"267\":2,\"269\":8,\"270\":1,\"271\":1,\"273\":2,\"274\":3,\"275\":11,\"277\":3,\"281\":1,\"283\":2,\"285\":1,\"289\":2,\"379\":3,\"384\":3,\"386\":2,\"466\":6,\"482\":1,\"490\":1,\"491\":4,\"493\":1,\"512\":1,\"516\":2,\"534\":4,\"558\":1,\"559\":2,\"563\":1,\"565\":4,\"567\":5,\"570\":4}}],[\"启动cmd\",{\"1\":{\"62\":1}}],[\"利用ascii码表进行转换\",{\"1\":{\"379\":1}}],[\"利用带全部参数的构造来创建对象\",{\"1\":{\"346\":1}}],[\"利用空参构造创建对象\",{\"1\":{\"346\":1}}],[\"利用循环去交换数据\",{\"1\":{\"295\":1}}],[\"利用静态初始化完成创建并添加元素\",{\"1\":{\"278\":1,\"279\":1,\"280\":1}}],[\"利用jdk12简化代码书写\",{\"1\":{\"238\":1}}],[\"利用case穿透简化代码\",{\"1\":{\"238\":1}}],[\"利用cmd命令打开自己电脑上的qq\",{\"1\":{\"62\":1}}],[\"利用switch进行匹配\",{\"1\":{\"238\":1}}],[\"利用三元运算符求出两个数中的较大值\",{\"1\":{\"206\":1}}],[\"利用三元运算符求出最终结果\",{\"1\":{\"206\":1}}],[\"利用notepad++去编写一个helloworld并能成功编译和运行\",{\"1\":{\"89\":1}}],[\"利用命令行的方式去操作计算机\",{\"1\":{\"59\":1}}],[\"4舍五入\",{\"1\":{\"576\":1}}],[\"42亿的21亿次方\",{\"1\":{\"573\":1}}],[\"42亿多\",{\"1\":{\"573\":1}}],[\"4^3\",{\"1\":{\"559\":1}}],[\"49\",{\"1\":{\"379\":1}}],[\"48\",{\"1\":{\"379\":2}}],[\"4位\",{\"1\":{\"379\":1}}],[\"4创建字符串对象两种方式的区别\",{\"0\":{\"355\":1}}],[\"4的平方根2\",{\"1\":{\"265\":1}}],[\"44\",{\"1\":{\"213\":1,\"293\":2,\"318\":2}}],[\"404\",{\"1\":{\"624\":1}}],[\"400\",{\"1\":{\"565\":1}}],[\"4064\",{\"1\":{\"564\":1}}],[\"402823e+38\",{\"1\":{\"116\":1}}],[\"401298e\",{\"1\":{\"116\":1}}],[\"45四舍五入的结果为\",{\"1\":{\"557\":2}}],[\"45的最大整数位\",{\"1\":{\"557\":4}}],[\"45的最小整数位\",{\"1\":{\"557\":4}}],[\"45表示乘以10的负45次方\",{\"1\":{\"117\":1}}],[\"45\",{\"1\":{\"116\":1,\"319\":1,\"557\":7,\"562\":6}}],[\"4\",{\"0\":{\"62\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"89\":1,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":1,\"113\":1,\"121\":1,\"144\":1,\"145\":1,\"146\":1,\"151\":1,\"156\":1,\"162\":1,\"240\":1,\"241\":1,\"246\":1,\"247\":1,\"250\":1,\"251\":2,\"264\":1,\"307\":1,\"308\":1,\"309\":1,\"310\":1,\"311\":2,\"319\":1,\"328\":1,\"334\":1,\"335\":1,\"336\":1,\"337\":1,\"338\":2,\"343\":1,\"345\":1,\"346\":1,\"384\":1,\"385\":1,\"398\":1,\"399\":1,\"400\":1,\"409\":1,\"410\":1,\"411\":1,\"412\":1,\"423\":1,\"425\":1,\"436\":1,\"437\":1,\"438\":1,\"439\":1,\"452\":1,\"462\":1,\"466\":1,\"478\":1,\"485\":1,\"495\":1,\"496\":1,\"497\":1,\"498\":1,\"499\":1,\"500\":2,\"511\":1,\"519\":1,\"520\":1,\"521\":1,\"522\":1,\"523\":2,\"524\":1,\"534\":1,\"544\":1,\"559\":1,\"566\":1,\"567\":1,\"573\":1,\"577\":1,\"593\":1,\"613\":1},\"1\":{\"62\":1,\"76\":1,\"116\":3,\"119\":1,\"121\":1,\"122\":1,\"236\":1,\"238\":2,\"243\":1,\"249\":1,\"264\":2,\"265\":6,\"266\":1,\"269\":2,\"277\":1,\"280\":1,\"283\":1,\"287\":1,\"289\":1,\"290\":4,\"291\":3,\"292\":3,\"293\":1,\"295\":4,\"296\":1,\"318\":1,\"320\":1,\"331\":1,\"346\":1,\"370\":2,\"376\":1,\"377\":1,\"378\":1,\"379\":1,\"400\":1,\"401\":1,\"402\":1,\"424\":1,\"435\":1,\"466\":1,\"489\":1,\"542\":1,\"564\":1,\"567\":1,\"572\":3,\"576\":3}}],[\"退出命令提示符窗口\",{\"1\":{\"61\":1}}],[\"清屏\",{\"1\":{\"61\":1}}],[\"回顾基本数据类型转换\",{\"1\":{\"482\":1}}],[\"回到主界面\",{\"1\":{\"146\":1,\"156\":1}}],[\"回退到盘符目录\",{\"1\":{\"61\":1}}],[\"回退到上一级目录\",{\"1\":{\"61\":1}}],[\"回车\",{\"1\":{\"61\":1}}],[\"进度\",{\"1\":{\"567\":1}}],[\"进行除法运算\",{\"1\":{\"576\":1}}],[\"进行乘法运算\",{\"1\":{\"576\":1}}],[\"进行减法运算\",{\"1\":{\"576\":1}}],[\"进行加法运算\",{\"1\":{\"576\":1}}],[\"进行运算的时候\",{\"1\":{\"574\":1}}],[\"进行了优化\",{\"1\":{\"572\":1}}],[\"进行数组元素的copy\",{\"1\":{\"562\":1}}],[\"进行数值元素copy\",{\"1\":{\"562\":1}}],[\"进行比较\",{\"1\":{\"559\":1}}],[\"进行拼接\",{\"1\":{\"370\":1}}],[\"进行引用\",{\"1\":{\"33\":1}}],[\"进入到启动程序qq\",{\"1\":{\"62\":1}}],[\"进入多级目录\",{\"1\":{\"61\":1}}],[\"进入单级目录\",{\"1\":{\"61\":1}}],[\"divisor\",{\"1\":{\"576\":2}}],[\"divideandremainder\",{\"1\":{\"572\":3}}],[\"divide\",{\"1\":{\"572\":2,\"576\":8}}],[\"dir\",{\"1\":{\"61\":1}}],[\"ddm\",{\"1\":{\"449\":3}}],[\"ddd\",{\"1\":{\"318\":1,\"382\":1,\"397\":1}}],[\"dlei\",{\"1\":{\"435\":8}}],[\"database\",{\"0\":{\"628\":1}}],[\"data\",{\"1\":{\"567\":20}}],[\"dadbut\",{\"1\":{\"565\":5}}],[\"day\",{\"1\":{\"379\":2}}],[\"day01的资料文件夹里面也有对应的安装包\",{\"1\":{\"86\":1}}],[\"dazhe\",{\"1\":{\"129\":1}}],[\"d\",{\"1\":{\"112\":1,\"119\":2,\"172\":2,\"175\":2,\"280\":1,\"465\":1,\"466\":5,\"482\":1,\"486\":2,\"487\":2,\"488\":2,\"489\":6}}],[\"dog和cat虽然都是animal的子类\",{\"1\":{\"489\":1}}],[\"dog和cat都是animal的子类\",{\"1\":{\"489\":1}}],[\"dog\",{\"1\":{\"466\":7,\"480\":1,\"485\":1,\"486\":3,\"487\":4,\"488\":1,\"489\":17}}],[\"dohomework\",{\"1\":{\"328\":2}}],[\"doublevalue\",{\"1\":{\"572\":1}}],[\"double类型的数据是不能存到这个数组中的\",{\"1\":{\"269\":1}}],[\"double\",{\"1\":{\"103\":1,\"111\":2,\"116\":1,\"118\":1,\"119\":1,\"120\":2,\"121\":1,\"122\":1,\"123\":1,\"171\":2,\"172\":2,\"174\":1,\"175\":2,\"179\":1,\"249\":1,\"274\":2,\"275\":1,\"277\":1,\"280\":5,\"311\":4,\"316\":2,\"435\":6,\"456\":2,\"459\":2,\"461\":2,\"482\":1,\"509\":4,\"557\":16,\"559\":1,\"572\":1}}],[\"do\",{\"0\":{\"250\":1,\"257\":1},\"1\":{\"103\":1,\"221\":1,\"250\":1,\"251\":1,\"257\":1}}],[\"dos操作系统中的命令才叫做dos命令\",{\"1\":{\"61\":1}}],[\"decimal\",{\"1\":{\"576\":2}}],[\"desarray\",{\"1\":{\"562\":7}}],[\"destpos\",{\"1\":{\"562\":3}}],[\"dest\",{\"1\":{\"562\":3}}],[\"design\",{\"1\":{\"554\":1}}],[\"demo2\",{\"1\":{\"492\":2}}],[\"demo10\",{\"1\":{\"509\":1}}],[\"demo1\",{\"1\":{\"492\":2}}],[\"demo02\",{\"1\":{\"576\":1}}],[\"demo07\",{\"1\":{\"456\":1,\"459\":1,\"461\":1,\"544\":1,\"546\":1}}],[\"demo05\",{\"1\":{\"445\":1}}],[\"demo04\",{\"1\":{\"441\":1,\"442\":1,\"443\":1,\"567\":4}}],[\"demo03\",{\"1\":{\"439\":1}}],[\"demo\",{\"1\":{\"105\":1,\"128\":1,\"310\":1,\"320\":1,\"466\":1}}],[\"defaultobj\",{\"1\":{\"569\":1}}],[\"default不能省略\",{\"1\":{\"548\":1}}],[\"default可以放在任意位置\",{\"1\":{\"237\":1}}],[\"default的位置和省略情况\",{\"1\":{\"237\":1}}],[\"default\",{\"1\":{\"103\":1,\"234\":1,\"236\":1,\"237\":1,\"238\":2,\"548\":2}}],[\"development\",{\"1\":{\"97\":1}}],[\"develop\",{\"0\":{\"618\":1,\"631\":1},\"1\":{\"84\":1}}],[\"employee\",{\"1\":{\"509\":7}}],[\"email\",{\"1\":{\"346\":8}}],[\"error\",{\"1\":{\"465\":1}}],[\"element\",{\"1\":{\"393\":1,\"394\":1}}],[\"else\",{\"1\":{\"103\":1,\"228\":2,\"229\":1,\"230\":2,\"231\":2,\"232\":5,\"265\":1,\"266\":2,\"267\":2,\"292\":1,\"302\":1,\"306\":1,\"309\":1,\"311\":1,\"318\":1,\"336\":1,\"361\":2,\"367\":2,\"370\":2,\"376\":1,\"379\":1,\"383\":1,\"384\":1,\"397\":1,\"408\":1,\"416\":1,\"487\":1,\"488\":2,\"489\":2,\"562\":3,\"565\":3}}],[\"equals方法的重写\",{\"1\":{\"567\":1}}],[\"equals方法的作用\",{\"0\":{\"358\":1}}],[\"equalslgnorecase\",{\"1\":{\"358\":1}}],[\"equals\",{\"1\":{\"358\":4,\"361\":2,\"383\":1,\"401\":1,\"402\":1,\"567\":6,\"569\":2,\"572\":3}}],[\"eat\",{\"1\":{\"346\":3,\"480\":4,\"485\":5,\"486\":2,\"487\":2,\"489\":10}}],[\"evaluate\",{\"1\":{\"135\":1}}],[\"e+38表示是乘以10的38次方\",{\"1\":{\"117\":1}}],[\"end\",{\"1\":{\"377\":2,\"562\":2}}],[\"enum\",{\"1\":{\"103\":1}}],[\"environment\",{\"1\":{\"97\":1}}],[\"enhance\",{\"1\":{\"17\":1}}],[\"exact\",{\"1\":{\"576\":1}}],[\"expansion\",{\"1\":{\"576\":1}}],[\"exponent\",{\"1\":{\"572\":2}}],[\"exception\",{\"1\":{\"576\":1}}],[\"extendsdemo05\",{\"1\":{\"446\":1}}],[\"extends\",{\"1\":{\"103\":1,\"431\":2,\"435\":3,\"439\":1,\"441\":1,\"442\":1,\"443\":1,\"445\":1,\"446\":1,\"449\":1,\"450\":1,\"456\":1,\"459\":1,\"461\":1,\"465\":6,\"466\":2,\"472\":1,\"476\":3,\"480\":2,\"485\":2,\"489\":2,\"497\":1,\"498\":1,\"509\":2,\"525\":1,\"562\":1,\"565\":1,\"569\":1}}],[\"exec\",{\"1\":{\"564\":3,\"565\":4}}],[\"exe等命令\",{\"1\":{\"82\":1}}],[\"exe\",{\"1\":{\"82\":1}}],[\"exe加回车表示启动qq\",{\"1\":{\"62\":1}}],[\"exe所在的路径\",{\"1\":{\"62\":1}}],[\"exit\",{\"1\":{\"61\":1,\"562\":2,\"564\":4}}],[\"e\",{\"1\":{\"61\":1,\"84\":1,\"117\":1,\"119\":2,\"393\":4,\"394\":4,\"509\":2,\"565\":2,\"572\":1}}],[\"盘符切换\",{\"1\":{\"61\":1}}],[\"盘符名称\",{\"1\":{\"61\":1}}],[\"操作时\",{\"1\":{\"180\":1}}],[\"操作步骤\",{\"0\":{\"145\":1}}],[\"操作系统本身其实是不认识java语言的\",{\"1\":{\"96\":1}}],[\"操作系统会先在当前路径下找\",{\"1\":{\"63\":1}}],[\"操作\",{\"1\":{\"61\":1}}],[\"常量命名规范建议字母全部大写\",{\"1\":{\"517\":1}}],[\"常量必须要给初始值\",{\"1\":{\"517\":1}}],[\"常量\",{\"0\":{\"517\":1},\"1\":{\"518\":1}}],[\"常见方法\",{\"0\":{\"557\":1,\"562\":1,\"564\":1,\"567\":1,\"569\":1,\"572\":1,\"576\":1}}],[\"常见错误代码4\",{\"0\":{\"80\":1}}],[\"常见错误代码3\",{\"0\":{\"79\":1}}],[\"常见错误代码2\",{\"0\":{\"78\":1}}],[\"常见错误代码1\",{\"0\":{\"77\":1}}],[\"常见的cmd命令如下\",{\"1\":{\"61\":1}}],[\"常用\",{\"1\":{\"500\":1}}],[\"常用的构造方法\",{\"1\":{\"354\":1}}],[\"常用的数据类型\",{\"0\":{\"111\":1}}],[\"常用cmd命令\",{\"0\":{\"61\":1}}],[\"常用网站\",{\"0\":{\"2\":1}}],[\"currenttimemillis\",{\"1\":{\"562\":4}}],[\"ceil\",{\"1\":{\"557\":4}}],[\"c2\",{\"1\":{\"465\":2}}],[\"c1\",{\"1\":{\"465\":4}}],[\"cry\",{\"1\":{\"449\":3,\"450\":1}}],[\"createstu02\",{\"1\":{\"412\":1}}],[\"ctmd\",{\"1\":{\"378\":2}}],[\"ctrl\",{\"1\":{\"346\":1,\"361\":1,\"364\":1}}],[\"cba\",{\"1\":{\"372\":1,\"373\":2}}],[\"chs\",{\"1\":{\"354\":4,\"358\":3}}],[\"charat\",{\"1\":{\"364\":2,\"367\":1,\"373\":1,\"376\":1,\"379\":1}}],[\"char类型的变量在参与运算的时候\",{\"1\":{\"177\":1}}],[\"char三种类型的数据在运算的时候\",{\"1\":{\"170\":1,\"171\":1}}],[\"char\",{\"1\":{\"103\":1,\"116\":1,\"119\":1,\"120\":1,\"121\":1,\"182\":1,\"346\":4,\"353\":1,\"354\":3,\"358\":1,\"364\":1,\"367\":1,\"376\":1,\"379\":1,\"404\":1,\"418\":1,\"463\":5}}],[\"cn\",{\"1\":{\"346\":2}}],[\"cc\",{\"1\":{\"318\":1}}],[\"ccc\",{\"1\":{\"269\":1,\"382\":1,\"385\":5,\"397\":1}}],[\"c\",{\"1\":{\"112\":1,\"119\":2,\"182\":2,\"187\":2,\"224\":2,\"310\":1,\"354\":1,\"358\":1,\"364\":2,\"367\":8,\"376\":2,\"466\":4,\"484\":1,\"485\":2,\"487\":2,\"488\":2,\"489\":8,\"492\":1,\"499\":5,\"509\":2}}],[\"cat是猫类\",{\"1\":{\"483\":1}}],[\"cat和dog都是动物\",{\"1\":{\"477\":1}}],[\"cat对象也是animal类型\",{\"1\":{\"475\":1}}],[\"cat继承了animal\",{\"1\":{\"475\":1}}],[\"cat\",{\"1\":{\"449\":3,\"450\":1,\"466\":6,\"480\":2,\"483\":1,\"484\":3,\"485\":6,\"486\":2,\"487\":6,\"488\":1,\"489\":17}}],[\"catchmouse\",{\"1\":{\"480\":2,\"485\":3,\"487\":2,\"488\":1,\"489\":1}}],[\"catch\",{\"1\":{\"103\":1,\"565\":4}}],[\"capitalnumber\",{\"1\":{\"376\":2}}],[\"call\",{\"1\":{\"326\":2,\"327\":2}}],[\"case穿透\",{\"1\":{\"237\":1}}],[\"case\",{\"1\":{\"103\":1,\"234\":2,\"236\":7,\"237\":3,\"238\":9}}],[\"cloneable\",{\"1\":{\"567\":2}}],[\"clonenotsupportedexception\",{\"1\":{\"567\":2}}],[\"clone\",{\"1\":{\"567\":5}}],[\"classcastexception\",{\"1\":{\"486\":1}}],[\"class表示定义类\",{\"1\":{\"104\":1}}],[\"class后面跟随的就是这个类的名字\",{\"1\":{\"104\":1}}],[\"class关键字表示定义一个类\",{\"1\":{\"103\":1}}],[\"class关键字是什么意思\",{\"1\":{\"103\":1}}],[\"class文件\",{\"1\":{\"72\":1}}],[\"class\",{\"0\":{\"142\":1},\"1\":{\"72\":1,\"76\":1,\"78\":1,\"79\":1,\"80\":1,\"103\":1,\"104\":1,\"105\":1,\"111\":1,\"112\":1,\"113\":1,\"119\":1,\"121\":1,\"122\":1,\"123\":1,\"130\":1,\"137\":1,\"138\":1,\"143\":1,\"146\":1,\"149\":1,\"179\":1,\"187\":1,\"190\":1,\"191\":1,\"206\":1,\"212\":1,\"213\":2,\"215\":2,\"216\":1,\"217\":1,\"224\":1,\"228\":1,\"236\":1,\"242\":1,\"243\":1,\"244\":1,\"263\":1,\"283\":1,\"289\":1,\"302\":1,\"306\":1,\"309\":1,\"310\":1,\"311\":1,\"313\":2,\"316\":5,\"317\":1,\"318\":1,\"319\":1,\"320\":1,\"326\":2,\"327\":1,\"328\":2,\"336\":2,\"337\":2,\"338\":1,\"340\":3,\"343\":2,\"345\":2,\"346\":2,\"354\":1,\"358\":1,\"361\":1,\"364\":1,\"367\":1,\"370\":1,\"373\":1,\"376\":1,\"377\":1,\"378\":2,\"379\":1,\"381\":1,\"382\":1,\"383\":1,\"384\":1,\"394\":1,\"397\":1,\"400\":1,\"401\":1,\"402\":1,\"404\":2,\"408\":2,\"412\":2,\"416\":1,\"417\":1,\"418\":1,\"420\":1,\"422\":1,\"423\":1,\"426\":1,\"431\":2,\"435\":5,\"439\":3,\"441\":3,\"442\":3,\"443\":3,\"445\":3,\"446\":3,\"449\":3,\"450\":1,\"456\":3,\"459\":3,\"461\":3,\"463\":2,\"465\":10,\"466\":4,\"472\":1,\"476\":5,\"480\":4,\"485\":4,\"486\":1,\"487\":1,\"489\":5,\"497\":6,\"498\":2,\"499\":1,\"500\":2,\"508\":2,\"509\":4,\"512\":1,\"521\":1,\"523\":3,\"524\":1,\"533\":6,\"535\":3,\"537\":3,\"538\":2,\"542\":2,\"544\":1,\"546\":1,\"557\":1,\"558\":1,\"561\":1,\"562\":9,\"564\":1,\"565\":2,\"567\":6,\"569\":3,\"572\":2,\"574\":1,\"576\":3}}],[\"cls\",{\"1\":{\"61\":1}}],[\"cook\",{\"1\":{\"509\":5}}],[\"color\",{\"1\":{\"466\":12,\"489\":12}}],[\"count++\",{\"1\":{\"249\":1,\"291\":1,\"294\":1,\"558\":1,\"559\":1}}],[\"count\",{\"1\":{\"113\":13,\"249\":2,\"291\":2,\"294\":2,\"376\":2,\"558\":2,\"559\":2}}],[\"content\",{\"1\":{\"565\":2}}],[\"contains\",{\"1\":{\"320\":2,\"402\":2}}],[\"continue\",{\"0\":{\"261\":1},\"1\":{\"103\":1,\"259\":1,\"261\":1,\"264\":1}}],[\"conf\",{\"1\":{\"69\":1}}],[\"const\",{\"1\":{\"18\":1,\"103\":1}}],[\"command\",{\"1\":{\"564\":2}}],[\"compittion\",{\"1\":{\"523\":3}}],[\"compare\",{\"1\":{\"317\":8}}],[\"com\",{\"1\":{\"67\":1,\"134\":1,\"310\":1,\"320\":1,\"376\":1,\"379\":1,\"384\":1,\"463\":1,\"466\":1,\"490\":2,\"492\":4,\"523\":1,\"567\":6,\"572\":2,\"576\":1}}],[\"cmd练习\",{\"0\":{\"62\":1}}],[\"cmd默认操作c盘下的users文件夹下的xxx文件夹\",{\"1\":{\"60\":1}}],[\"cd\",{\"1\":{\"61\":6}}],[\"在\",{\"1\":{\"574\":1}}],[\"在内部对常用的数字\",{\"1\":{\"572\":1}}],[\"在该类中编写测试代码\",{\"1\":{\"569\":1}}],[\"在通过输出语句输出一个对象时\",{\"1\":{\"567\":1}}],[\"在空白处使用快捷键\",{\"1\":{\"567\":2}}],[\"在测试类\",{\"1\":{\"567\":1}}],[\"在测试类的main方法中去创建学生对象\",{\"1\":{\"567\":1}}],[\"在测试类中\",{\"1\":{\"466\":1}}],[\"在object类中提供了一个无参构造方法\",{\"1\":{\"566\":1}}],[\"在拷贝的时候需要考虑数组的长度\",{\"1\":{\"562\":2}}],[\"在执行完毕以后再次获取一次系统时间\",{\"1\":{\"562\":1}}],[\"在执行的过程中\",{\"1\":{\"235\":1}}],[\"在math类中\",{\"1\":{\"556\":1}}],[\"在main\",{\"1\":{\"302\":1,\"306\":2,\"309\":2}}],[\"在api文档中没有体现可用的构造方法\",{\"1\":{\"556\":1,\"561\":1}}],[\"在成员位置定义一个类\",{\"1\":{\"535\":1}}],[\"在成员内部类里面\",{\"1\":{\"534\":1}}],[\"在外部类中定义一个方法提供内部类的对象\",{\"1\":{\"533\":1}}],[\"在子类中可以不用重写\",{\"1\":{\"526\":1}}],[\"在子类中需要访问父类中非私有成员变量时\",{\"1\":{\"443\":1}}],[\"在接口中定义的成员变量默认会加上\",{\"1\":{\"517\":1}}],[\"在jdk7\",{\"1\":{\"515\":1}}],[\"在java中接口是被实现的\",{\"1\":{\"521\":1,\"523\":1}}],[\"在java中提供了四种访问权限\",{\"1\":{\"493\":1}}],[\"在java中面向对象到底学什么\",{\"0\":{\"323\":1}}],[\"在java中涉及了很多的运算符\",{\"1\":{\"206\":1}}],[\"在java中整数默认是int类型\",{\"1\":{\"117\":1}}],[\"在每个构造器中进行调用\",{\"1\":{\"502\":1}}],[\"在每次创建子类对象时\",{\"1\":{\"462\":1}}],[\"在构造方法中赋值一次\",{\"1\":{\"500\":1}}],[\"在定义成员变量的时候立马赋值\",{\"1\":{\"500\":1}}],[\"在定义变量的时候\",{\"1\":{\"118\":1}}],[\"在使用float或者double类型的数据在进行数学运算的时候\",{\"1\":{\"574\":1}}],[\"在使用自己写的同一个包中的类时\",{\"1\":{\"491\":1}}],[\"在使用java核心包\",{\"1\":{\"491\":1}}],[\"在使用java中提供的非核心包中的类时\",{\"1\":{\"491\":1}}],[\"在idea项目中\",{\"1\":{\"490\":1}}],[\"在idea列表页面\",{\"1\":{\"155\":1}}],[\"在多态形式下\",{\"1\":{\"479\":1}}],[\"在实际运行的时候\",{\"1\":{\"478\":2}}],[\"在实际开发中\",{\"1\":{\"230\":1}}],[\"在这种情况下\",{\"1\":{\"476\":1}}],[\"在这个枚举类中定义了很多种取舍方式\",{\"1\":{\"576\":1}}],[\"在这个过程中\",{\"1\":{\"180\":5}}],[\"在这个界面\",{\"1\":{\"162\":1}}],[\"在下图中register方法只能传递学生对象\",{\"1\":{\"476\":1}}],[\"在继承体系中\",{\"1\":{\"467\":1}}],[\"在大脑中要区分谁是父\",{\"1\":{\"466\":1}}],[\"在画图时\",{\"1\":{\"434\":1}}],[\"在堆里面的地址值\",{\"1\":{\"386\":1}}],[\"在前面补0\",{\"1\":{\"376\":1}}],[\"在拼接的时候\",{\"1\":{\"370\":3}}],[\"在输入框中输入random\",{\"1\":{\"350\":1}}],[\"在吃饭\",{\"1\":{\"346\":1}}],[\"在吃第\",{\"1\":{\"260\":1,\"261\":1}}],[\"在创建对象的时候\",{\"1\":{\"410\":1}}],[\"在创建对象的时候给成员变量进行初始化的\",{\"1\":{\"340\":1}}],[\"在创造对象的时候\",{\"1\":{\"343\":1}}],[\"在初始化对象的时候\",{\"1\":{\"343\":1}}],[\"在学生测试类中通过对象完成成员变量和成员方法的使用\",{\"1\":{\"328\":1}}],[\"在调用处要根据方法的结果\",{\"1\":{\"308\":1}}],[\"在数组中的索引位置\",{\"1\":{\"320\":2}}],[\"在数组中\",{\"1\":{\"294\":1}}],[\"在循环的过程中\",{\"1\":{\"284\":1}}],[\"在起名字的时候遵循小驼峰命名法\",{\"1\":{\"275\":1}}],[\"在代码中使用键盘录入去猜出这个数字是多少\",{\"1\":{\"267\":1}}],[\"在代码当中\",{\"1\":{\"265\":1}}],[\"在控制台输出结果\",{\"1\":{\"372\":1,\"373\":1}}],[\"在控制台输出1\",{\"1\":{\"242\":1}}],[\"在控制台输出\",{\"1\":{\"228\":2}}],[\"在利用原码对正数进行计算时是不会有问题的\",{\"1\":{\"208\":1}}],[\"在写==的时候\",{\"1\":{\"193\":1}}],[\"在底层进行了隐式转换\",{\"1\":{\"173\":1}}],[\"在赋值的时候把一个int类型的赋值给了一个double类型的\",{\"1\":{\"172\":1}}],[\"在以后用的不多\",{\"1\":{\"196\":1}}],[\"在以后\",{\"1\":{\"166\":1}}],[\"在以后代码当中\",{\"1\":{\"80\":1}}],[\"在右侧页面中\",{\"1\":{\"162\":1}}],[\"在右边可以输入size的数值来调节代码字体的大小\",{\"1\":{\"146\":1}}],[\"在中间位置就会出现导入的模块信息\",{\"1\":{\"157\":1}}],[\"在中间空白区域就出现了刚刚新建的模块\",{\"1\":{\"154\":1}}],[\"在本界面还可以打开本地已经存在的项目\",{\"1\":{\"161\":1}}],[\"在本界面让我们购买idea\",{\"1\":{\"135\":1}}],[\"在本地硬盘中还是存在的\",{\"1\":{\"155\":1}}],[\"在主界面中也会出现导入的模块信息\",{\"1\":{\"157\":1}}],[\"在主界面中\",{\"1\":{\"154\":1}}],[\"在弹出的界面中点击ok\",{\"1\":{\"151\":1}}],[\"在弹出的页面当中\",{\"1\":{\"88\":1}}],[\"在类加载的时候\",{\"1\":{\"503\":1}}],[\"在类中通过成员方法来体现\",{\"1\":{\"326\":1}}],[\"在类中通过成员变量来体现\",{\"1\":{\"326\":1}}],[\"在类中编写代码\",{\"1\":{\"145\":1}}],[\"在类名后面会有一对大括号\",{\"1\":{\"104\":1}}],[\"在黑马程序员的官方网站中\",{\"1\":{\"140\":1}}],[\"在一个程序执行的过程中\",{\"1\":{\"220\":1}}],[\"在一个新的窗口打开了新的项目\",{\"1\":{\"163\":1}}],[\"在一个新的窗口打开\",{\"1\":{\"163\":1}}],[\"在一个项目中\",{\"1\":{\"140\":1}}],[\"在一条语句中\",{\"1\":{\"112\":1}}],[\"在day02的资料文件夹中有\",{\"1\":{\"124\":1}}],[\"在原有的基础上\",{\"1\":{\"113\":1}}],[\"在打印的时候\",{\"1\":{\"106\":1}}],[\"在编辑器中一般都有特殊的颜色标记\",{\"1\":{\"103\":1}}],[\"在书写的时候都不要进行嵌套\",{\"1\":{\"101\":1}}],[\"在服务器领域\",{\"1\":{\"94\":1}}],[\"在系统中显示文件的扩展名\",{\"1\":{\"76\":1}}],[\"在电脑系统或程序中\",{\"1\":{\"74\":1}}],[\"在环境变量中是从上往下依次查找的\",{\"1\":{\"63\":1}}],[\"在cmd中打开软件时\",{\"1\":{\"63\":1}}],[\"在启动软件的时候\",{\"1\":{\"63\":1}}],[\"在windows操作系统当中\",{\"1\":{\"62\":1}}],[\"在很多资料中都说成是dos命令\",{\"1\":{\"61\":1}}],[\"在运行窗口中输出cmd\",{\"1\":{\"60\":1}}],[\"在页面禁用功能与布局\",{\"1\":{\"6\":1}}],[\"此处还是返回的对象的地址值\",{\"1\":{\"569\":1}}],[\"此处比较的还是对象的地址值\",{\"1\":{\"569\":1}}],[\"此处反复进行的事情是将数据\",{\"1\":{\"243\":1}}],[\"此时\",{\"1\":{\"572\":1}}],[\"此时equals方法比较的是对象的成员变量值\",{\"1\":{\"567\":1}}],[\"此时可以看到在控制台只输出了\",{\"1\":{\"562\":1}}],[\"此时重写的方法\",{\"1\":{\"526\":1}}],[\"此时的方法重写\",{\"1\":{\"509\":1}}],[\"此时多态的写法就无法访问子类独有功能了\",{\"1\":{\"480\":1}}],[\"此时字符串abc是存在字符串常量池中的\",{\"1\":{\"386\":1}}],[\"此时我们就需要使用到bigdecimal类中另外一个divide方法\",{\"1\":{\"576\":1}}],[\"此时我们就需要在student类中重写object的tostring方法\",{\"1\":{\"567\":1}}],[\"此时我们就可以清楚的查看student的成员变量值\",{\"1\":{\"567\":1}}],[\"此时我们就可以在执行这段代码之前获取一次时间\",{\"1\":{\"562\":1}}],[\"此时我们可以看到使用bigdecimal类来完成浮点数的计算不会存在损失精度的问题\",{\"1\":{\"576\":1}}],[\"此时我们可以看到元素\",{\"1\":{\"562\":1}}],[\"此时我们可以查看一下object类中tostring方法的源码\",{\"1\":{\"567\":1}}],[\"此时我们只需要将最后一个位置设置为0即可\",{\"1\":{\"562\":1}}],[\"此时我用substring方法\",{\"1\":{\"377\":1}}],[\"此时我要统计的有3样东西\",{\"1\":{\"367\":1}}],[\"此时循环结束\",{\"1\":{\"376\":1}}],[\"此时s就是第一次循环结束后拼接完毕的结果\",{\"1\":{\"370\":1}}],[\"此时变量s记录的就是新的字符串\",{\"1\":{\"370\":1}}],[\"此时是拿着长度为0的字符串\",{\"1\":{\"370\":1}}],[\"此时才能断定number是一个质数\",{\"1\":{\"266\":1}}],[\"此时就会弹出如下对话框\",{\"1\":{\"567\":1}}],[\"此时就会完成tostring方法的重写\",{\"1\":{\"567\":1}}],[\"此时就需要自己写无参数构造器了\",{\"1\":{\"343\":1}}],[\"此时就是字符串的连接符\",{\"1\":{\"180\":1}}],[\"此时就出现了两个窗口\",{\"1\":{\"163\":1}}],[\"此时不需要我们额外写代码单独实现\",{\"1\":{\"168\":1}}],[\"此时会弹出如下的对话框\",{\"1\":{\"567\":4}}],[\"此时会发现\",{\"1\":{\"162\":1}}],[\"此时会出现运行窗口\",{\"1\":{\"60\":1}}],[\"此时删除仅仅是从idea列表中的删除\",{\"1\":{\"155\":1}}],[\"此时删除是不走回收站的\",{\"1\":{\"151\":1}}],[\"此时发现\",{\"1\":{\"155\":1,\"162\":1}}],[\"此文字有脚注^first\",{\"1\":{\"23\":1}}],[\"r=new\",{\"1\":{\"572\":1}}],[\"rnd\",{\"1\":{\"572\":2}}],[\"r1\",{\"1\":{\"564\":1}}],[\"roundingmode\",{\"1\":{\"576\":5}}],[\"round\",{\"1\":{\"557\":4}}],[\"rule\",{\"1\":{\"524\":2,\"525\":1}}],[\"run\",{\"1\":{\"423\":2,\"449\":2,\"507\":1,\"508\":1,\"518\":2,\"523\":3,\"524\":2,\"525\":1}}],[\"runtimedemo1\",{\"1\":{\"564\":1}}],[\"runtime表示java中运行时对象\",{\"1\":{\"563\":1}}],[\"runtime\",{\"1\":{\"97\":1,\"564\":9,\"565\":4}}],[\"rightpassword\",{\"1\":{\"361\":2}}],[\"rightusername\",{\"1\":{\"361\":2}}],[\"radix\",{\"1\":{\"572\":2}}],[\"radii\",{\"1\":{\"311\":3}}],[\"radii2\",{\"1\":{\"311\":2}}],[\"radii1\",{\"1\":{\"311\":2}}],[\"randomindex\",{\"1\":{\"296\":3}}],[\"randomdemo1\",{\"1\":{\"263\":1}}],[\"random跟scanner一样\",{\"1\":{\"262\":1}}],[\"random\",{\"0\":{\"262\":1},\"1\":{\"263\":6,\"267\":2,\"294\":2,\"296\":2,\"557\":3,\"572\":4}}],[\"rank\",{\"1\":{\"226\":2}}],[\"requirenonnullelseget\",{\"1\":{\"569\":2}}],[\"requirenonnullelse\",{\"1\":{\"569\":2}}],[\"requirenonnull\",{\"1\":{\"569\":2}}],[\"representable\",{\"1\":{\"576\":1}}],[\"repaint\",{\"1\":{\"565\":1}}],[\"replace\",{\"1\":{\"378\":2}}],[\"reference\",{\"1\":{\"492\":1}}],[\"register\",{\"1\":{\"476\":4}}],[\"regarded\",{\"1\":{\"31\":1}}],[\"removeall\",{\"1\":{\"565\":1}}],[\"remove\",{\"1\":{\"393\":2,\"394\":6}}],[\"reverse\",{\"1\":{\"373\":2,\"381\":1,\"383\":1}}],[\"result=bd9\",{\"1\":{\"572\":1}}],[\"result1\",{\"1\":{\"567\":2}}],[\"result\",{\"1\":{\"174\":1,\"175\":1,\"176\":1,\"177\":1,\"182\":2,\"206\":2,\"309\":2,\"373\":2,\"376\":4,\"377\":2,\"378\":2,\"383\":2,\"402\":2,\"567\":2,\"569\":8,\"572\":3,\"576\":1}}],[\"return关键字\",{\"1\":{\"313\":1}}],[\"return语句后面不能跟数据或代码\",{\"1\":{\"313\":1}}],[\"return返回值\",{\"1\":{\"308\":1}}],[\"return\",{\"1\":{\"103\":1,\"308\":3,\"309\":2,\"310\":1,\"311\":1,\"313\":2,\"314\":2,\"317\":4,\"319\":1,\"320\":2,\"336\":1,\"337\":2,\"338\":2,\"345\":2,\"346\":5,\"370\":1,\"373\":1,\"376\":1,\"384\":1,\"401\":2,\"402\":3,\"408\":2,\"416\":2,\"435\":4,\"439\":1,\"463\":3,\"466\":4,\"489\":4,\"523\":1,\"533\":1,\"558\":2,\"562\":9,\"567\":20,\"569\":1}}],[\"r\",{\"1\":{\"60\":1,\"106\":1,\"263\":4,\"267\":2,\"294\":2,\"296\":2,\"564\":1,\"572\":1}}],[\"如下\",{\"1\":{\"572\":1,\"576\":1}}],[\"如下代码所示\",{\"1\":{\"562\":1,\"576\":1}}],[\"如下所示\",{\"1\":{\"556\":1,\"557\":1,\"561\":1,\"562\":2,\"566\":1,\"567\":3,\"568\":1,\"569\":1,\"576\":1}}],[\"如下图所示\",{\"1\":{\"434\":1}}],[\"如图所示\",{\"1\":{\"428\":1}}],[\"如何使用呢\",{\"1\":{\"420\":1}}],[\"如何通过类创建对象\",{\"0\":{\"405\":1}}],[\"如何定义类\",{\"0\":{\"404\":1}}],[\"如何打开cmd窗口\",{\"0\":{\"60\":1}}],[\"如\",{\"1\":{\"180\":1,\"483\":1,\"484\":1}}],[\"如果使用bigdecimal类型的数据进行除法运算的时候\",{\"1\":{\"576\":1}}],[\"如果使用一个\",{\"1\":{\"200\":2}}],[\"如果多次获取不会重新创建新的\",{\"1\":{\"572\":1}}],[\"如果超出long的范围就不行了\",{\"1\":{\"572\":1}}],[\"如果超出范围也会报错\",{\"1\":{\"562\":2}}],[\"如果biginteger表示的超出long的范围\",{\"1\":{\"572\":1}}],[\"如果biginteger表示的数字没有超出long的范围\",{\"1\":{\"572\":1}}],[\"如果student没有重写object类中的tostring方法\",{\"1\":{\"569\":1}}],[\"如果student没有重写object类中的equals方法\",{\"1\":{\"569\":1}}],[\"如果\",{\"1\":{\"569\":1}}],[\"如果为null返回defaultobj值\",{\"1\":{\"569\":1}}],[\"如果为null直接抛出异常\",{\"1\":{\"569\":1}}],[\"如果两个对象的属性相同\",{\"1\":{\"567\":1}}],[\"如果两边不同\",{\"1\":{\"196\":1}}],[\"如果两边相同\",{\"1\":{\"196\":1}}],[\"如果数字过大\",{\"1\":{\"570\":1}}],[\"如果数字上的每一位全部获取到了\",{\"1\":{\"376\":1}}],[\"如果数据源数组和目的地数组都是引用数据类型\",{\"1\":{\"562\":2}}],[\"如果数据源数组和目的地数组都是基本数据类型\",{\"1\":{\"562\":2}}],[\"如果实现了多个接口\",{\"1\":{\"548\":1}}],[\"如果创建\",{\"1\":{\"511\":1}}],[\"如果想在多个构造方法中使用相同的代码\",{\"1\":{\"502\":1}}],[\"如果想要访问父类有参构造\",{\"1\":{\"471\":1}}],[\"如果想要得到小数\",{\"1\":{\"182\":1}}],[\"如果变量不属于该数据类型或者其子类类型\",{\"1\":{\"487\":1}}],[\"如果变量属于该数据类型或者其子类类型\",{\"1\":{\"487\":1}}],[\"如果子类有些独有的功能\",{\"1\":{\"480\":1}}],[\"如果子类父类中出现重名的成员方法\",{\"1\":{\"446\":1}}],[\"如果子类父类中出现重名的成员变量\",{\"1\":{\"442\":1}}],[\"如果子类父类中出现不重名的成员方法\",{\"1\":{\"445\":1}}],[\"如果子类父类中出现不重名的成员变量\",{\"1\":{\"441\":1}}],[\"如果父类中的方法体\",{\"1\":{\"526\":2}}],[\"如果父类没有完成初始化\",{\"1\":{\"471\":1}}],[\"如果父类成员非private修饰\",{\"1\":{\"462\":1}}],[\"如果此时想访问父类成员变量如何解决呢\",{\"1\":{\"442\":1}}],[\"如果存在\",{\"1\":{\"401\":2,\"402\":1}}],[\"如果比较的是引用数据类型\",{\"1\":{\"386\":1}}],[\"如果比较的是基本数据类型\",{\"1\":{\"386\":1}}],[\"如果字符串中包含\",{\"1\":{\"378\":1}}],[\"如果正确\",{\"1\":{\"361\":1}}],[\"如果利用空参创建对象\",{\"1\":{\"346\":1}}],[\"如果当前事物还有其他行为\",{\"1\":{\"346\":1}}],[\"如果还有其他行为\",{\"1\":{\"344\":1}}],[\"如果还不能返回索引\",{\"1\":{\"320\":1}}],[\"如果自幂数是\",{\"1\":{\"559\":1}}],[\"如果自定义了带参构造方法\",{\"1\":{\"341\":1}}],[\"如果自己不愿意下载\",{\"1\":{\"67\":1}}],[\"如果定义了构造方法\",{\"1\":{\"341\":1}}],[\"如果需要被其他类使用\",{\"1\":{\"336\":1,\"337\":1}}],[\"如果需要使用\",{\"1\":{\"310\":1}}],[\"如果方法操作完毕\",{\"1\":{\"314\":1}}],[\"如果书写\",{\"1\":{\"313\":1}}],[\"如果一个接口里面没有抽象方法\",{\"1\":{\"567\":1}}],[\"如果一个接口中\",{\"1\":{\"526\":1}}],[\"如果一个类实现了接口\",{\"1\":{\"522\":1}}],[\"如果一个类包含抽象方法\",{\"1\":{\"508\":1}}],[\"如果一个整数只能被1和本身整除\",{\"1\":{\"266\":1}}],[\"如果一定要这么干\",{\"1\":{\"178\":1}}],[\"如果小于的\",{\"1\":{\"265\":1}}],[\"如果小数类型中\",{\"1\":{\"118\":1}}],[\"如果符合规则\",{\"1\":{\"264\":1}}],[\"如果在循环内部则计算出的数据将是错误的\",{\"1\":{\"243\":1}}],[\"如果在当前录课没有再到环境变量的路径中去找\",{\"1\":{\"63\":1}}],[\"如果带有求和二字\",{\"1\":{\"243\":1}}],[\"如果用switch\",{\"1\":{\"237\":1}}],[\"如果用户名输入错误了\",{\"1\":{\"200\":1}}],[\"如果用户名输入正确了\",{\"1\":{\"200\":2}}],[\"如果所有的case都和表达式的值不匹配\",{\"1\":{\"235\":1}}],[\"如果值为false就计算关系表达式3的值\",{\"1\":{\"231\":1}}],[\"如果值为false就计算关系表达式2的值\",{\"1\":{\"231\":1}}],[\"如果票号为偶数\",{\"1\":{\"230\":1}}],[\"如果票号为奇数\",{\"1\":{\"230\":1}}],[\"如果别人这么写了\",{\"1\":{\"227\":1}}],[\"如果大于的\",{\"1\":{\"265\":1}}],[\"如果大于等于100块\",{\"1\":{\"229\":1}}],[\"如果大于2斤\",{\"1\":{\"225\":1}}],[\"如果大括号省略了\",{\"1\":{\"227\":1}}],[\"如果大括号中的语句体只有一条\",{\"1\":{\"227\":1}}],[\"如果名次为1\",{\"1\":{\"226\":1}}],[\"如果相等\",{\"1\":{\"224\":2,\"265\":1,\"320\":1}}],[\"如果关系表达式的值为假\",{\"1\":{\"204\":1}}],[\"如果关系表达式的值为真\",{\"1\":{\"204\":1}}],[\"如果没有实现\",{\"1\":{\"567\":1}}],[\"如果没有特殊的考虑\",{\"1\":{\"494\":1}}],[\"如果没有多态\",{\"1\":{\"476\":1}}],[\"如果没有abc\",{\"1\":{\"386\":1}}],[\"如果没有定义构造方法\",{\"1\":{\"341\":1}}],[\"如果没有\",{\"1\":{\"314\":1,\"482\":1,\"485\":1}}],[\"如果没有房子\",{\"1\":{\"200\":1}}],[\"如果没有问题\",{\"1\":{\"171\":1}}],[\"如果有一个方法我不想别人去改写里面内容\",{\"1\":{\"495\":1}}],[\"如果有一个为真\",{\"1\":{\"194\":1}}],[\"如果有重复的\",{\"1\":{\"320\":2}}],[\"如果有\",{\"1\":{\"200\":1,\"314\":1,\"386\":1}}],[\"如果有问题\",{\"1\":{\"171\":1}}],[\"如果成立就是true\",{\"1\":{\"192\":6}}],[\"如果等号右边需要进行计算\",{\"1\":{\"187\":1}}],[\"如果结果不跨0\",{\"1\":{\"209\":1}}],[\"如果结果为2\",{\"1\":{\"166\":1}}],[\"如果结果为1\",{\"1\":{\"166\":2}}],[\"如果结果为0\",{\"1\":{\"166\":2}}],[\"如果结果想要是小数\",{\"1\":{\"166\":1}}],[\"如果点击了这里的叉\",{\"1\":{\"160\":1}}],[\"如果中间出现提示框\",{\"1\":{\"157\":1}}],[\"如果是最后一个元素\",{\"1\":{\"370\":1}}],[\"如果是偶数\",{\"1\":{\"292\":1}}],[\"如果是奇数\",{\"1\":{\"292\":1}}],[\"如果是那么统计变量就需要自增一次\",{\"1\":{\"291\":1}}],[\"如果是true\",{\"1\":{\"241\":1}}],[\"如果是false\",{\"1\":{\"241\":1}}],[\"如果是星期\",{\"1\":{\"237\":1}}],[\"如果是\",{\"1\":{\"228\":1,\"488\":1}}],[\"如果是多个单词\",{\"1\":{\"127\":1,\"128\":1}}],[\"如果是一个单词\",{\"1\":{\"127\":1,\"128\":1}}],[\"如果是单词和符号之间的空格是可以省略的\",{\"1\":{\"77\":1}}],[\"如果不为null\",{\"1\":{\"569\":2}}],[\"如果不是null返回该对象\",{\"1\":{\"569\":1}}],[\"如果不是\",{\"1\":{\"488\":1}}],[\"如果不是最后一个元素\",{\"1\":{\"370\":1}}],[\"如果不用\",{\"1\":{\"402\":1}}],[\"如果不存在\",{\"1\":{\"401\":2,\"402\":1}}],[\"如果不需要使用\",{\"1\":{\"310\":1}}],[\"如果不符合规则就打印真实的数字\",{\"1\":{\"264\":1}}],[\"如果不写\",{\"1\":{\"255\":1}}],[\"如果不成立就是false\",{\"1\":{\"192\":6}}],[\"如果不这么做\",{\"1\":{\"126\":1}}],[\"如果不配置环境变量\",{\"1\":{\"82\":1}}],[\"如果要访问需要创建外部类的对象\",{\"1\":{\"537\":1}}],[\"如果要用\",{\"1\":{\"402\":1}}],[\"如果要替换的敏感词比较多怎么办\",{\"1\":{\"378\":1}}],[\"如果要编写return\",{\"1\":{\"313\":1}}],[\"如果要把一个取值范围大的数据或者变量赋值给另一个取值范围小的变量\",{\"1\":{\"178\":1}}],[\"如果要再次打开该项目\",{\"1\":{\"160\":1}}],[\"如果要定义一个float类型的变量\",{\"1\":{\"120\":1}}],[\"如果要定义一个long类型的变量\",{\"1\":{\"120\":1}}],[\"如果要定义一个小数类型的变量\",{\"1\":{\"120\":1}}],[\"如果要定义一个整数类型的变量\",{\"1\":{\"120\":1}}],[\"如果要定义布尔类型的变量\",{\"1\":{\"118\":1}}],[\"如果要定义字符类型的变量\",{\"1\":{\"118\":1}}],[\"如果要存10\",{\"1\":{\"110\":2}}],[\"如果整数类型中\",{\"1\":{\"118\":1}}],[\"如果注释的内容比较多\",{\"1\":{\"100\":1}}],[\"如果我们的数据是一个浮点类型的数据\",{\"1\":{\"574\":1}}],[\"如果我们使用的是整数类型的数据进行计算\",{\"1\":{\"574\":1}}],[\"如果我们希望定义一个只要使用一次的类\",{\"1\":{\"542\":1}}],[\"如果我们定义了这三个类去开发一个系统\",{\"1\":{\"428\":1}}],[\"如果我们要对一个布尔类型的变量进行判断\",{\"1\":{\"227\":1}}],[\"如果我们要对代码进行解释\",{\"1\":{\"100\":1}}],[\"如果我想要在cmd的任意目录下\",{\"1\":{\"63\":1}}],[\"如果11版本开发的代码\",{\"1\":{\"90\":2}}],[\"如果路径放在最上面查找的速度比较快\",{\"1\":{\"63\":1}}],[\"如果无法出现第二步界面\",{\"1\":{\"63\":1}}],[\"如果都找不到就提示无法启动\",{\"1\":{\"63\":1}}],[\"如果你的电脑是windows32位的\",{\"1\":{\"67\":1}}],[\"如果你不了解它\",{\"1\":{\"14\":1}}],[\"如果你是一个新手\",{\"1\":{\"13\":1}}],[\"打电话\",{\"1\":{\"325\":1,\"326\":2}}],[\"打乱数据\",{\"0\":{\"296\":1}}],[\"打印对象\",{\"1\":{\"567\":1}}],[\"打印对象不是地址值而是属性值\",{\"1\":{\"381\":1}}],[\"打印的是属性值\",{\"1\":{\"381\":1}}],[\"打印结果\",{\"1\":{\"378\":1,\"385\":1}}],[\"打印\",{\"1\":{\"378\":1,\"381\":1,\"385\":1}}],[\"打印最终结果\",{\"1\":{\"376\":1}}],[\"打印数组的时候\",{\"1\":{\"280\":1}}],[\"打印一下纸张的厚度\",{\"1\":{\"249\":1}}],[\"打印语句\",{\"1\":{\"241\":1}}],[\"打印5次helloworld\",{\"0\":{\"248\":1},\"1\":{\"241\":1}}],[\"打印在控制台\",{\"1\":{\"167\":1}}],[\"打印变量的信息\",{\"1\":{\"122\":1}}],[\"打印按钮\",{\"1\":{\"9\":1}}],[\"打开帮助文档\",{\"1\":{\"350\":1}}],[\"打开项目\",{\"0\":{\"161\":1},\"1\":{\"159\":1}}],[\"打开百度\",{\"1\":{\"86\":1}}],[\"打开文件夹\",{\"1\":{\"59\":1}}],[\"打开文件\",{\"1\":{\"59\":1}}],[\"蔬菜\",{\"2\":{\"55\":1}}],[\"番茄\",{\"0\":{\"52\":1}}],[\"草莓\",{\"0\":{\"47\":1},\"2\":{\"50\":1}}],[\"大的整数\",{\"1\":{\"570\":1}}],[\"大于或等于\",{\"1\":{\"557\":2}}],[\"大于或等于23\",{\"1\":{\"557\":2}}],[\"大学生\",{\"1\":{\"546\":1}}],[\"大家一定要注意\",{\"1\":{\"525\":1}}],[\"大家可以想一想为什么呢\",{\"1\":{\"521\":1}}],[\"大写字符有\",{\"1\":{\"367\":1}}],[\"大括号\",{\"1\":{\"275\":1}}],[\"大括号的开头可以另起一行书写\",{\"1\":{\"227\":1}}],[\"大驼峰命名法\",{\"0\":{\"128\":1}}],[\"大小写也要一致\",{\"1\":{\"342\":1}}],[\"大小写都可\",{\"1\":{\"120\":2}}],[\"大小写都可以\",{\"1\":{\"120\":2}}],[\"大小写问题\",{\"1\":{\"76\":1}}],[\"大\",{\"2\":{\"46\":1,\"582\":1,\"587\":1,\"592\":1,\"597\":1}}],[\"火龙果\",{\"0\":{\"42\":1},\"2\":{\"45\":1}}],[\"圆\",{\"2\":{\"41\":1,\"56\":1,\"582\":1,\"587\":1,\"592\":1,\"597\":1}}],[\"小于或等于\",{\"1\":{\"557\":2}}],[\"小于或等于23\",{\"1\":{\"557\":2}}],[\"小学生\",{\"1\":{\"546\":1}}],[\"小麻烦\",{\"1\":{\"482\":1,\"485\":1}}],[\"小写字符有\",{\"1\":{\"367\":1}}],[\"小写字母字符\",{\"1\":{\"366\":1}}],[\"小写\",{\"1\":{\"367\":1}}],[\"小米\",{\"1\":{\"327\":1}}],[\"小括号里面就不能省略了\",{\"1\":{\"256\":1,\"257\":1}}],[\"小括号优先于所有\",{\"1\":{\"206\":1}}],[\"小明的考试成绩\",{\"1\":{\"237\":1}}],[\"小明爸爸对他说\",{\"1\":{\"232\":1}}],[\"小明快要期末考试了\",{\"1\":{\"232\":1}}],[\"小红成为了小明的女朋友\",{\"1\":{\"226\":1}}],[\"小红可以当小明的女朋有了\",{\"1\":{\"226\":1}}],[\"小伙子\",{\"1\":{\"225\":1}}],[\"小的会先提升为大的\",{\"1\":{\"170\":1,\"171\":1}}],[\"小贴士\",{\"1\":{\"151\":1,\"155\":1,\"443\":1,\"494\":1}}],[\"小结\",{\"0\":{\"143\":1,\"424\":1,\"436\":1,\"457\":1,\"464\":1},\"1\":{\"472\":1,\"567\":2,\"576\":1}}],[\"小驼峰命名法\",{\"0\":{\"127\":1}}],[\"小数类型\",{\"1\":{\"287\":1}}],[\"小数1\",{\"1\":{\"269\":1}}],[\"小数部分将被舍去\",{\"1\":{\"265\":2}}],[\"小数直接参与运算\",{\"1\":{\"166\":1}}],[\"小数\",{\"1\":{\"105\":1,\"106\":1,\"111\":1}}],[\"小\",{\"2\":{\"41\":1,\"51\":1}}],[\"红\",{\"2\":{\"41\":1,\"46\":1,\"51\":1,\"56\":1,\"582\":1,\"587\":1,\"592\":1,\"597\":1}}],[\"36\",{\"1\":{\"571\":1}}],[\"3600\",{\"1\":{\"564\":1,\"565\":1}}],[\"3f3afe78\",{\"1\":{\"567\":3}}],[\"3^4\",{\"1\":{\"559\":1}}],[\"3^3\",{\"1\":{\"559\":1}}],[\"34\",{\"1\":{\"557\":1}}],[\"3节中的方式一直接获取内部类的对象\",{\"1\":{\"534\":1}}],[\"3节中的方式二获取内部类的对象\",{\"1\":{\"534\":1}}],[\"3岁的灰颜色的猫眯着眼睛侧着头吃鱼\",{\"1\":{\"489\":1}}],[\"35\",{\"1\":{\"476\":1}}],[\"31\",{\"1\":{\"435\":2}}],[\"3string类的构造方法\",{\"0\":{\"354\":1}}],[\"3索引上的值修改为10\",{\"1\":{\"283\":1}}],[\"3索引上的值\",{\"1\":{\"283\":1}}],[\"33\",{\"1\":{\"274\":1,\"275\":1,\"293\":2,\"318\":2}}],[\"3333333333333335\",{\"1\":{\"166\":1}}],[\"3abc2\",{\"1\":{\"180\":2}}],[\"3abc21\",{\"1\":{\"180\":2}}],[\"3abc\",{\"1\":{\"180\":2}}],[\"325\",{\"1\":{\"565\":1}}],[\"321281202001011234\",{\"1\":{\"379\":1}}],[\"32位\",{\"1\":{\"210\":1}}],[\"324\",{\"1\":{\"116\":1}}],[\"32768~32767\",{\"1\":{\"116\":1}}],[\"300\",{\"1\":{\"213\":1,\"565\":1}}],[\"30\",{\"1\":{\"112\":1,\"119\":1,\"190\":1,\"191\":1,\"306\":1,\"310\":4,\"328\":1,\"336\":1,\"337\":2,\"343\":2,\"345\":2,\"476\":1,\"489\":2,\"535\":2,\"565\":5}}],[\"3win10的bug\",{\"0\":{\"84\":1}}],[\"3\",{\"0\":{\"39\":1,\"44\":1,\"49\":1,\"54\":1,\"61\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"76\":1,\"88\":1,\"94\":1,\"105\":1,\"112\":1,\"113\":1,\"119\":1,\"136\":1,\"137\":1,\"138\":1,\"143\":2,\"150\":1,\"155\":1,\"161\":1,\"231\":1,\"234\":1,\"235\":1,\"237\":2,\"250\":1,\"262\":1,\"302\":1,\"303\":1,\"304\":1,\"305\":1,\"306\":2,\"310\":1,\"318\":1,\"327\":1,\"332\":1,\"333\":1,\"337\":1,\"342\":1,\"344\":1,\"380\":1,\"381\":1,\"382\":1,\"383\":2,\"384\":1,\"394\":1,\"395\":1,\"396\":1,\"397\":1,\"406\":1,\"407\":1,\"408\":1,\"412\":1,\"422\":1,\"424\":1,\"427\":1,\"428\":1,\"429\":1,\"430\":2,\"431\":1,\"432\":2,\"433\":2,\"434\":2,\"435\":3,\"436\":2,\"437\":1,\"438\":1,\"439\":1,\"440\":1,\"441\":1,\"442\":1,\"443\":2,\"444\":1,\"445\":1,\"446\":1,\"447\":1,\"448\":1,\"449\":1,\"450\":1,\"451\":2,\"452\":1,\"453\":1,\"454\":1,\"455\":1,\"456\":1,\"457\":2,\"458\":1,\"459\":1,\"460\":1,\"461\":2,\"462\":1,\"463\":1,\"464\":1,\"465\":1,\"477\":1,\"484\":1,\"492\":1,\"493\":1,\"494\":1,\"499\":1,\"503\":1,\"509\":1,\"510\":1,\"515\":1,\"516\":1,\"517\":1,\"518\":2,\"522\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":2,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"540\":1,\"541\":1,\"542\":1,\"543\":2,\"544\":1,\"545\":1,\"546\":1,\"558\":1,\"563\":1,\"564\":1,\"565\":2,\"572\":1,\"576\":1,\"580\":1,\"585\":1,\"588\":1,\"590\":1,\"595\":1,\"600\":1,\"605\":1,\"608\":1,\"610\":1,\"615\":1},\"1\":{\"62\":1,\"76\":1,\"112\":1,\"113\":1,\"116\":1,\"119\":2,\"121\":1,\"122\":1,\"130\":1,\"166\":7,\"179\":1,\"180\":1,\"187\":1,\"206\":1,\"232\":1,\"236\":1,\"237\":1,\"238\":3,\"241\":1,\"243\":3,\"249\":1,\"260\":1,\"261\":1,\"263\":1,\"264\":2,\"265\":4,\"267\":1,\"269\":2,\"274\":1,\"277\":2,\"280\":3,\"283\":5,\"286\":1,\"287\":2,\"289\":1,\"290\":4,\"291\":5,\"292\":4,\"293\":2,\"294\":2,\"295\":4,\"296\":1,\"310\":1,\"311\":2,\"318\":2,\"320\":3,\"331\":1,\"346\":1,\"361\":2,\"367\":1,\"369\":2,\"370\":4,\"376\":1,\"377\":2,\"378\":2,\"379\":5,\"381\":1,\"382\":1,\"383\":1,\"384\":3,\"385\":2,\"394\":3,\"397\":1,\"400\":1,\"401\":2,\"402\":2,\"404\":1,\"424\":1,\"435\":1,\"466\":2,\"482\":1,\"489\":3,\"509\":1,\"542\":1,\"557\":1,\"559\":3,\"562\":9,\"564\":1,\"565\":1,\"567\":2,\"572\":3,\"576\":7}}],[\"这样使用一个不太准确的数据进行运算的时候\",{\"1\":{\"574\":1}}],[\"这样的结果其实就是一个丢失精度的结果\",{\"1\":{\"574\":1}}],[\"这样就实现了相同属性和行为的重复利用\",{\"1\":{\"436\":1}}],[\"这样就导致了相同代码大量重复\",{\"1\":{\"428\":1}}],[\"这一部分称之为对象的内存地址值\",{\"1\":{\"567\":1}}],[\"这一个运动员的规范\",{\"1\":{\"524\":1}}],[\"这次就饶了你~\",{\"1\":{\"565\":1}}],[\"这种方式称之为接口多态\",{\"1\":{\"552\":1}}],[\"这种关系是\",{\"1\":{\"429\":1}}],[\"这正是一种强制性的规范\",{\"1\":{\"522\":1}}],[\"这也是大家需要注意的地方\",{\"1\":{\"499\":1}}],[\"这也是多态给我们带来的一点\",{\"1\":{\"482\":1,\"485\":1}}],[\"这段代码比较简单\",{\"1\":{\"574\":1}}],[\"这段代码就是把student类中的成员变量进行了字符串的拼接\",{\"1\":{\"567\":1}}],[\"这段代码没有被执行\",{\"1\":{\"562\":1}}],[\"这段代码可以通过编译\",{\"1\":{\"486\":1}}],[\"这段被重复执行的代码被称为循环体语句\",{\"1\":{\"240\":1}}],[\"这时的调用是没有影响的\",{\"1\":{\"445\":1}}],[\"这时的访问是有影响的\",{\"1\":{\"442\":1}}],[\"这时的访问是没有影响的\",{\"1\":{\"441\":1}}],[\"这句话是错误的\",{\"1\":{\"343\":1}}],[\"这边第一位是符号位\",{\"1\":{\"213\":1}}],[\"这里面的东西与类是完全一样的\",{\"1\":{\"533\":1,\"537\":1}}],[\"这里是使用public\",{\"1\":{\"517\":1}}],[\"这里是内容\",{\"1\":{\"38\":1,\"39\":1,\"43\":1,\"44\":1,\"48\":1,\"49\":1,\"53\":1,\"54\":1,\"579\":1,\"580\":1,\"584\":1,\"585\":1,\"589\":1,\"590\":1,\"594\":1,\"595\":1,\"599\":1,\"600\":1,\"604\":1,\"605\":1,\"609\":1,\"610\":1,\"614\":1,\"615\":1}}],[\"这里写void\",{\"1\":{\"314\":1}}],[\"这里会引发编译错误\",{\"1\":{\"313\":1}}],[\"这里就是将前面的24位去掉\",{\"1\":{\"213\":1}}],[\"这些类将底层的实现封装了起来\",{\"1\":{\"349\":1}}],[\"这些操作跟小学数学几乎是一模一样的\",{\"1\":{\"182\":1}}],[\"这些结构的划分\",{\"1\":{\"143\":1}}],[\"这是合理的\",{\"1\":{\"524\":1}}],[\"这是因为\",{\"1\":{\"486\":1}}],[\"这是两个类的两个fn方法\",{\"1\":{\"316\":1}}],[\"这是多行注释文字\",{\"1\":{\"99\":6}}],[\"这是单行注释文字\",{\"1\":{\"99\":1}}],[\"这是java的第一个大版本更新\",{\"1\":{\"90\":1}}],[\"这个差值就是这段代码执行完毕以后所需要的时间\",{\"1\":{\"562\":1}}],[\"这个类实现了父类\",{\"1\":{\"545\":1}}],[\"这个类也必须定义成抽象类\",{\"1\":{\"522\":1}}],[\"这个整体其实是匿名内部类对象\",{\"1\":{\"541\":1}}],[\"这个整体就是表达式\",{\"1\":{\"166\":1}}],[\"这个过程是强制的\",{\"1\":{\"484\":1}}],[\"这个过程是默认的\",{\"1\":{\"483\":1}}],[\"这个过程中\",{\"1\":{\"180\":1}}],[\"这个方法既能接收老师\",{\"1\":{\"476\":1}}],[\"这个注解标记的方法\",{\"1\":{\"450\":1}}],[\"这个成员方法也叫做实例方法\",{\"1\":{\"423\":1}}],[\"这个成员方法称为类方法或者静态方法\",{\"1\":{\"422\":1}}],[\"这个成员变量叫实例变量\",{\"1\":{\"421\":1}}],[\"这个成员变量称为类变量或者静态成员变量\",{\"1\":{\"420\":1}}],[\"这个时候我们可以把这个属性定义成static修饰的静态成员变量\",{\"1\":{\"420\":1}}],[\"这个时候就不能叫dos命令了\",{\"1\":{\"61\":1}}],[\"这个最终结果是怎么来的\",{\"1\":{\"370\":1}}],[\"这个可以根据自己的喜好来选择\",{\"1\":{\"135\":1}}],[\"这个是我们课程中学习的版本\",{\"1\":{\"90\":1}}],[\"这个是目前绝大数公司正在使用的版本\",{\"1\":{\"90\":1}}],[\"这行文字\",{\"1\":{\"70\":1}}],[\"这意味着你可以在\",{\"1\":{\"34\":1}}],[\"樱桃\",{\"0\":{\"37\":1},\"2\":{\"40\":1}}],[\"+project+\",{\"1\":{\"523\":1}}],[\"+num2\",{\"1\":{\"441\":1}}],[\"+num\",{\"1\":{\"441\":1}}],[\"+=\",{\"1\":{\"188\":1,\"190\":1,\"191\":2,\"243\":1,\"244\":1}}],[\"++a\",{\"1\":{\"184\":1,\"186\":1}}],[\"++\",{\"1\":{\"183\":2,\"186\":1}}],[\"+\",{\"1\":{\"34\":1,\"60\":1,\"72\":3,\"113\":5,\"165\":1,\"166\":3,\"174\":1,\"175\":2,\"176\":1,\"177\":6,\"180\":14,\"182\":2,\"186\":2,\"187\":2,\"190\":1,\"191\":3,\"243\":13,\"244\":2,\"260\":2,\"261\":2,\"265\":6,\"266\":4,\"267\":2,\"283\":1,\"290\":1,\"291\":2,\"294\":7,\"295\":1,\"296\":1,\"310\":5,\"318\":2,\"319\":1,\"328\":4,\"336\":2,\"337\":6,\"338\":2,\"340\":2,\"343\":2,\"345\":2,\"346\":18,\"354\":4,\"361\":6,\"364\":2,\"367\":6,\"370\":10,\"373\":1,\"376\":6,\"377\":2,\"379\":6,\"394\":1,\"397\":1,\"400\":2,\"442\":2,\"443\":3,\"466\":10,\"476\":11,\"489\":42,\"492\":4,\"557\":12,\"559\":7,\"562\":10,\"567\":23,\"574\":1}}],[\"日\",{\"1\":{\"32\":1,\"379\":2}}],[\"月薪过万\",{\"1\":{\"328\":1}}],[\"月份\",{\"1\":{\"237\":1}}],[\"月\",{\"1\":{\"32\":1,\"379\":2}}],[\"年龄为\",{\"1\":{\"489\":4}}],[\"年龄为25岁的老李养了一只灰颜色的3岁的猫\",{\"1\":{\"489\":1}}],[\"年龄为30岁的老王养了一只黑颜色的2岁的狗\",{\"1\":{\"489\":1}}],[\"年龄非法\",{\"1\":{\"408\":1,\"416\":1}}],[\"年龄\",{\"1\":{\"328\":1,\"346\":1,\"428\":4,\"433\":3,\"456\":2,\"466\":4,\"489\":3,\"567\":1,\"569\":1}}],[\"年龄未知\",{\"1\":{\"286\":1}}],[\"年份\",{\"1\":{\"122\":1}}],[\"年\",{\"1\":{\"32\":1,\"379\":1}}],[\"posts\",{\"0\":{\"625\":1}}],[\"pow\",{\"1\":{\"557\":3,\"559\":3,\"572\":3}}],[\"pingpongman\",{\"1\":{\"523\":3}}],[\"p2\",{\"1\":{\"489\":2}}],[\"p1\",{\"1\":{\"489\":2}}],[\"person\",{\"1\":{\"456\":3,\"459\":3,\"461\":4,\"476\":5,\"479\":1,\"489\":9,\"562\":7}}],[\"p\",{\"1\":{\"327\":12,\"346\":1,\"476\":2,\"479\":2,\"489\":3}}],[\"phonenumber\",{\"1\":{\"377\":3}}],[\"phonedemo\",{\"1\":{\"327\":1}}],[\"phone\",{\"1\":{\"326\":2,\"327\":4}}],[\"path\",{\"1\":{\"567\":11}}],[\"pattern\",{\"1\":{\"554\":1}}],[\"param\",{\"1\":{\"562\":2,\"567\":5}}],[\"password\",{\"1\":{\"346\":8,\"361\":2,\"401\":2,\"402\":1,\"567\":11}}],[\"paper\",{\"1\":{\"249\":4}}],[\"package中可以创建多个class\",{\"1\":{\"143\":1}}],[\"package这一层级\",{\"1\":{\"138\":1}}],[\"package\",{\"0\":{\"141\":1},\"1\":{\"103\":1,\"137\":1,\"143\":1,\"236\":1,\"310\":1,\"320\":1,\"376\":1,\"379\":1,\"384\":1,\"463\":1,\"466\":1,\"523\":1,\"567\":2,\"572\":2}}],[\"page\",{\"1\":{\"31\":1}}],[\"process\",{\"1\":{\"564\":2}}],[\"project即可\",{\"1\":{\"160\":1}}],[\"project中可以创建多个module\",{\"1\":{\"143\":1}}],[\"project\",{\"0\":{\"139\":1},\"1\":{\"137\":1,\"143\":1,\"146\":2,\"160\":1,\"523\":2}}],[\"protected\",{\"1\":{\"103\":1,\"453\":1,\"493\":2,\"494\":1,\"534\":1,\"567\":3}}],[\"programming\",{\"1\":{\"349\":1}}],[\"program\",{\"1\":{\"68\":1}}],[\"printstacktrace\",{\"1\":{\"565\":4}}],[\"printarr\",{\"1\":{\"318\":2,\"370\":1}}],[\"print\",{\"1\":{\"294\":1,\"295\":1,\"296\":1,\"318\":7,\"370\":3,\"397\":4,\"562\":3}}],[\"println\",{\"1\":{\"72\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"105\":5,\"111\":2,\"112\":4,\"113\":2,\"119\":8,\"121\":5,\"122\":6,\"123\":2,\"130\":2,\"166\":5,\"167\":4,\"172\":1,\"179\":1,\"180\":1,\"182\":1,\"186\":2,\"187\":3,\"190\":2,\"191\":1,\"194\":9,\"196\":4,\"197\":3,\"206\":6,\"212\":1,\"213\":2,\"215\":2,\"216\":1,\"217\":1,\"224\":4,\"225\":2,\"226\":2,\"228\":4,\"229\":3,\"230\":4,\"232\":6,\"236\":9,\"237\":4,\"238\":7,\"241\":1,\"242\":3,\"243\":1,\"244\":1,\"248\":2,\"249\":1,\"255\":1,\"256\":1,\"257\":1,\"260\":1,\"261\":1,\"263\":1,\"264\":2,\"265\":3,\"266\":5,\"267\":5,\"280\":2,\"283\":3,\"289\":2,\"290\":1,\"291\":2,\"292\":1,\"293\":1,\"294\":3,\"302\":2,\"306\":2,\"309\":2,\"310\":1,\"311\":4,\"313\":1,\"317\":8,\"318\":5,\"319\":1,\"320\":1,\"326\":2,\"327\":4,\"328\":4,\"336\":2,\"337\":3,\"338\":3,\"340\":2,\"343\":1,\"345\":1,\"346\":4,\"354\":4,\"358\":7,\"361\":5,\"364\":3,\"367\":4,\"370\":2,\"373\":2,\"376\":4,\"377\":2,\"378\":4,\"379\":4,\"381\":2,\"382\":2,\"383\":3,\"384\":1,\"385\":4,\"394\":12,\"400\":1,\"401\":1,\"402\":1,\"408\":1,\"412\":5,\"416\":1,\"420\":2,\"422\":1,\"423\":2,\"426\":1,\"435\":10,\"439\":5,\"441\":2,\"442\":2,\"443\":3,\"445\":2,\"446\":2,\"449\":3,\"450\":1,\"456\":4,\"459\":6,\"461\":6,\"463\":3,\"466\":2,\"476\":4,\"478\":1,\"480\":4,\"485\":4,\"488\":1,\"489\":10,\"498\":4,\"499\":2,\"509\":2,\"523\":3,\"524\":2,\"533\":2,\"535\":3,\"537\":2,\"542\":1,\"544\":2,\"546\":3,\"557\":12,\"558\":2,\"559\":2,\"562\":9,\"564\":5,\"565\":2,\"567\":8,\"569\":7,\"572\":14,\"574\":1,\"576\":8}}],[\"price\",{\"1\":{\"123\":2,\"326\":2,\"327\":3}}],[\"private则是最小权限\",{\"1\":{\"494\":1}}],[\"private修饰成员变量\",{\"1\":{\"408\":1}}],[\"private的使用\",{\"0\":{\"337\":1}}],[\"private是一个修饰符\",{\"1\":{\"336\":1}}],[\"private关键字是一个权限修饰符\",{\"1\":{\"337\":1}}],[\"private关键字\",{\"0\":{\"336\":1}}],[\"private\",{\"1\":{\"103\":1,\"336\":1,\"337\":2,\"338\":2,\"340\":2,\"343\":2,\"345\":2,\"346\":5,\"407\":1,\"408\":4,\"416\":2,\"417\":2,\"423\":1,\"435\":4,\"439\":2,\"456\":3,\"459\":3,\"461\":3,\"463\":3,\"466\":4,\"476\":2,\"489\":4,\"493\":3,\"494\":1,\"509\":3,\"533\":1,\"534\":1,\"535\":2,\"537\":2,\"551\":4,\"562\":2,\"565\":2,\"567\":7,\"569\":2}}],[\"public可以省略\",{\"1\":{\"548\":1,\"549\":1}}],[\"public具有最大权限\",{\"1\":{\"494\":1}}],[\"public修饰getter和setter方法\",{\"1\":{\"408\":1}}],[\"public和class之间缺少一个空格\",{\"1\":{\"77\":1}}],[\"publicclass\",{\"1\":{\"77\":1}}],[\"public\",{\"1\":{\"33\":1,\"72\":2,\"77\":1,\"78\":2,\"79\":2,\"80\":2,\"103\":1,\"104\":1,\"105\":2,\"111\":2,\"112\":2,\"113\":2,\"119\":2,\"121\":2,\"122\":2,\"123\":2,\"130\":2,\"179\":2,\"187\":2,\"190\":2,\"191\":2,\"206\":2,\"212\":2,\"213\":4,\"215\":4,\"216\":2,\"217\":2,\"224\":2,\"228\":2,\"236\":2,\"242\":2,\"243\":2,\"244\":2,\"263\":2,\"283\":2,\"289\":2,\"301\":2,\"302\":3,\"304\":4,\"306\":3,\"308\":4,\"309\":3,\"310\":3,\"311\":3,\"313\":7,\"314\":2,\"316\":13,\"317\":6,\"318\":3,\"319\":3,\"320\":3,\"326\":4,\"327\":2,\"328\":5,\"336\":5,\"337\":7,\"338\":6,\"340\":5,\"343\":10,\"345\":9,\"346\":16,\"354\":9,\"358\":4,\"361\":2,\"364\":2,\"367\":2,\"370\":4,\"373\":3,\"376\":3,\"377\":2,\"378\":4,\"379\":2,\"381\":2,\"382\":2,\"383\":2,\"384\":3,\"392\":1,\"393\":6,\"394\":7,\"397\":2,\"400\":2,\"401\":3,\"402\":3,\"404\":4,\"408\":6,\"412\":6,\"416\":5,\"417\":3,\"418\":6,\"420\":3,\"422\":4,\"423\":5,\"426\":3,\"435\":16,\"439\":6,\"441\":2,\"442\":2,\"443\":2,\"445\":4,\"446\":4,\"449\":7,\"450\":2,\"453\":1,\"456\":5,\"459\":5,\"461\":6,\"463\":10,\"466\":19,\"472\":1,\"476\":11,\"480\":5,\"485\":6,\"486\":2,\"487\":2,\"489\":30,\"493\":2,\"494\":2,\"497\":3,\"498\":4,\"499\":2,\"500\":4,\"507\":1,\"508\":2,\"509\":11,\"512\":2,\"517\":1,\"518\":5,\"523\":7,\"524\":5,\"525\":3,\"527\":2,\"533\":8,\"534\":1,\"535\":3,\"537\":5,\"542\":4,\"543\":1,\"544\":5,\"546\":7,\"548\":2,\"549\":2,\"557\":18,\"558\":3,\"562\":30,\"564\":16,\"565\":6,\"567\":29,\"569\":19,\"572\":30,\"574\":2,\"576\":13}}],[\"plugin\",{\"1\":{\"17\":1}}],[\"half\",{\"1\":{\"576\":2}}],[\"hashcode方法我们暂时使用不到\",{\"1\":{\"567\":1}}],[\"hashcode\",{\"1\":{\"567\":4}}],[\"hangzhou\",{\"1\":{\"129\":1}}],[\"human\",{\"1\":{\"435\":4}}],[\"hundreds\",{\"1\":{\"167\":2}}],[\"heima003\",{\"1\":{\"401\":1,\"402\":1}}],[\"heima002\",{\"1\":{\"401\":1,\"402\":1}}],[\"heima001\",{\"1\":{\"401\":2,\"402\":2}}],[\"heightsarr\",{\"1\":{\"280\":2}}],[\"height3\",{\"1\":{\"206\":3}}],[\"height2\",{\"1\":{\"206\":3}}],[\"height1\",{\"1\":{\"206\":3}}],[\"height\",{\"1\":{\"121\":2,\"249\":2}}],[\"hello\",{\"1\":{\"394\":1,\"426\":1}}],[\"helloworld后面的大括号表示这个类的范围\",{\"1\":{\"104\":1}}],[\"helloworld常见问题\",{\"0\":{\"76\":1}}],[\"helloworld案例常见问题\",{\"0\":{\"73\":1}}],[\"helloworld案例的编写\",{\"0\":{\"72\":1}}],[\"helloworld案例是指在计算机屏幕上输出\",{\"1\":{\"70\":1}}],[\"helloworld\",{\"1\":{\"70\":1,\"72\":2,\"77\":2,\"78\":2,\"79\":2,\"80\":2,\"104\":2,\"105\":1,\"128\":1,\"241\":1,\"248\":1,\"426\":1}}],[\"helloworld小案例\",{\"0\":{\"70\":1}}],[\"h\",{\"1\":{\"119\":2}}],[\"homework\",{\"1\":{\"492\":4}}],[\"home给以后的相关软件去使用\",{\"1\":{\"84\":1}}],[\"home\",{\"1\":{\"83\":1}}],[\"hope\",{\"1\":{\"32\":1}}],[\"https\",{\"1\":{\"134\":1}}],[\"http\",{\"1\":{\"67\":1}}],[\"h1\",{\"1\":{\"31\":2}}],[\"h2o\",{\"1\":{\"20\":1}}],[\"found\",{\"1\":{\"624\":1}}],[\"font\",{\"1\":{\"565\":1}}],[\"forr\",{\"1\":{\"373\":1,\"397\":1}}],[\"fori\",{\"1\":{\"373\":1,\"397\":1}}],[\"for格式\",{\"0\":{\"255\":1}}],[\"for和while循环\",{\"1\":{\"251\":1}}],[\"fortest03\",{\"1\":{\"244\":1}}],[\"fortest02\",{\"1\":{\"243\":1}}],[\"fortest01\",{\"1\":{\"242\":1}}],[\"for循环练习\",{\"0\":{\"242\":1,\"243\":1,\"244\":1,\"245\":1}}],[\"for循环书写技巧\",{\"1\":{\"241\":1}}],[\"for循环格式\",{\"0\":{\"241\":1}}],[\"for循环结构\",{\"0\":{\"240\":1}}],[\"for\",{\"1\":{\"103\":1,\"135\":1,\"221\":1,\"241\":2,\"242\":2,\"243\":1,\"244\":1,\"255\":1,\"260\":1,\"261\":1,\"264\":1,\"265\":1,\"266\":1,\"284\":1,\"290\":1,\"291\":1,\"292\":2,\"293\":1,\"294\":4,\"295\":2,\"296\":2,\"318\":1,\"319\":1,\"320\":1,\"361\":1,\"364\":1,\"367\":1,\"370\":2,\"373\":1,\"376\":2,\"378\":1,\"384\":1,\"397\":1,\"400\":1,\"401\":1,\"402\":1,\"499\":2,\"558\":1,\"559\":1,\"562\":7,\"567\":2,\"572\":1}}],[\"fu2\",{\"1\":{\"498\":4}}],[\"fu类中的show方法执行\",{\"1\":{\"445\":1}}],[\"fu1\",{\"1\":{\"442\":2}}],[\"fu中的成员变量\",{\"1\":{\"441\":1,\"442\":1,\"443\":1}}],[\"fu\",{\"1\":{\"439\":2,\"441\":4,\"442\":2,\"443\":5,\"445\":2,\"446\":3,\"478\":1,\"497\":2}}],[\"fw\",{\"1\":{\"378\":1}}],[\"fn\",{\"1\":{\"316\":8}}],[\"framework\",{\"0\":{\"634\":1}}],[\"fromjson\",{\"1\":{\"567\":1}}],[\"frontmatter\",{\"1\":{\"6\":1,\"9\":1,\"14\":3,\"31\":1,\"32\":1}}],[\"freememory\",{\"1\":{\"564\":3}}],[\"free\",{\"1\":{\"135\":1}}],[\"floor\",{\"1\":{\"557\":4,\"576\":2}}],[\"float类型的变量\",{\"1\":{\"120\":1}}],[\"float\",{\"1\":{\"103\":1,\"116\":1,\"118\":1,\"119\":1,\"120\":2,\"171\":2,\"172\":1,\"174\":1,\"175\":1,\"316\":1,\"557\":2}}],[\"flag\",{\"1\":{\"121\":2,\"266\":3,\"308\":1,\"562\":2,\"565\":5}}],[\"f\",{\"1\":{\"119\":2,\"478\":3}}],[\"false表示不相同\",{\"1\":{\"567\":1}}],[\"false取反就是true\",{\"1\":{\"197\":1}}],[\"false\",{\"1\":{\"105\":2,\"106\":1,\"116\":1,\"194\":12,\"196\":6,\"197\":3,\"266\":2,\"287\":1,\"402\":1,\"558\":1,\"562\":2,\"565\":1,\"567\":3,\"572\":1}}],[\"finaldemo1\",{\"1\":{\"499\":1}}],[\"final修饰后\",{\"1\":{\"517\":1}}],[\"final修饰的方法\",{\"1\":{\"498\":1}}],[\"final修饰的类\",{\"1\":{\"497\":1}}],[\"final修饰\",{\"1\":{\"467\":1,\"517\":1}}],[\"finally\",{\"1\":{\"103\":1}}],[\"final\",{\"1\":{\"103\":1,\"495\":1,\"497\":5,\"498\":2,\"499\":5,\"500\":3,\"518\":1,\"527\":1}}],[\"files下\",{\"1\":{\"68\":1}}],[\"firstname\",{\"1\":{\"127\":1}}],[\"first\",{\"1\":{\"31\":1}}],[\"t>\",{\"1\":{\"569\":1}}],[\"toolbox\",{\"0\":{\"632\":1}}],[\"tojson\",{\"1\":{\"567\":1}}],[\"tohexstring\",{\"1\":{\"567\":2}}],[\"totalmemory\",{\"1\":{\"564\":3}}],[\"tostring方法的作用\",{\"1\":{\"567\":1}}],[\"tostring\",{\"1\":{\"382\":1,\"383\":1,\"384\":1,\"385\":1,\"562\":1,\"567\":7,\"569\":2}}],[\"toc\",{\"1\":{\"9\":1}}],[\"talk\",{\"1\":{\"378\":7}}],[\"tmd\",{\"1\":{\"378\":5}}],[\"tips\",{\"1\":{\"556\":1,\"557\":1,\"561\":1,\"562\":1,\"566\":1,\"567\":1,\"568\":1,\"569\":1}}],[\"ticket\",{\"1\":{\"230\":4}}],[\"title\",{\"1\":{\"31\":3}}],[\"terminating\",{\"1\":{\"576\":1}}],[\"text\",{\"1\":{\"565\":4}}],[\"teach\",{\"1\":{\"435\":2}}],[\"teacher\",{\"1\":{\"435\":4,\"476\":3}}],[\"temp\",{\"1\":{\"206\":3,\"295\":2,\"296\":2}}],[\"tens\",{\"1\":{\"167\":2}}],[\"testmain\",{\"1\":{\"523\":1}}],[\"test9敏感词替换\",{\"1\":{\"378\":1}}],[\"test8手机号屏蔽\",{\"1\":{\"377\":1}}],[\"test6反转字符串\",{\"1\":{\"373\":1}}],[\"test5数组拼接成字符串\",{\"1\":{\"370\":1}}],[\"test2字符串直接遍历\",{\"1\":{\"364\":1}}],[\"test4统计个数\",{\"1\":{\"367\":1}}],[\"test4\",{\"1\":{\"320\":1,\"466\":1}}],[\"test10多个敏感词替换\",{\"1\":{\"378\":1}}],[\"test1登录案例\",{\"1\":{\"361\":1}}],[\"test1\",{\"1\":{\"318\":1}}],[\"test\",{\"1\":{\"128\":1,\"212\":1,\"213\":2,\"215\":2,\"216\":1,\"217\":1,\"346\":1,\"435\":1,\"449\":1,\"476\":1,\"480\":1,\"485\":1,\"486\":1,\"487\":1,\"489\":1,\"525\":2,\"533\":2,\"535\":1,\"542\":1,\"565\":1}}],[\"t\",{\"1\":{\"106\":2,\"361\":1,\"476\":4,\"564\":2,\"565\":3,\"569\":7}}],[\"true表示相同\",{\"1\":{\"567\":1}}],[\"true一定要写出来\",{\"1\":{\"256\":1,\"257\":1}}],[\"true取反就是false\",{\"1\":{\"197\":1}}],[\"true\",{\"1\":{\"105\":3,\"106\":1,\"116\":1,\"119\":1,\"121\":1,\"194\":12,\"196\":6,\"197\":2,\"256\":1,\"257\":1,\"266\":2,\"267\":1,\"308\":1,\"376\":2,\"381\":1,\"402\":1,\"558\":1,\"562\":2,\"565\":8,\"567\":2,\"572\":1}}],[\"try\",{\"1\":{\"103\":1,\"565\":4}}],[\"transient\",{\"1\":{\"103\":1}}],[\"thread\",{\"1\":{\"576\":1}}],[\"throws\",{\"1\":{\"103\":1,\"564\":1,\"567\":2}}],[\"throw\",{\"1\":{\"103\":1}}],[\"this记录外部类对象的地址值\",{\"1\":{\"534\":1}}],[\"this调用\",{\"1\":{\"467\":1}}],[\"thisdemo01\",{\"1\":{\"463\":1}}],[\"this代表的是当前对象的引用\",{\"1\":{\"443\":1}}],[\"this代表所在类的当前对象的引用\",{\"1\":{\"414\":1}}],[\"this出现在构造方法中\",{\"1\":{\"417\":1}}],[\"this出现在实例方法中\",{\"1\":{\"416\":1}}],[\"this就代表哪个对象\",{\"1\":{\"416\":1}}],[\"this就代表谁\",{\"1\":{\"416\":1}}],[\"this的本质和内存图\",{\"1\":{\"338\":1}}],[\"this的作用\",{\"1\":{\"338\":1}}],[\"this修饰的变量用于指代成员变量\",{\"1\":{\"338\":1}}],[\"this关键字的应用\",{\"0\":{\"415\":1}}],[\"this关键字的作用\",{\"0\":{\"413\":1,\"414\":1}}],[\"this关键字\",{\"0\":{\"338\":1}}],[\"this\",{\"0\":{\"463\":1},\"1\":{\"103\":1,\"338\":3,\"343\":4,\"345\":4,\"346\":10,\"416\":2,\"417\":2,\"435\":4,\"439\":1,\"443\":2,\"456\":1,\"459\":1,\"460\":3,\"461\":4,\"463\":9,\"464\":2,\"466\":8,\"489\":8,\"500\":4,\"509\":3,\"535\":3,\"537\":3,\"562\":4,\"565\":18,\"567\":13}}],[\"the\",{\"1\":{\"31\":1}}],[\"txt文件\",{\"1\":{\"76\":1}}],[\"组件\",{\"0\":{\"27\":1,\"34\":1},\"1\":{\"34\":1}}],[\"支持为图片设置颜色模式和大小\",{\"1\":{\"26\":1}}],[\"2~996\",{\"1\":{\"558\":1}}],[\"2岁的黑颜色的狗两只前腿死死的抱住骨头猛吃\",{\"1\":{\"489\":1}}],[\"28\",{\"1\":{\"435\":1}}],[\"2位\",{\"1\":{\"379\":1}}],[\"2直接遍历字符串\",{\"0\":{\"364\":1}}],[\"2代码实现\",{\"0\":{\"361\":1,\"367\":1,\"370\":1,\"373\":1}}],[\"2string类的特点\",{\"0\":{\"353\":1}}],[\"2如何使用api帮助文档\",{\"0\":{\"350\":1}}],[\"24\",{\"1\":{\"346\":1,\"557\":3,\"562\":1}}],[\"23和45的最大值为\",{\"1\":{\"557\":2}}],[\"23\",{\"1\":{\"346\":1,\"557\":18,\"562\":7}}],[\"2999\",{\"1\":{\"327\":1}}],[\"22\",{\"1\":{\"274\":1,\"275\":1,\"278\":2,\"293\":2,\"318\":2}}],[\"250\",{\"1\":{\"565\":1}}],[\"251\",{\"1\":{\"564\":1}}],[\"254\",{\"1\":{\"564\":1}}],[\"25\",{\"1\":{\"265\":1,\"489\":1,\"562\":1}}],[\"27\",{\"1\":{\"249\":1}}],[\"2的num次方\",{\"1\":{\"572\":2}}],[\"2的3次幂计算结果为\",{\"1\":{\"557\":2}}],[\"2的31次方\",{\"1\":{\"116\":1}}],[\"2的绝对值为\",{\"1\":{\"557\":4}}],[\"2的63次方\",{\"1\":{\"116\":1}}],[\"2的15次方\",{\"1\":{\"116\":1}}],[\"2的7次方\",{\"1\":{\"116\":1}}],[\"20的平方根是在4~5之间\",{\"1\":{\"265\":1}}],[\"200\",{\"1\":{\"213\":1,\"215\":4,\"216\":2,\"217\":2,\"416\":1,\"565\":4,\"572\":2}}],[\"20l\",{\"1\":{\"174\":1,\"317\":1}}],[\"20\",{\"1\":{\"112\":4,\"119\":2,\"175\":1,\"176\":1,\"177\":1,\"187\":2,\"190\":2,\"191\":2,\"206\":1,\"224\":1,\"228\":1,\"264\":1,\"265\":6,\"278\":2,\"302\":1,\"304\":1,\"306\":3,\"309\":2,\"310\":4,\"317\":3,\"412\":1,\"439\":1,\"461\":3,\"499\":2,\"500\":4,\"535\":2,\"565\":1}}],[\"2022\",{\"1\":{\"571\":1}}],[\"20231224231307531\",{\"1\":{\"328\":1}}],[\"20231224225553701\",{\"1\":{\"322\":1}}],[\"202\",{\"1\":{\"215\":1}}],[\"20210923091544110\",{\"1\":{\"97\":1}}],[\"20210923091721035\",{\"1\":{\"83\":1}}],[\"20210923091710450\",{\"1\":{\"83\":1}}],[\"20210923091654365\",{\"1\":{\"83\":1}}],[\"20210923091350952\",{\"1\":{\"63\":4,\"96\":1}}],[\"2020\",{\"1\":{\"32\":1,\"122\":1}}],[\"2147483647l\",{\"1\":{\"572\":1}}],[\"2147483647\",{\"1\":{\"570\":1}}],[\"2147483648\",{\"1\":{\"570\":1}}],[\"2135\",{\"1\":{\"376\":1}}],[\"210\",{\"1\":{\"206\":1}}],[\"210cm\",{\"1\":{\"206\":1}}],[\"21亿多\",{\"1\":{\"118\":2,\"573\":1}}],[\"21\",{\"1\":{\"105\":1,\"278\":2,\"463\":2,\"571\":1}}],[\"2配置方式\",{\"0\":{\"83\":1}}],[\"2下载和安装\",{\"0\":{\"66\":1}}],[\"2\",{\"0\":{\"38\":1,\"43\":1,\"48\":1,\"53\":1,\"60\":1,\"64\":1,\"67\":1,\"68\":2,\"69\":1,\"71\":1,\"72\":2,\"75\":1,\"87\":1,\"93\":1,\"102\":1,\"103\":1,\"104\":2,\"109\":1,\"110\":1,\"111\":2,\"112\":1,\"116\":1,\"126\":1,\"127\":1,\"128\":2,\"133\":1,\"134\":1,\"135\":2,\"138\":1,\"146\":1,\"149\":1,\"154\":1,\"160\":1,\"222\":1,\"224\":1,\"228\":2,\"231\":1,\"235\":1,\"246\":1,\"247\":1,\"259\":1,\"300\":1,\"301\":1,\"302\":1,\"305\":1,\"309\":1,\"314\":1,\"317\":1,\"326\":1,\"329\":1,\"330\":1,\"331\":2,\"336\":1,\"341\":1,\"351\":1,\"352\":1,\"353\":1,\"354\":1,\"355\":1,\"356\":1,\"357\":1,\"358\":2,\"359\":1,\"360\":1,\"361\":1,\"362\":1,\"363\":1,\"364\":1,\"365\":1,\"366\":1,\"367\":1,\"368\":1,\"369\":1,\"370\":1,\"371\":1,\"372\":1,\"373\":1,\"374\":1,\"375\":1,\"376\":2,\"377\":1,\"378\":1,\"379\":1,\"382\":1,\"391\":1,\"392\":1,\"393\":2,\"394\":1,\"397\":1,\"400\":1,\"405\":1,\"408\":1,\"411\":1,\"415\":1,\"416\":1,\"417\":2,\"418\":1,\"419\":2,\"420\":2,\"421\":3,\"422\":2,\"423\":2,\"424\":1,\"425\":1,\"429\":1,\"431\":1,\"434\":1,\"442\":1,\"446\":1,\"449\":1,\"450\":1,\"456\":1,\"460\":1,\"476\":1,\"483\":1,\"490\":1,\"491\":2,\"492\":1,\"494\":1,\"496\":1,\"497\":1,\"498\":2,\"499\":1,\"500\":1,\"502\":1,\"506\":1,\"507\":1,\"508\":2,\"509\":1,\"513\":1,\"514\":2,\"515\":1,\"516\":1,\"517\":2,\"518\":1,\"519\":1,\"520\":1,\"521\":2,\"522\":1,\"523\":1,\"524\":1,\"525\":1,\"526\":1,\"527\":1,\"528\":1,\"531\":1,\"532\":1,\"541\":1,\"542\":1,\"557\":1,\"561\":1,\"562\":2,\"564\":1,\"567\":1,\"569\":1,\"571\":1,\"575\":1,\"579\":1,\"583\":1,\"584\":1,\"589\":1,\"594\":1,\"599\":1,\"603\":1,\"604\":1,\"609\":1,\"614\":1},\"1\":{\"25\":1,\"62\":1,\"76\":1,\"112\":1,\"113\":2,\"116\":2,\"119\":1,\"121\":1,\"122\":1,\"123\":1,\"130\":1,\"166\":4,\"167\":1,\"180\":4,\"187\":1,\"206\":2,\"216\":1,\"217\":1,\"225\":2,\"226\":1,\"229\":1,\"230\":2,\"232\":1,\"234\":1,\"236\":2,\"237\":1,\"238\":3,\"241\":1,\"243\":1,\"244\":1,\"249\":2,\"260\":1,\"261\":1,\"263\":1,\"264\":3,\"265\":5,\"266\":4,\"267\":1,\"269\":2,\"274\":1,\"277\":2,\"278\":1,\"279\":1,\"280\":4,\"283\":2,\"286\":1,\"287\":1,\"289\":1,\"290\":5,\"291\":4,\"292\":8,\"293\":2,\"294\":3,\"295\":5,\"296\":2,\"310\":1,\"311\":1,\"318\":2,\"320\":2,\"327\":1,\"330\":1,\"345\":1,\"346\":1,\"361\":5,\"364\":1,\"367\":1,\"369\":2,\"370\":6,\"373\":1,\"376\":1,\"377\":1,\"378\":2,\"379\":3,\"381\":2,\"382\":1,\"383\":2,\"384\":4,\"385\":2,\"394\":1,\"397\":1,\"400\":1,\"401\":4,\"402\":3,\"404\":1,\"407\":1,\"412\":1,\"423\":1,\"424\":1,\"435\":1,\"436\":1,\"466\":2,\"489\":4,\"509\":1,\"542\":1,\"557\":5,\"558\":1,\"562\":6,\"564\":1,\"567\":4,\"572\":7,\"576\":4}}],[\"xugan没有薪水属性\",{\"1\":{\"435\":1}}],[\"xugan\",{\"1\":{\"435\":6,\"463\":4}}],[\"xxx\",{\"1\":{\"490\":2,\"565\":4}}],[\"xxxx年x月x日\",{\"1\":{\"379\":1}}],[\"xxxxxxx\",{\"1\":{\"361\":1}}],[\"xxx就是计算机名\",{\"1\":{\"60\":1}}],[\"x++\",{\"1\":{\"319\":1,\"562\":3}}],[\"x<arr\",{\"1\":{\"319\":1}}],[\"x=1\",{\"1\":{\"319\":1}}],[\"x\",{\"1\":{\"25\":1,\"265\":4,\"266\":2,\"319\":2,\"562\":15,\"572\":2}}],[\"标准类制作\",{\"0\":{\"344\":1}}],[\"标识符\",{\"0\":{\"124\":1}}],[\"标签为\",{\"1\":{\"32\":1}}],[\"标题\",{\"0\":{\"38\":1,\"39\":1,\"43\":1,\"44\":1,\"48\":1,\"49\":1,\"53\":1,\"54\":1,\"579\":1,\"580\":1,\"584\":1,\"585\":1,\"589\":1,\"590\":1,\"594\":1,\"595\":1,\"599\":1,\"600\":1,\"604\":1,\"605\":1,\"609\":1,\"610\":1,\"614\":1,\"615\":1}}],[\"标题会被视为页面标题\",{\"1\":{\"31\":1}}],[\"标题和页面信息\",{\"1\":{\"9\":1}}],[\"标记着number是否为一个质数\",{\"1\":{\"266\":1}}],[\"标记\",{\"0\":{\"24\":1}}],[\"脚注\",{\"0\":{\"23\":1}}],[\"的main方法中\",{\"1\":{\"567\":1}}],[\"的随机值\",{\"1\":{\"557\":1}}],[\"的定义\",{\"1\":{\"499\":1}}],[\"的过程\",{\"1\":{\"483\":1}}],[\"的内容\",{\"1\":{\"472\":1}}],[\"的关系\",{\"1\":{\"429\":1}}],[\"的注意事项\",{\"0\":{\"425\":1}}],[\"的地址值\",{\"1\":{\"370\":1}}],[\"的值是不可变的\",{\"1\":{\"353\":1}}],[\"的平方根\",{\"1\":{\"265\":1}}],[\"的使用\",{\"0\":{\"194\":1,\"196\":1,\"197\":1}}],[\"的区别\",{\"1\":{\"182\":1}}],[\"的\",{\"1\":{\"22\":1,\"31\":1,\"32\":1,\"265\":2,\"485\":2,\"486\":2,\"487\":3}}],[\"ioexception\",{\"1\":{\"564\":1,\"565\":12}}],[\"isnull\",{\"1\":{\"569\":2}}],[\"isprime1\",{\"1\":{\"562\":1}}],[\"isprime2\",{\"1\":{\"562\":2}}],[\"isprime\",{\"1\":{\"558\":2}}],[\"is\",{\"1\":{\"429\":1}}],[\"isevennumber\",{\"1\":{\"304\":2,\"308\":3}}],[\"i依次表示数组中的每一个索引\",{\"1\":{\"284\":1}}],[\"i<=100\",{\"1\":{\"244\":1}}],[\"i<=5\",{\"1\":{\"242\":1,\"243\":1}}],[\"i>=1\",{\"1\":{\"242\":1}}],[\"i=5\",{\"1\":{\"242\":1}}],[\"i=1\",{\"1\":{\"242\":1,\"243\":1,\"244\":1}}],[\"i++\",{\"1\":{\"241\":1,\"242\":1,\"243\":1,\"244\":1,\"248\":1,\"260\":1,\"261\":1,\"264\":1,\"265\":1,\"266\":1,\"284\":1,\"290\":1,\"291\":1,\"292\":2,\"293\":1,\"294\":4,\"295\":2,\"296\":2,\"318\":1,\"320\":1,\"361\":1,\"364\":1,\"367\":1,\"370\":2,\"376\":2,\"378\":1,\"384\":1,\"397\":1,\"400\":1,\"401\":1,\"402\":1,\"499\":2,\"558\":1,\"559\":1,\"562\":4,\"567\":2,\"572\":1}}],[\"import重新打开项目\",{\"1\":{\"162\":1}}],[\"import\",{\"1\":{\"103\":1,\"130\":1,\"161\":1,\"236\":1,\"263\":2,\"311\":1,\"376\":1,\"567\":1,\"572\":2}}],[\"implements关键字\",{\"1\":{\"520\":1}}],[\"implements\",{\"1\":{\"103\":1,\"521\":1,\"523\":2,\"524\":1,\"542\":1,\"565\":1,\"567\":1}}],[\"image\",{\"1\":{\"63\":4,\"83\":3,\"96\":1,\"97\":1,\"322\":1,\"328\":1}}],[\"if格式实现\",{\"1\":{\"232\":1}}],[\"ifdemo02\",{\"1\":{\"228\":1}}],[\"ifdemo\",{\"1\":{\"224\":1}}],[\"if语句格式3\",{\"0\":{\"231\":1}}],[\"if语句格式2\",{\"0\":{\"228\":1}}],[\"if语句格式1\",{\"0\":{\"224\":1}}],[\"if语句\",{\"0\":{\"223\":1}}],[\"if\",{\"1\":{\"103\":1,\"221\":1,\"224\":3,\"225\":1,\"226\":1,\"228\":2,\"229\":1,\"230\":2,\"231\":2,\"232\":4,\"244\":1,\"260\":1,\"261\":1,\"264\":1,\"265\":2,\"266\":2,\"267\":2,\"291\":1,\"292\":1,\"293\":1,\"294\":1,\"302\":1,\"306\":1,\"309\":1,\"311\":1,\"318\":1,\"319\":1,\"320\":1,\"336\":1,\"361\":2,\"367\":3,\"370\":2,\"376\":2,\"379\":1,\"383\":1,\"384\":1,\"397\":1,\"401\":1,\"402\":1,\"408\":1,\"416\":1,\"487\":2,\"488\":2,\"489\":2,\"558\":1,\"559\":1,\"562\":6,\"565\":5,\"567\":2}}],[\"i\",{\"1\":{\"34\":1,\"130\":2,\"173\":1,\"174\":2,\"175\":2,\"241\":2,\"242\":3,\"243\":9,\"244\":3,\"248\":3,\"260\":4,\"261\":4,\"264\":6,\"265\":9,\"266\":4,\"280\":4,\"284\":3,\"290\":5,\"291\":6,\"292\":12,\"293\":6,\"294\":12,\"295\":7,\"296\":8,\"318\":5,\"320\":4,\"361\":4,\"364\":4,\"367\":4,\"370\":12,\"373\":5,\"376\":6,\"378\":5,\"384\":5,\"397\":6,\"400\":4,\"401\":4,\"402\":5,\"482\":1,\"499\":6,\"558\":3,\"559\":7,\"562\":13,\"567\":7,\"572\":4}}],[\"insert\",{\"1\":{\"567\":3}}],[\"instanceof新特性\",{\"0\":{\"488\":1}}],[\"instanceof关键字\",{\"0\":{\"487\":1}}],[\"instanceof\",{\"1\":{\"103\":1,\"487\":4,\"488\":2,\"489\":2}}],[\"initview\",{\"1\":{\"565\":5}}],[\"initjframe\",{\"1\":{\"565\":2}}],[\"innerclassdemo01\",{\"1\":{\"537\":1}}],[\"inner01\",{\"1\":{\"537\":5}}],[\"inner\",{\"1\":{\"533\":6,\"535\":3}}],[\"indexoutofboundsexception\",{\"1\":{\"394\":2}}],[\"index\",{\"1\":{\"320\":2,\"393\":3,\"394\":3,\"401\":2}}],[\"intvalue\",{\"1\":{\"572\":3}}],[\"int类型有取值范围\",{\"1\":{\"570\":1}}],[\"int类型的数据是可以存到这个数组里面的\",{\"1\":{\"269\":1}}],[\"int类型的\",{\"1\":{\"210\":1}}],[\"int类型的大概取值范围\",{\"1\":{\"118\":1}}],[\"integer\",{\"1\":{\"567\":2}}],[\"interf\",{\"1\":{\"518\":1}}],[\"interface\",{\"1\":{\"103\":1,\"349\":1,\"514\":2,\"518\":1,\"523\":1,\"524\":2,\"525\":3,\"542\":1,\"544\":1,\"546\":1}}],[\"int的取值范围是大的\",{\"1\":{\"173\":1}}],[\"int\",{\"1\":{\"103\":1,\"111\":2,\"112\":4,\"113\":1,\"116\":1,\"118\":1,\"119\":1,\"120\":2,\"121\":1,\"122\":1,\"130\":1,\"167\":4,\"171\":2,\"172\":1,\"173\":1,\"174\":2,\"175\":2,\"176\":1,\"177\":1,\"179\":2,\"182\":1,\"186\":1,\"187\":3,\"190\":2,\"206\":10,\"212\":2,\"213\":3,\"215\":4,\"216\":1,\"217\":1,\"224\":3,\"225\":1,\"226\":1,\"228\":2,\"229\":1,\"230\":1,\"232\":1,\"236\":1,\"237\":1,\"238\":1,\"241\":1,\"242\":2,\"243\":2,\"244\":2,\"248\":1,\"249\":2,\"260\":1,\"261\":1,\"263\":2,\"264\":1,\"265\":2,\"266\":2,\"267\":2,\"270\":1,\"271\":1,\"274\":2,\"275\":1,\"277\":1,\"278\":4,\"280\":1,\"283\":2,\"284\":1,\"286\":4,\"287\":3,\"289\":6,\"290\":3,\"291\":3,\"292\":3,\"293\":3,\"294\":10,\"295\":4,\"296\":5,\"302\":2,\"304\":4,\"305\":1,\"306\":4,\"308\":4,\"309\":4,\"310\":10,\"311\":3,\"316\":11,\"317\":5,\"318\":3,\"319\":8,\"320\":6,\"326\":1,\"328\":1,\"336\":3,\"337\":3,\"338\":3,\"340\":1,\"343\":5,\"345\":4,\"346\":4,\"361\":1,\"364\":1,\"367\":4,\"369\":2,\"370\":7,\"373\":1,\"376\":6,\"378\":1,\"379\":1,\"381\":1,\"384\":4,\"385\":1,\"393\":4,\"394\":4,\"397\":1,\"400\":1,\"401\":4,\"402\":1,\"404\":1,\"408\":4,\"412\":1,\"416\":3,\"417\":2,\"418\":1,\"435\":3,\"439\":4,\"441\":2,\"442\":2,\"443\":3,\"456\":1,\"459\":1,\"461\":4,\"463\":5,\"466\":6,\"476\":1,\"482\":2,\"489\":10,\"499\":6,\"500\":3,\"518\":8,\"533\":1,\"535\":3,\"557\":18,\"558\":3,\"559\":5,\"562\":26,\"564\":4,\"567\":18,\"572\":10,\"576\":2}}],[\"include\",{\"1\":{\"69\":1}}],[\"in\",{\"1\":{\"31\":1,\"130\":1,\"167\":1,\"206\":1,\"225\":1,\"226\":1,\"229\":1,\"230\":1,\"232\":1,\"236\":1,\"238\":1,\"265\":1,\"266\":1,\"267\":1,\"311\":1,\"361\":1,\"364\":1,\"367\":1,\"373\":1,\"376\":1,\"377\":1,\"378\":1,\"383\":1,\"537\":2,\"576\":1}}],[\"idea循环是否需要帮我们在本地创建一个新的文件夹\",{\"1\":{\"163\":1}}],[\"idea会帮助我们在本地创建一个项目文件夹\",{\"1\":{\"146\":1}}],[\"idea中项目的相关操作\",{\"0\":{\"158\":1}}],[\"idea中模块的相关操作\",{\"0\":{\"152\":1}}],[\"idea中类的相关操作\",{\"0\":{\"147\":1}}],[\"idea中的第一个代码\",{\"0\":{\"144\":1}}],[\"idea中就是一个个的project\",{\"1\":{\"139\":1}}],[\"idea中层级结构介绍\",{\"0\":{\"136\":1}}],[\"idea的下载和安装\",{\"0\":{\"133\":1}}],[\"idea全称intellij\",{\"1\":{\"132\":1}}],[\"idea概述\",{\"0\":{\"132\":1}}],[\"idea\",{\"0\":{\"131\":1},\"1\":{\"132\":1,\"134\":1}}],[\"id\",{\"1\":{\"22\":1,\"379\":5,\"401\":5,\"402\":4,\"509\":8,\"567\":11}}],[\"itcast\",{\"1\":{\"346\":2,\"569\":2}}],[\"itheima\",{\"1\":{\"61\":2,\"310\":1,\"320\":1,\"346\":1,\"361\":1,\"376\":1,\"379\":1,\"384\":1,\"463\":1,\"466\":1,\"490\":3,\"492\":4,\"523\":1,\"567\":13,\"569\":8,\"572\":2,\"576\":1}}],[\"it\",{\"1\":{\"15\":2}}],[\"我可以调用其他构造方法\",{\"1\":{\"463\":1}}],[\"我的兄弟很牛逼啊\",{\"1\":{\"463\":1}}],[\"我的名字是黑默丁格\",{\"1\":{\"180\":1}}],[\"我的名字是\",{\"1\":{\"180\":1}}],[\"我是拿着谁跟谁比较\",{\"1\":{\"402\":1}}],[\"我是居中的\",{\"1\":{\"21\":1}}],[\"我要根据id查询学生是否存在\",{\"1\":{\"402\":1}}],[\"我要遍历数组\",{\"1\":{\"318\":1}}],[\"我要干嘛\",{\"1\":{\"310\":1,\"311\":1,\"320\":1,\"401\":1,\"402\":1}}],[\"我要干什么\",{\"1\":{\"305\":1}}],[\"我干完这件事情\",{\"1\":{\"310\":1}}],[\"我干这件事情\",{\"1\":{\"310\":1,\"311\":1,\"402\":1}}],[\"我干这件事情需要什么才能完成\",{\"1\":{\"305\":1,\"401\":1}}],[\"我准备开始用scanner这个类了\",{\"1\":{\"130\":2}}],[\"我\",{\"1\":{\"105\":1}}],[\"我们接下来就重点介绍一下常见的成员方法\",{\"1\":{\"576\":1}}],[\"我们都知道计算机底层在进行运算的时候\",{\"1\":{\"574\":1}}],[\"我们都在黑马程序员学习\",{\"1\":{\"422\":1}}],[\"我们来运行一下程序\",{\"1\":{\"574\":1}}],[\"我们也可以使用idea开发工具完成\",{\"1\":{\"567\":1}}],[\"我们认为就是同一个对象\",{\"1\":{\"567\":1}}],[\"我们希望比较的是对象的属性\",{\"1\":{\"567\":1}}],[\"我们尝试调用object类中的equals方法进行比较\",{\"1\":{\"567\":1}}],[\"我们再来查看一下如下代码的输出\",{\"1\":{\"567\":1}}],[\"我们常常使用的是可以设置取舍模式的divide方法\",{\"1\":{\"576\":1}}],[\"我们常常是通过输出语句直接输出一个对象的名称\",{\"1\":{\"567\":1}}],[\"我们常常将\",{\"1\":{\"567\":1}}],[\"我们常常来需要统计某一段代码的执行时间\",{\"1\":{\"562\":1}}],[\"我们主要学习的就是一些常见的方法\",{\"1\":{\"556\":1}}],[\"我们的目的\",{\"1\":{\"542\":1}}],[\"我们已经学完了抽象类\",{\"1\":{\"513\":1}}],[\"我们已经知道多态编译阶段是看左边父类类型的\",{\"1\":{\"480\":1}}],[\"我们已经知道面向对象中\",{\"1\":{\"418\":1}}],[\"我们将这种方法重写的操作\",{\"1\":{\"509\":1}}],[\"我们把没有方法体的方法称为抽象方法\",{\"1\":{\"505\":1}}],[\"我们知道\",{\"1\":{\"495\":1}}],[\"我们之前已经学习过了public\",{\"1\":{\"493\":1}}],[\"我们最好先做一个判断\",{\"1\":{\"487\":1}}],[\"我们就需要在student类中重写object类中的equals方法\",{\"1\":{\"567\":1}}],[\"我们就称子类的这个方法是重写的方法\",{\"1\":{\"467\":1}}],[\"我们就可以拿到里面的每一个字符并拼接\",{\"1\":{\"373\":1}}],[\"我们发现\",{\"1\":{\"459\":1}}],[\"我们一起学猫叫\",{\"1\":{\"449\":1,\"450\":1}}],[\"我们定义了一个动物类代码如下\",{\"1\":{\"449\":1}}],[\"我们遵循封装的原则\",{\"1\":{\"443\":1}}],[\"我们通过继承\",{\"1\":{\"429\":1}}],[\"我们上面案例中的成员变量都是没有static修饰的\",{\"1\":{\"418\":1}}],[\"我们在创建本类对象的时候会先执行构造代码块再执行构造方法\",{\"1\":{\"502\":1}}],[\"我们在类中定义了一些成员变量\",{\"1\":{\"418\":1}}],[\"我们在键盘输入的数据就会被变量i给接收了\",{\"1\":{\"130\":1}}],[\"我们现在要知道\",{\"1\":{\"370\":1}}],[\"我们不需要关心这些类是如何实现的\",{\"1\":{\"349\":1}}],[\"我们不需要关心是如何实现的\",{\"1\":{\"262\":1}}],[\"我们习惯性会把\",{\"1\":{\"280\":1}}],[\"我们必须清楚每条语句的执行流程\",{\"1\":{\"220\":1}}],[\"我们叫做后++\",{\"1\":{\"184\":1}}],[\"我们叫做先++\",{\"1\":{\"184\":1}}],[\"我们要了解的objects类中的常见方法如下所示\",{\"1\":{\"569\":1}}],[\"我们要重点学习的objects类中的常见方法如下所示\",{\"1\":{\"569\":1}}],[\"我们要学习的object类中的常见方法如下所示\",{\"1\":{\"564\":1,\"567\":1}}],[\"我们要学习的system类中的常见方法如下所示\",{\"1\":{\"562\":1}}],[\"我们要学习的math的常见方法如下所示\",{\"1\":{\"557\":1}}],[\"我们要扫地时\",{\"1\":{\"322\":1}}],[\"我们要洗衣服时\",{\"1\":{\"322\":1}}],[\"我们要设置一下字体\",{\"1\":{\"146\":1}}],[\"我们要编写java代码\",{\"1\":{\"146\":1}}],[\"我们要从0开始写代码\",{\"1\":{\"146\":1}}],[\"我们会把代码分别放在两个模块中存放\",{\"1\":{\"140\":1}}],[\"我们后面再学习\",{\"1\":{\"138\":1}}],[\"我们只需要将67后面的其他元素依次向前进行移动即可\",{\"1\":{\"562\":2}}],[\"我们只需安装jdk即可\",{\"1\":{\"97\":1}}],[\"我们只要直接使用scanner这个类就可以了\",{\"1\":{\"130\":1}}],[\"我们学的跟工作中使用的版本不太一样啊\",{\"1\":{\"90\":1}}],[\"我们可以发现jdk中针对bigdecimal类提供了很多的构造方法\",{\"1\":{\"576\":1}}],[\"我们可以发现objects类中无无参构造方法\",{\"1\":{\"568\":1}}],[\"我们可以查看一下object类中equals方法的源码\",{\"1\":{\"567\":1}}],[\"我们可以看到和刚才的输出结果是一致的\",{\"1\":{\"567\":1}}],[\"我们可以看到api文档中关于bigdecimal类的定义如下\",{\"1\":{\"575\":1}}],[\"我们可以看到api文档中关于biginteger类的定义如下\",{\"1\":{\"571\":1}}],[\"我们可以看到api文档中关于objects类的定义如下\",{\"1\":{\"568\":1}}],[\"我们可以看到api文档中关于object类的定义如下\",{\"1\":{\"566\":1}}],[\"我们可以看到api文档中关于system类的定义如下\",{\"1\":{\"561\":1}}],[\"我们可以看到api文档中关于math类的定义如下\",{\"1\":{\"556\":1}}],[\"我们可以通过如下格式直接访问这些取舍模式\",{\"1\":{\"576\":1}}],[\"我们可以通过重写tostring方法去输出对应的成员变量信息\",{\"1\":{\"567\":1}}],[\"我们可以通过idea开发工具进行实现\",{\"1\":{\"567\":1}}],[\"我们可以通过帮助文档来学习这些api如何使用\",{\"1\":{\"349\":1}}],[\"我们可以使用bigdecimal类进行更加精准的数据计算\",{\"1\":{\"575\":1}}],[\"我们可以使用biginteger类进行大整数的计算\",{\"1\":{\"571\":1}}],[\"我们可以使用long类型\",{\"1\":{\"570\":1}}],[\"我们可以使用math类完成基本的数学运算\",{\"1\":{\"556\":1}}],[\"我们可以使用super关键字\",{\"1\":{\"442\":1}}],[\"我们可以理解成实现多个规范\",{\"1\":{\"524\":1}}],[\"我们可以传递这个接口所有的实现类对象\",{\"1\":{\"476\":1}}],[\"我们可以传递这个类所有的子类对象\",{\"1\":{\"476\":1}}],[\"我们可以借助与super\",{\"1\":{\"459\":1}}],[\"我们可以定义一个人类\",{\"1\":{\"434\":1}}],[\"我们可以将这些内容抽取到单独一个类中\",{\"1\":{\"428\":1}}],[\"我们可以直接使用的\",{\"1\":{\"97\":1}}],[\"我们可以把java和javac的完整路径配置到path当中\",{\"1\":{\"84\":1}}],[\"我们可以利用cmd命令去操作计算机\",{\"1\":{\"59\":1}}],[\"我们想要让计算机做一些事情\",{\"1\":{\"65\":1}}],[\"我在右对齐\",{\"1\":{\"21\":1}}],[\"上述divide方法参数说明\",{\"1\":{\"576\":1}}],[\"上述方法中的t可以理解为是object类型\",{\"1\":{\"569\":1}}],[\"上方了按钮出现\",{\"1\":{\"565\":1}}],[\"上面是父类\",{\"1\":{\"434\":1}}],[\"上面这个格式里面\",{\"1\":{\"263\":2}}],[\"上去两位乘客\",{\"1\":{\"113\":4}}],[\"上去一位乘客\",{\"1\":{\"113\":4}}],[\"上下角标\",{\"0\":{\"20\":1}}],[\"上一篇\",{\"1\":{\"6\":1}}],[\"危险容器\",{\"1\":{\"18\":1}}],[\"警告容器\",{\"1\":{\"18\":1}}],[\"1716\",{\"1\":{\"576\":1}}],[\"17\",{\"1\":{\"572\":2}}],[\"17位\",{\"1\":{\"379\":1}}],[\"1^4\",{\"1\":{\"559\":1}}],[\"1^3\",{\"1\":{\"559\":1}}],[\"1之间的随机数为\",{\"1\":{\"557\":2}}],[\"1个参数的会更好\",{\"1\":{\"377\":1}}],[\"1案例需求\",{\"0\":{\"360\":1,\"363\":1,\"366\":1,\"369\":1,\"372\":1}}],[\"1string类概述\",{\"0\":{\"352\":1}}],[\"1api概述\",{\"0\":{\"349\":1}}],[\"1abc\",{\"1\":{\"180\":2}}],[\"1abc1\",{\"1\":{\"180\":2}}],[\"1为止\",{\"1\":{\"266\":1}}],[\"1为true\",{\"1\":{\"214\":2}}],[\"19\",{\"1\":{\"264\":1,\"278\":2}}],[\"19th\",{\"1\":{\"20\":1}}],[\"1的数据\",{\"1\":{\"242\":1}}],[\"1变0\",{\"1\":{\"208\":1}}],[\"1负\",{\"1\":{\"207\":1}}],[\"111\",{\"1\":{\"346\":1,\"383\":1}}],[\"1100\",{\"1\":{\"213\":4,\"215\":5,\"216\":2,\"217\":2}}],[\"11\",{\"0\":{\"374\":1,\"375\":1,\"376\":1,\"555\":1},\"1\":{\"186\":1,\"264\":2,\"274\":1,\"275\":1,\"318\":2,\"567\":1,\"572\":1}}],[\"1+99+\",{\"1\":{\"180\":1}}],[\"1576134383441\",{\"1\":{\"576\":1}}],[\"1576132679789\",{\"1\":{\"575\":1}}],[\"1576058659628\",{\"1\":{\"568\":1}}],[\"1576058492444\",{\"1\":{\"568\":1}}],[\"1576057892814\",{\"1\":{\"567\":1}}],[\"1576057813175\",{\"1\":{\"567\":1}}],[\"1576057779458\",{\"1\":{\"567\":1}}],[\"1576056718392\",{\"1\":{\"567\":1}}],[\"1576055198877\",{\"1\":{\"567\":1}}],[\"1576055135105\",{\"1\":{\"567\":1}}],[\"1576053871503\",{\"1\":{\"566\":1}}],[\"1576053677194\",{\"1\":{\"566\":1}}],[\"1576050298343\",{\"1\":{\"562\":1}}],[\"1576049535584\",{\"1\":{\"561\":1}}],[\"1576049347968\",{\"1\":{\"561\":1}}],[\"1576047846672\",{\"1\":{\"556\":1}}],[\"1576047659085\",{\"1\":{\"556\":1}}],[\"1514\",{\"1\":{\"562\":1}}],[\"153\",{\"1\":{\"559\":1}}],[\"1545616667104\",{\"1\":{\"231\":1}}],[\"1545616221283\",{\"1\":{\"228\":1}}],[\"1545616039363\",{\"1\":{\"224\":1}}],[\"1545615769372\",{\"1\":{\"222\":1}}],[\"150\",{\"1\":{\"206\":1,\"565\":3}}],[\"15\",{\"1\":{\"166\":1,\"243\":1,\"264\":2,\"379\":1,\"385\":1,\"400\":1,\"567\":1,\"572\":1}}],[\"18位\",{\"1\":{\"379\":1}}],[\"1800\",{\"1\":{\"565\":1}}],[\"180\",{\"1\":{\"121\":1,\"565\":1}}],[\"18\",{\"1\":{\"121\":1,\"264\":2,\"278\":2,\"400\":1,\"412\":1,\"476\":1}}],[\"1f\",{\"1\":{\"119\":1}}],[\"120\",{\"1\":{\"565\":1}}],[\"12和34的最小值为\",{\"1\":{\"557\":2}}],[\"12\",{\"0\":{\"377\":1},\"1\":{\"179\":2,\"186\":1,\"264\":2,\"319\":1,\"379\":2,\"518\":2,\"557\":2,\"567\":1}}],[\"123123\",{\"1\":{\"383\":1}}],[\"123321\",{\"1\":{\"383\":1}}],[\"1234\",{\"1\":{\"401\":1}}],[\"123456\",{\"1\":{\"401\":1,\"402\":1}}],[\"12345678\",{\"1\":{\"346\":1,\"402\":1}}],[\"123456789123456789l\",{\"1\":{\"119\":1}}],[\"1234qwer\",{\"1\":{\"346\":1,\"361\":1,\"401\":1,\"402\":1,\"567\":1}}],[\"123\",{\"1\":{\"167\":1,\"572\":1}}],[\"127\",{\"1\":{\"118\":1}}],[\"128\",{\"1\":{\"118\":1,\"209\":1}}],[\"128~127\",{\"1\":{\"116\":1,\"120\":1,\"209\":1}}],[\"16~16\",{\"1\":{\"572\":1}}],[\"160\",{\"1\":{\"565\":1}}],[\"1634\",{\"1\":{\"559\":1}}],[\"16的平方根4\",{\"1\":{\"265\":1}}],[\"16位\",{\"1\":{\"210\":1,\"379\":1}}],[\"165\",{\"1\":{\"206\":1}}],[\"165cm\",{\"1\":{\"206\":1}}],[\"16\",{\"1\":{\"111\":2,\"264\":2,\"265\":2,\"379\":1,\"400\":1,\"572\":4}}],[\"14位\",{\"1\":{\"379\":1}}],[\"14\",{\"0\":{\"379\":1},\"1\":{\"105\":1,\"311\":1,\"379\":1,\"482\":1,\"562\":5,\"567\":8,\"569\":10,\"576\":1}}],[\"13112349408\",{\"1\":{\"377\":1}}],[\"131\",{\"1\":{\"377\":2}}],[\"13\",{\"0\":{\"378\":1},\"1\":{\"105\":1,\"264\":2,\"567\":1}}],[\"1024\",{\"1\":{\"564\":6}}],[\"10字符串反转案例\",{\"0\":{\"371\":1}}],[\"10l\",{\"1\":{\"317\":1}}],[\"10的平方根是在3~4之间\",{\"1\":{\"265\":1}}],[\"10|00\",{\"1\":{\"217\":1}}],[\"1010\",{\"1\":{\"210\":4,\"212\":2,\"215\":1}}],[\"10是整数\",{\"1\":{\"172\":1}}],[\"100之间的随机数\",{\"1\":{\"267\":3}}],[\"100之间的满足逢七必过规则的数据\",{\"1\":{\"264\":2}}],[\"100之间的偶数和是\",{\"1\":{\"244\":1}}],[\"100之间的偶数和\",{\"1\":{\"244\":1}}],[\"100的偶数求和\",{\"1\":{\"244\":1}}],[\"100的数据求和与1\",{\"1\":{\"244\":1}}],[\"100嘿嘿\",{\"1\":{\"180\":1}}],[\"100l\",{\"1\":{\"175\":1,\"177\":1}}],[\"100000\",{\"1\":{\"562\":1}}],[\"100000|\",{\"1\":{\"216\":1}}],[\"1000\",{\"1\":{\"167\":1,\"213\":2,\"215\":5,\"216\":1,\"217\":1,\"435\":3}}],[\"100\",{\"1\":{\"167\":3,\"173\":1,\"229\":1,\"230\":1,\"232\":2,\"263\":1,\"264\":2,\"267\":2,\"289\":2,\"294\":1,\"308\":1,\"313\":2,\"461\":1,\"559\":3,\"565\":3,\"567\":2,\"572\":1}}],[\"10\",{\"0\":{\"97\":1,\"372\":1,\"373\":1,\"403\":1,\"465\":1},\"1\":{\"105\":1,\"111\":2,\"112\":2,\"119\":2,\"166\":5,\"167\":13,\"172\":2,\"174\":1,\"175\":1,\"176\":1,\"177\":1,\"186\":1,\"187\":2,\"190\":1,\"191\":2,\"206\":1,\"210\":3,\"212\":1,\"215\":4,\"224\":2,\"228\":1,\"237\":1,\"243\":2,\"263\":1,\"264\":5,\"265\":5,\"283\":1,\"286\":1,\"289\":1,\"291\":3,\"292\":3,\"294\":1,\"302\":1,\"304\":2,\"305\":1,\"306\":3,\"309\":2,\"310\":4,\"317\":3,\"376\":2,\"379\":2,\"439\":1,\"499\":4,\"500\":2,\"533\":1,\"535\":2,\"559\":4,\"562\":1,\"567\":1,\"572\":1,\"603\":1}}],[\"1下载\",{\"0\":{\"86\":1}}],[\"1\",{\"0\":{\"58\":1,\"59\":2,\"60\":1,\"61\":1,\"62\":1,\"63\":1,\"65\":2,\"66\":1,\"67\":2,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"73\":1,\"74\":2,\"75\":1,\"76\":1,\"81\":1,\"82\":2,\"83\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":2,\"93\":1,\"94\":1,\"95\":1,\"96\":2,\"97\":1,\"99\":1,\"103\":1,\"108\":1,\"110\":1,\"115\":1,\"125\":1,\"127\":1,\"132\":1,\"134\":1,\"137\":1,\"145\":1,\"148\":1,\"153\":1,\"159\":1,\"221\":2,\"222\":1,\"224\":1,\"234\":1,\"240\":1,\"241\":2,\"247\":1,\"253\":1,\"298\":1,\"299\":2,\"301\":1,\"304\":1,\"308\":1,\"313\":1,\"316\":1,\"324\":1,\"325\":2,\"326\":1,\"327\":1,\"328\":1,\"330\":1,\"333\":1,\"335\":1,\"340\":1,\"348\":1,\"349\":1,\"350\":1,\"357\":1,\"375\":1,\"381\":1,\"388\":1,\"390\":2,\"391\":1,\"392\":2,\"393\":1,\"394\":1,\"395\":1,\"396\":2,\"397\":1,\"398\":1,\"399\":2,\"400\":1,\"401\":1,\"402\":1,\"404\":2,\"405\":1,\"406\":1,\"407\":2,\"408\":1,\"409\":1,\"410\":2,\"411\":1,\"412\":1,\"413\":1,\"414\":2,\"415\":1,\"416\":2,\"417\":1,\"418\":1,\"420\":1,\"427\":1,\"428\":2,\"429\":1,\"430\":1,\"433\":1,\"438\":1,\"439\":1,\"441\":1,\"445\":1,\"448\":1,\"455\":1,\"459\":1,\"475\":2,\"476\":1,\"477\":1,\"478\":1,\"480\":1,\"481\":1,\"482\":2,\"483\":1,\"484\":1,\"485\":1,\"486\":1,\"487\":1,\"488\":1,\"489\":1,\"490\":1,\"493\":1,\"495\":1,\"497\":1,\"501\":1,\"504\":2,\"505\":3,\"506\":1,\"507\":2,\"508\":1,\"509\":1,\"510\":1,\"511\":1,\"512\":1,\"513\":1,\"516\":1,\"520\":1,\"529\":1,\"530\":2,\"531\":1,\"540\":1,\"556\":2,\"557\":1,\"558\":1,\"559\":1,\"560\":1,\"561\":1,\"563\":1,\"566\":1,\"568\":1,\"570\":1,\"574\":1,\"578\":1,\"598\":1},\"1\":{\"18\":1,\"25\":1,\"32\":2,\"34\":2,\"62\":1,\"76\":1,\"111\":2,\"112\":1,\"113\":6,\"116\":8,\"119\":1,\"121\":2,\"122\":1,\"123\":1,\"166\":3,\"167\":1,\"180\":8,\"183\":1,\"186\":2,\"187\":1,\"206\":2,\"225\":1,\"226\":2,\"229\":1,\"230\":2,\"232\":1,\"234\":1,\"236\":2,\"237\":1,\"238\":4,\"241\":3,\"242\":1,\"243\":4,\"244\":1,\"248\":1,\"249\":2,\"260\":2,\"261\":2,\"263\":1,\"264\":5,\"265\":10,\"266\":4,\"267\":4,\"269\":4,\"274\":4,\"277\":5,\"278\":1,\"279\":1,\"280\":12,\"283\":2,\"286\":1,\"287\":1,\"289\":5,\"290\":2,\"291\":2,\"292\":3,\"293\":3,\"294\":4,\"295\":5,\"296\":2,\"310\":1,\"311\":1,\"318\":3,\"320\":4,\"327\":1,\"330\":1,\"345\":1,\"346\":1,\"361\":3,\"364\":2,\"367\":1,\"369\":2,\"370\":12,\"373\":2,\"376\":2,\"377\":1,\"378\":2,\"379\":3,\"381\":2,\"382\":1,\"383\":2,\"384\":5,\"385\":2,\"394\":3,\"397\":2,\"400\":1,\"401\":7,\"402\":3,\"404\":2,\"407\":1,\"412\":1,\"424\":1,\"435\":1,\"436\":1,\"443\":1,\"466\":1,\"489\":2,\"509\":1,\"542\":1,\"557\":2,\"562\":8,\"564\":1,\"567\":5,\"572\":9,\"574\":1,\"576\":4}}],[\"=biginteger\",{\"1\":{\"572\":2}}],[\"=gson\",{\"1\":{\"567\":1}}],[\"=newdata\",{\"1\":{\"567\":1}}],[\"=new\",{\"1\":{\"567\":2}}],[\"=runtime\",{\"1\":{\"564\":1}}],[\"==只能用于比较基本数据类型\",{\"1\":{\"386\":1}}],[\"==号比较的到底是什么\",{\"1\":{\"386\":1}}],[\"==号的作用\",{\"0\":{\"357\":1}}],[\"=============================\",{\"1\":{\"346\":1}}],[\"===================================\",{\"1\":{\"194\":1}}],[\"==\",{\"1\":{\"192\":1,\"206\":1,\"224\":2,\"226\":1,\"227\":1,\"230\":1,\"244\":1,\"260\":1,\"261\":1,\"264\":3,\"265\":1,\"266\":1,\"291\":1,\"292\":1,\"317\":4,\"318\":1,\"320\":1,\"358\":3,\"361\":1,\"370\":2,\"376\":1,\"379\":1,\"384\":1,\"397\":1,\"558\":1,\"559\":1,\"562\":2,\"565\":4,\"567\":5,\"572\":2}}],[\"==>是面向对象三大特征之一\",{\"1\":{\"335\":1}}],[\"==>int\",{\"1\":{\"177\":1}}],[\"==>\",{\"1\":{\"166\":1,\"177\":1,\"180\":1,\"215\":6,\"216\":1,\"217\":1,\"308\":1,\"316\":2,\"323\":1,\"338\":1,\"344\":1,\"349\":1,\"355\":2,\"434\":1,\"528\":3}}],[\"=\",{\"1\":{\"18\":1,\"109\":1,\"111\":3,\"112\":7,\"113\":7,\"119\":9,\"121\":5,\"122\":6,\"123\":2,\"130\":2,\"167\":5,\"172\":1,\"173\":2,\"174\":3,\"175\":4,\"176\":3,\"177\":4,\"179\":3,\"180\":1,\"182\":2,\"186\":1,\"187\":5,\"188\":4,\"190\":3,\"191\":7,\"192\":1,\"206\":12,\"212\":2,\"213\":4,\"215\":4,\"216\":1,\"217\":1,\"224\":3,\"225\":2,\"226\":2,\"228\":2,\"229\":2,\"230\":2,\"232\":2,\"236\":2,\"237\":1,\"238\":2,\"241\":1,\"243\":18,\"244\":2,\"248\":1,\"249\":4,\"260\":1,\"261\":1,\"263\":4,\"264\":1,\"265\":12,\"266\":8,\"267\":4,\"274\":3,\"275\":1,\"277\":3,\"278\":2,\"279\":2,\"280\":4,\"283\":3,\"284\":1,\"285\":1,\"286\":2,\"287\":2,\"289\":6,\"290\":4,\"291\":3,\"292\":5,\"293\":4,\"294\":13,\"295\":7,\"296\":8,\"302\":2,\"306\":2,\"308\":2,\"309\":1,\"310\":6,\"311\":6,\"318\":2,\"319\":4,\"320\":3,\"327\":6,\"328\":4,\"336\":3,\"337\":3,\"338\":2,\"340\":2,\"343\":8,\"345\":6,\"346\":12,\"354\":8,\"358\":5,\"361\":6,\"364\":4,\"367\":7,\"369\":1,\"370\":12,\"373\":6,\"376\":18,\"377\":5,\"378\":7,\"379\":6,\"381\":2,\"382\":2,\"383\":3,\"384\":5,\"385\":4,\"386\":3,\"394\":1,\"397\":2,\"400\":6,\"401\":8,\"402\":8,\"405\":2,\"408\":2,\"412\":7,\"416\":2,\"417\":2,\"420\":3,\"422\":1,\"423\":2,\"435\":7,\"439\":4,\"441\":5,\"442\":5,\"443\":4,\"445\":1,\"446\":1,\"449\":1,\"456\":3,\"459\":2,\"461\":7,\"463\":7,\"466\":10,\"475\":1,\"476\":3,\"478\":1,\"479\":1,\"480\":1,\"482\":2,\"483\":2,\"484\":3,\"485\":2,\"486\":2,\"487\":3,\"489\":15,\"492\":2,\"499\":9,\"500\":6,\"509\":6,\"518\":3,\"523\":1,\"533\":5,\"535\":4,\"537\":5,\"542\":1,\"544\":2,\"546\":2,\"558\":2,\"559\":8,\"562\":31,\"565\":12,\"567\":30,\"569\":15,\"572\":20,\"576\":10}}],[\"a06bigintegerdemo\",{\"1\":{\"572\":2}}],[\"a04objectdemo\",{\"1\":{\"567\":2}}],[\"a01switch选择语句\",{\"1\":{\"236\":1}}],[\"and\",{\"1\":{\"567\":1}}],[\"aniaml\",{\"1\":{\"484\":1}}],[\"animal类型的范围当然很大\",{\"1\":{\"483\":1}}],[\"animal是动物类\",{\"1\":{\"483\":1}}],[\"animal没有这个方法\",{\"1\":{\"480\":1}}],[\"animal\",{\"1\":{\"449\":2,\"450\":1,\"466\":6,\"480\":4,\"483\":1,\"485\":4,\"486\":1,\"487\":1,\"489\":7,\"508\":1}}],[\"at\",{\"1\":{\"576\":2}}],[\"atl\",{\"1\":{\"567\":1}}],[\"attrs\",{\"0\":{\"22\":1}}],[\"actionevent\",{\"1\":{\"565\":1}}],[\"actionperformed\",{\"1\":{\"565\":1}}],[\"actionlistener\",{\"1\":{\"565\":1}}],[\"availableprocessors\",{\"1\":{\"564\":3}}],[\"avg\",{\"1\":{\"294\":3}}],[\"a可以有多个子类\",{\"1\":{\"465\":1}}],[\"administrator\",{\"1\":{\"476\":3}}],[\"admin\",{\"1\":{\"435\":2,\"476\":4}}],[\"addactionlistener\",{\"1\":{\"565\":4}}],[\"add\",{\"1\":{\"385\":6,\"393\":1,\"394\":3,\"397\":4,\"400\":3,\"401\":3,\"402\":3,\"518\":2,\"565\":6,\"567\":1,\"572\":4,\"576\":2}}],[\"alt\",{\"1\":{\"361\":1,\"364\":1,\"492\":1,\"567\":2}}],[\"alibaba\",{\"1\":{\"129\":1}}],[\"ap002\",{\"1\":{\"509\":1}}],[\"apple\",{\"0\":{\"629\":1}}],[\"application\",{\"1\":{\"349\":1}}],[\"append\",{\"1\":{\"381\":3,\"382\":4,\"383\":1,\"384\":5}}],[\"api\",{\"0\":{\"348\":1},\"1\":{\"97\":1,\"349\":1,\"567\":4,\"576\":1}}],[\"a>120\",{\"1\":{\"336\":1}}],[\"a<0\",{\"1\":{\"336\":1}}],[\"arithmeticexception\",{\"1\":{\"576\":2}}],[\"area\",{\"1\":{\"311\":2}}],[\"area2\",{\"1\":{\"311\":2}}],[\"area1\",{\"1\":{\"311\":2}}],[\"arr=u1\",{\"1\":{\"567\":1}}],[\"arr1\",{\"1\":{\"562\":2}}],[\"arrtostring\",{\"1\":{\"370\":2,\"384\":2,\"567\":2}}],[\"arrdemo6\",{\"1\":{\"289\":1}}],[\"arrdemo2\",{\"1\":{\"283\":1}}],[\"arr2\",{\"1\":{\"280\":2,\"562\":4}}],[\"arr\",{\"1\":{\"274\":2,\"275\":2,\"280\":2,\"283\":5,\"284\":2,\"287\":2,\"289\":8,\"290\":4,\"291\":5,\"292\":10,\"293\":6,\"294\":10,\"295\":8,\"296\":9,\"318\":7,\"319\":7,\"320\":5,\"369\":1,\"370\":13,\"376\":4,\"378\":4,\"384\":8,\"567\":3,\"572\":3}}],[\"arraycopy方法底层细节\",{\"1\":{\"562\":1}}],[\"arraycopy\",{\"1\":{\"562\":7}}],[\"arraylist存储学生对象并遍历\",{\"0\":{\"398\":1}}],[\"arraylist存储字符串并遍历\",{\"0\":{\"395\":1}}],[\"arraylist<user>\",{\"1\":{\"401\":2,\"402\":2}}],[\"arraylist<student>\",{\"1\":{\"400\":1}}],[\"arraylist<string>\",{\"1\":{\"394\":2,\"397\":1}}],[\"arraylist<>\",{\"1\":{\"397\":1,\"400\":1,\"401\":1,\"402\":1}}],[\"arraylistdemo5\",{\"1\":{\"402\":1}}],[\"arraylistdemo6\",{\"1\":{\"401\":1}}],[\"arraylistdemo4\",{\"1\":{\"400\":1}}],[\"arraylistdemo3\",{\"1\":{\"397\":1}}],[\"arraylistdemo02\",{\"1\":{\"394\":1}}],[\"arraylist类常用方法\",{\"0\":{\"391\":1}}],[\"arraylist类概述\",{\"0\":{\"390\":1}}],[\"arraylist集合的特点\",{\"1\":{\"390\":1}}],[\"arraylist\",{\"0\":{\"388\":1},\"1\":{\"392\":1}}],[\"arrayindexoutofboundsexception\",{\"1\":{\"289\":1}}],[\"array\",{\"1\":{\"270\":1,\"271\":1,\"277\":2,\"394\":17}}],[\"args\",{\"1\":{\"72\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"105\":1,\"111\":1,\"112\":1,\"113\":1,\"119\":1,\"121\":1,\"122\":1,\"123\":1,\"130\":1,\"179\":1,\"187\":1,\"190\":1,\"191\":1,\"206\":1,\"212\":1,\"213\":2,\"215\":2,\"216\":1,\"217\":1,\"224\":1,\"228\":1,\"236\":1,\"242\":1,\"243\":1,\"244\":1,\"263\":1,\"283\":1,\"289\":1,\"302\":1,\"306\":1,\"309\":1,\"310\":1,\"311\":1,\"313\":2,\"317\":1,\"318\":1,\"319\":1,\"320\":1,\"327\":1,\"328\":1,\"336\":1,\"337\":1,\"340\":1,\"343\":1,\"345\":1,\"346\":1,\"354\":1,\"358\":1,\"361\":1,\"364\":1,\"367\":1,\"370\":1,\"373\":1,\"376\":1,\"377\":1,\"378\":2,\"379\":1,\"381\":1,\"382\":1,\"383\":1,\"384\":1,\"394\":1,\"397\":1,\"400\":1,\"401\":1,\"402\":1,\"412\":1,\"420\":1,\"422\":1,\"423\":1,\"426\":2,\"435\":1,\"439\":1,\"441\":1,\"442\":1,\"443\":1,\"445\":1,\"446\":1,\"449\":1,\"456\":1,\"459\":1,\"461\":1,\"463\":1,\"466\":1,\"476\":1,\"480\":1,\"485\":1,\"486\":1,\"487\":1,\"489\":1,\"499\":1,\"509\":1,\"523\":1,\"533\":2,\"535\":1,\"537\":1,\"542\":1,\"544\":1,\"546\":1,\"557\":1,\"558\":1,\"562\":7,\"564\":1,\"565\":1,\"567\":3,\"569\":2,\"572\":2,\"574\":1,\"576\":3}}],[\"aaabbbcccddd\",{\"1\":{\"382\":2}}],[\"aaa\",{\"1\":{\"269\":1,\"318\":1,\"382\":1,\"385\":5,\"397\":1}}],[\"a的值不大于b\",{\"1\":{\"228\":2}}],[\"a的值大于b\",{\"1\":{\"228\":2}}],[\"a等于c\",{\"1\":{\"224\":2}}],[\"a等于b\",{\"1\":{\"224\":2}}],[\"a++\",{\"1\":{\"184\":1,\"186\":1}}],[\"abs\",{\"1\":{\"557\":4}}],[\"abstract修饰程序员无需自己手写\",{\"1\":{\"516\":1}}],[\"abstract是抽象的意思\",{\"1\":{\"506\":1}}],[\"abstract使用格式\",{\"0\":{\"506\":1}}],[\"abstract\",{\"1\":{\"103\":1,\"485\":2,\"507\":2,\"508\":3,\"509\":2,\"512\":2,\"516\":1,\"518\":3,\"527\":1,\"542\":1,\"544\":1,\"546\":1}}],[\"abc\",{\"1\":{\"180\":4,\"352\":1,\"354\":3,\"358\":2,\"372\":1,\"373\":3,\"381\":1,\"386\":3,\"525\":2,\"572\":1}}],[\"a是否可以被b整除\",{\"1\":{\"166\":1}}],[\"age=\",{\"1\":{\"567\":3}}],[\"agesarr\",{\"1\":{\"278\":2,\"286\":1}}],[\"age\",{\"1\":{\"121\":2,\"328\":4,\"336\":4,\"337\":4,\"338\":8,\"340\":2,\"343\":10,\"345\":9,\"346\":8,\"404\":1,\"408\":4,\"412\":5,\"416\":7,\"417\":4,\"418\":3,\"435\":5,\"456\":1,\"459\":1,\"461\":7,\"463\":9,\"466\":12,\"476\":2,\"489\":24,\"518\":2,\"562\":14,\"567\":5,\"569\":2}}],[\"ascii码表中\",{\"1\":{\"182\":1}}],[\"assert\",{\"1\":{\"103\":1}}],[\"as\",{\"1\":{\"31\":1}}],[\"a\",{\"1\":{\"18\":1,\"105\":2,\"111\":2,\"112\":7,\"119\":3,\"166\":3,\"179\":2,\"182\":3,\"186\":3,\"187\":6,\"190\":5,\"191\":11,\"206\":5,\"212\":2,\"213\":4,\"215\":4,\"216\":2,\"217\":2,\"224\":3,\"228\":2,\"302\":3,\"304\":1,\"306\":5,\"308\":1,\"309\":3,\"310\":1,\"316\":8,\"317\":8,\"336\":2,\"337\":2,\"354\":1,\"358\":1,\"367\":2,\"408\":4,\"418\":1,\"429\":1,\"465\":8,\"480\":3,\"483\":1,\"484\":2,\"485\":3,\"486\":3,\"487\":6,\"488\":2,\"489\":5,\"499\":3,\"518\":2,\"533\":1,\"535\":6,\"557\":14,\"564\":1,\"565\":1,\"567\":1,\"569\":1}}],[\"与向下转型\",{\"1\":{\"482\":1}}],[\"与静态成员变量一样\",{\"1\":{\"422\":1}}],[\"与返回值无关\",{\"1\":{\"316\":2}}],[\"与方法的调用无关\",{\"1\":{\"316\":1}}],[\"与或运算符\",{\"0\":{\"215\":1}}],[\"与\",{\"1\":{\"18\":1}}],[\"信息容器\",{\"1\":{\"18\":1}}],[\"value\",{\"1\":{\"576\":4}}],[\"valueof\",{\"1\":{\"572\":12}}],[\"val\",{\"1\":{\"572\":20}}],[\"variabletest3\",{\"1\":{\"123\":1}}],[\"variabletest2\",{\"1\":{\"122\":1}}],[\"variabletest1\",{\"1\":{\"113\":1,\"121\":1}}],[\"variabledemo3\",{\"1\":{\"119\":1}}],[\"variabledemo2\",{\"1\":{\"112\":1}}],[\"variabledemo\",{\"1\":{\"111\":1}}],[\"variable\",{\"1\":{\"18\":1}}],[\"v\",{\"1\":{\"364\":1,\"572\":2}}],[\"volatile\",{\"1\":{\"103\":1}}],[\"void类型的方法\",{\"1\":{\"314\":1}}],[\"void表示无返回值\",{\"1\":{\"313\":1}}],[\"void\",{\"1\":{\"72\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"103\":1,\"105\":1,\"111\":1,\"112\":1,\"113\":1,\"119\":1,\"121\":1,\"122\":1,\"123\":1,\"130\":1,\"179\":1,\"187\":1,\"190\":1,\"191\":1,\"206\":1,\"212\":1,\"213\":2,\"215\":2,\"216\":1,\"217\":1,\"224\":1,\"228\":1,\"236\":1,\"242\":1,\"243\":1,\"244\":1,\"263\":1,\"283\":1,\"289\":1,\"301\":2,\"302\":2,\"304\":4,\"306\":2,\"309\":1,\"310\":1,\"311\":1,\"313\":5,\"316\":3,\"317\":1,\"318\":2,\"319\":1,\"320\":1,\"326\":2,\"327\":1,\"328\":3,\"336\":3,\"337\":4,\"338\":3,\"340\":2,\"343\":2,\"345\":4,\"346\":7,\"354\":1,\"358\":1,\"361\":1,\"364\":1,\"367\":1,\"370\":2,\"373\":1,\"376\":1,\"377\":1,\"378\":2,\"379\":1,\"381\":1,\"382\":1,\"383\":1,\"384\":1,\"394\":1,\"397\":1,\"400\":1,\"401\":1,\"402\":1,\"408\":2,\"412\":1,\"416\":2,\"420\":1,\"422\":2,\"423\":4,\"426\":2,\"435\":7,\"439\":4,\"441\":2,\"442\":2,\"443\":2,\"445\":3,\"446\":3,\"449\":4,\"450\":1,\"456\":1,\"459\":1,\"461\":1,\"463\":4,\"466\":5,\"476\":6,\"480\":5,\"485\":6,\"486\":1,\"487\":1,\"489\":13,\"498\":4,\"499\":1,\"507\":1,\"508\":1,\"509\":4,\"518\":2,\"523\":5,\"524\":4,\"525\":5,\"533\":3,\"535\":2,\"537\":2,\"542\":3,\"543\":1,\"544\":4,\"546\":6,\"548\":1,\"549\":1,\"551\":2,\"557\":1,\"558\":1,\"562\":13,\"564\":3,\"565\":5,\"567\":8,\"569\":9,\"572\":2,\"574\":1,\"576\":6}}],[\"virtual\",{\"1\":{\"97\":1}}],[\"vue\",{\"1\":{\"34\":2}}],[\"vuepress\",{\"0\":{\"16\":1},\"1\":{\"12\":2,\"14\":2,\"15\":1,\"16\":2,\"17\":1,\"33\":1}}],[\"提前把\",{\"1\":{\"572\":1}}],[\"提前结束变量的生命周期\",{\"1\":{\"501\":1}}],[\"提高字符串的操作效率\",{\"1\":{\"385\":1}}],[\"提高代码的可维护性\",{\"1\":{\"299\":1}}],[\"提高代码的复用性\",{\"1\":{\"299\":1,\"430\":2,\"472\":1}}],[\"提高代码的运行效率\",{\"1\":{\"265\":1}}],[\"提供两个成员变量\",{\"1\":{\"567\":1,\"569\":1}}],[\"提供一种存储空间可变的存储模型\",{\"1\":{\"390\":1}}],[\"提供每一个成员变量对应的setxxx\",{\"1\":{\"344\":1}}],[\"提供至少两个构造方法\",{\"1\":{\"344\":1}}],[\"提供get\",{\"1\":{\"336\":1}}],[\"提供\",{\"1\":{\"336\":2,\"337\":2}}],[\"提供相应的操作\",{\"1\":{\"336\":1,\"337\":1}}],[\"提供对应的getxxx\",{\"1\":{\"335\":1}}],[\"提供更加丰富的写作功能\",{\"1\":{\"17\":1}}],[\"提示容器\",{\"0\":{\"18\":1},\"1\":{\"18\":1}}],[\"mybatis\",{\"0\":{\"621\":1}}],[\"mybatisplus\",{\"0\":{\"620\":1}}],[\"myjframe\",{\"1\":{\"565\":3}}],[\"multiply\",{\"1\":{\"572\":2,\"576\":2}}],[\"midbut\",{\"1\":{\"565\":5}}],[\"millis\",{\"1\":{\"562\":2}}],[\"min\",{\"1\":{\"557\":3,\"572\":2}}],[\"m\",{\"1\":{\"509\":2}}],[\"methodtwo\",{\"1\":{\"313\":2}}],[\"methodtest02\",{\"1\":{\"319\":1}}],[\"methodtest\",{\"1\":{\"302\":1,\"306\":1,\"309\":1,\"317\":1}}],[\"methodone\",{\"1\":{\"313\":1}}],[\"methoddemo02\",{\"1\":{\"316\":1}}],[\"methoddemo01\",{\"1\":{\"316\":1}}],[\"methoddemo\",{\"1\":{\"313\":2,\"316\":3}}],[\"methoddemo10\",{\"1\":{\"311\":1}}],[\"methoddemo9\",{\"1\":{\"310\":1}}],[\"method\",{\"1\":{\"299\":1,\"301\":2,\"443\":2,\"533\":2,\"535\":2,\"543\":1,\"551\":1,\"569\":9,\"576\":4}}],[\"month\",{\"1\":{\"379\":2}}],[\"month3\",{\"1\":{\"310\":2}}],[\"month2\",{\"1\":{\"310\":2}}],[\"month1\",{\"1\":{\"310\":2}}],[\"moneystr\",{\"1\":{\"376\":9}}],[\"money\",{\"1\":{\"229\":2,\"376\":8}}],[\"module中可以创建多个package\",{\"1\":{\"143\":1}}],[\"module\",{\"0\":{\"140\":1},\"1\":{\"137\":1,\"138\":1,\"143\":1,\"146\":1,\"154\":1,\"155\":1,\"157\":1}}],[\"movie\",{\"1\":{\"122\":2}}],[\"more\",{\"1\":{\"30\":1}}],[\"manager\",{\"1\":{\"509\":5}}],[\"math包下\",{\"1\":{\"571\":1,\"575\":1}}],[\"mathdemo2\",{\"1\":{\"558\":1}}],[\"mathdemo01\",{\"1\":{\"557\":1}}],[\"math类包含执行基本数字运算的方法\",{\"1\":{\"556\":1}}],[\"math类所在包为java\",{\"1\":{\"556\":1}}],[\"math\",{\"1\":{\"497\":1,\"557\":12,\"558\":1,\"559\":3,\"562\":1,\"572\":2,\"576\":1}}],[\"maxmemory\",{\"1\":{\"564\":3}}],[\"max记录的就是数组中的最大值\",{\"1\":{\"293\":1}}],[\"max的初始化值一定要是数组中的值\",{\"1\":{\"293\":1}}],[\"max\",{\"1\":{\"206\":4,\"293\":4,\"319\":4,\"557\":3,\"572\":4}}],[\"maxage\",{\"1\":{\"127\":1}}],[\"machine\",{\"1\":{\"97\":1}}],[\"main方法中定义一个集合\",{\"1\":{\"401\":2,\"402\":1}}],[\"main\",{\"1\":{\"72\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"105\":1,\"111\":1,\"112\":1,\"113\":1,\"119\":1,\"121\":1,\"122\":1,\"123\":1,\"130\":1,\"179\":1,\"187\":1,\"190\":1,\"191\":1,\"206\":1,\"212\":1,\"213\":2,\"215\":2,\"216\":1,\"217\":1,\"224\":1,\"228\":1,\"236\":1,\"242\":1,\"243\":1,\"244\":1,\"263\":1,\"283\":1,\"289\":1,\"302\":1,\"306\":1,\"309\":1,\"310\":1,\"311\":1,\"313\":2,\"317\":1,\"318\":1,\"319\":1,\"320\":1,\"327\":1,\"328\":1,\"336\":1,\"337\":1,\"340\":1,\"343\":1,\"345\":1,\"346\":1,\"354\":1,\"358\":1,\"361\":1,\"364\":1,\"367\":1,\"370\":1,\"373\":1,\"376\":1,\"377\":1,\"378\":2,\"379\":1,\"381\":1,\"382\":1,\"383\":1,\"384\":1,\"394\":1,\"397\":1,\"400\":1,\"401\":1,\"402\":1,\"412\":1,\"420\":1,\"422\":1,\"423\":1,\"426\":2,\"435\":1,\"439\":1,\"441\":1,\"442\":1,\"443\":1,\"445\":1,\"446\":1,\"449\":1,\"456\":1,\"459\":1,\"461\":1,\"463\":1,\"466\":1,\"476\":1,\"480\":1,\"485\":1,\"486\":1,\"487\":1,\"489\":1,\"499\":1,\"509\":1,\"523\":1,\"533\":2,\"535\":1,\"537\":1,\"542\":1,\"544\":1,\"546\":1,\"557\":1,\"558\":1,\"562\":7,\"564\":1,\"565\":1,\"567\":3,\"569\":2,\"572\":2,\"574\":1,\"576\":5}}],[\"markdown\",{\"0\":{\"12\":1,\"13\":1,\"14\":1,\"15\":1},\"1\":{\"12\":2,\"13\":3,\"14\":1,\"15\":3,\"16\":2,\"17\":1,\"18\":1,\"31\":3,\"32\":1,\"33\":2,\"34\":2},\"2\":{\"29\":1}}],[\"ms\",{\"1\":{\"32\":1}}],[\"md\",{\"1\":{\"17\":1}}],[\"请在\",{\"1\":{\"535\":1}}],[\"请参见3\",{\"1\":{\"534\":1}}],[\"请看如下代码\",{\"1\":{\"486\":1}}],[\"请看上节中的如下案例\",{\"1\":{\"459\":1}}],[\"请看下节\",{\"1\":{\"436\":1}}],[\"请看下面案例是否有误\",{\"1\":{\"171\":1}}],[\"请使用继承定义以下类\",{\"1\":{\"433\":1}}],[\"请使用绝对链接\",{\"1\":{\"33\":1}}],[\"请录入一个金额\",{\"1\":{\"376\":1}}],[\"请联系黑马程序员官方小姐姐\",{\"1\":{\"361\":1}}],[\"请立即联想到求和变量\",{\"1\":{\"243\":1}}],[\"请用程序实现模拟用户登录\",{\"1\":{\"360\":1}}],[\"请用程序实现小明到底该获得什么样的礼物\",{\"1\":{\"232\":1}}],[\"请用程序实现获取这三个和尚的最高身高\",{\"1\":{\"206\":1}}],[\"请用程序实现判断两只老虎的体重是否相同\",{\"1\":{\"206\":1}}],[\"请输入要说的话\",{\"1\":{\"378\":1}}],[\"请输入手机号码\",{\"1\":{\"377\":1}}],[\"请输入字符串\",{\"1\":{\"364\":1}}],[\"请输入密码\",{\"1\":{\"361\":1}}],[\"请输入用户名\",{\"1\":{\"361\":1}}],[\"请输入圆的半径\",{\"1\":{\"311\":1}}],[\"请输入星期\",{\"1\":{\"238\":1}}],[\"请输入小明的成绩\",{\"1\":{\"232\":1}}],[\"请输入小明的名次\",{\"1\":{\"226\":1}}],[\"请输入票号\",{\"1\":{\"230\":1}}],[\"请输入女婿的酒量\",{\"1\":{\"225\":1}}],[\"请输入第二个圆的半径\",{\"1\":{\"311\":1}}],[\"请输入第二只老虎的体重\",{\"1\":{\"206\":1}}],[\"请输入第一只老虎的体重\",{\"1\":{\"206\":1}}],[\"请输入一个字符串\",{\"1\":{\"367\":1,\"373\":1,\"383\":1}}],[\"请输入一个正整数\",{\"1\":{\"266\":1}}],[\"请输入一个整数\",{\"1\":{\"265\":1,\"267\":1}}],[\"请输入一个整数表示星期\",{\"1\":{\"236\":1}}],[\"请输入一个整数表示身上的钱\",{\"1\":{\"229\":1}}],[\"请输入一个三位数\",{\"1\":{\"167\":1}}],[\"请输入一个数字\",{\"1\":{\"130\":1}}],[\"请说出运算过程和运算结果\",{\"1\":{\"171\":1}}],[\"请说出原因\",{\"1\":{\"171\":1}}],[\"请问\",{\"1\":{\"113\":1}}],[\"请阅读\",{\"1\":{\"16\":1}}],[\"请先阅读\",{\"1\":{\"13\":1}}],[\"对应的结果就是3f3afe78\",{\"1\":{\"567\":1}}],[\"对应的结果就是\",{\"1\":{\"567\":1}}],[\"对应的安装包也提高给大家了\",{\"1\":{\"134\":1}}],[\"对接口中的抽象方法进行空实现\",{\"1\":{\"554\":1}}],[\"对接口里面的所有的方法做空重写\",{\"1\":{\"526\":1}}],[\"对称字符串\",{\"0\":{\"383\":1},\"1\":{\"383\":1}}],[\"对c进行判断\",{\"1\":{\"367\":1}}],[\"对象一旦创建内部的数据不能发生改变\",{\"1\":{\"572\":1}}],[\"对象一旦创建里面的数据不能发生改变\",{\"1\":{\"572\":1}}],[\"对象一旦创建\",{\"1\":{\"572\":1}}],[\"对象复制\",{\"1\":{\"567\":1}}],[\"对象克隆的分类\",{\"1\":{\"567\":1}}],[\"对象克隆\",{\"1\":{\"567\":3}}],[\"对象中有一个隐含的outer\",{\"1\":{\"534\":1}}],[\"对象调用方法时\",{\"1\":{\"445\":1}}],[\"对象有多少个\",{\"1\":{\"424\":1}}],[\"对象代表什么\",{\"1\":{\"335\":1}}],[\"对象内存图\",{\"0\":{\"329\":1}}],[\"对象名称\",{\"1\":{\"405\":1}}],[\"对象名\",{\"1\":{\"327\":6}}],[\"对象的使用\",{\"0\":{\"327\":1}}],[\"对象则为具体存在的事物\",{\"1\":{\"325\":1}}],[\"对象\",{\"1\":{\"321\":1,\"325\":1,\"355\":1,\"421\":1,\"423\":1}}],[\"对结果没有任何影响\",{\"1\":{\"293\":1}}],[\"对每一个元素进行判断\",{\"1\":{\"292\":1}}],[\"对1\",{\"1\":{\"244\":2}}],[\"对小明的分数进行判断\",{\"1\":{\"232\":1}}],[\"对小明的考试成绩进行判断即可\",{\"1\":{\"226\":1}}],[\"对分数的有效性进行判断\",{\"1\":{\"232\":1}}],[\"对票号进行判断\",{\"1\":{\"230\":1}}],[\"对钱进行判断\",{\"1\":{\"229\":1}}],[\"对酒量进行一个判断即可\",{\"1\":{\"225\":1}}],[\"对右边没有任何影响\",{\"1\":{\"189\":1,\"190\":1}}],[\"对安装路径有两个小建议\",{\"1\":{\"87\":1}}],[\"对于计算机而言\",{\"1\":{\"573\":1}}],[\"对于理解面向对象非常关键\",{\"1\":{\"418\":1}}],[\"对于\",{\"1\":{\"33\":1}}],[\"对\",{\"1\":{\"16\":1,\"443\":1}}],[\"为null\",{\"1\":{\"569\":1}}],[\"为成员变量进行初始化\",{\"1\":{\"341\":1}}],[\"为方法定义两个参数\",{\"1\":{\"306\":1}}],[\"为什么会产生精度丢失呢\",{\"1\":{\"574\":1}}],[\"为什么结果还是false呢\",{\"1\":{\"567\":1}}],[\"为什么控制台输出的结果为\",{\"1\":{\"567\":1}}],[\"为什么通过编译呢\",{\"1\":{\"499\":1}}],[\"为什么要转型\",{\"0\":{\"482\":1}}],[\"为什么要先访问父类中的无参构造器\",{\"1\":{\"471\":1}}],[\"为什么要使用面向对象编程\",{\"1\":{\"321\":1}}],[\"为什么需要方法\",{\"1\":{\"299\":1}}],[\"为什么max要记录为arr\",{\"1\":{\"293\":1}}],[\"为什么配置环境变量\",{\"0\":{\"82\":1}}],[\"为了提高精度\",{\"1\":{\"574\":1}}],[\"为了提高效率\",{\"1\":{\"293\":1}}],[\"为了实现更好的封装性\",{\"1\":{\"531\":1}}],[\"为了避免classcastexception的发生\",{\"1\":{\"487\":1}}],[\"为了借用其他构造方法的功能\",{\"1\":{\"463\":2}}],[\"为了解决负数计算时跨0的问题而出现的\",{\"1\":{\"209\":1}}],[\"为了解决上面反码计算不能跨0的问题\",{\"1\":{\"209\":1}}],[\"为了解决上面原码不能计算负数的问题\",{\"1\":{\"208\":1}}],[\"为了把这些业务区分的更加清楚\",{\"1\":{\"141\":1}}],[\"为了更好的管理代码\",{\"1\":{\"140\":1}}],[\"为了让大家更好的吸收\",{\"1\":{\"138\":1}}],[\"为了丰富文档写作\",{\"1\":{\"16\":1}}],[\"为每个\",{\"1\":{\"14\":1}}],[\"中华田园猫\",{\"1\":{\"466\":1}}],[\"中提供的各种功能的\",{\"1\":{\"349\":1}}],[\"中\",{\"1\":{\"243\":1}}],[\"中间的适配器类用abstract进行修饰\",{\"1\":{\"554\":1}}],[\"中间就会出现刚刚新建的模块\",{\"1\":{\"146\":1}}],[\"中间选择java\",{\"1\":{\"88\":1}}],[\"中设置页面信息\",{\"1\":{\"32\":1}}],[\"中设置页面标题\",{\"1\":{\"31\":1}}],[\"中使用\",{\"1\":{\"18\":1,\"34\":1}}],[\"中的类时\",{\"1\":{\"491\":1}}],[\"中的第一个\",{\"1\":{\"31\":1}}],[\"中的\",{\"1\":{\"16\":1}}],[\"中很重要的一个概念\",{\"1\":{\"14\":1}}],[\"中自定义它们\",{\"1\":{\"9\":1}}],[\"是类层次结构的根\",{\"1\":{\"566\":1}}],[\"是行为的抽象\",{\"1\":{\"552\":1}}],[\"是为了简化代码\",{\"1\":{\"542\":1}}],[\"是为了方便管理类文件的\",{\"1\":{\"143\":1}}],[\"是内部类的简化写法\",{\"1\":{\"540\":1}}],[\"是供子类创建对象时\",{\"1\":{\"511\":1}}],[\"是子类对父类抽象方法的完成实现\",{\"1\":{\"509\":1}}],[\"是子类类型\",{\"1\":{\"483\":1}}],[\"是父类类型\",{\"1\":{\"483\":1}}],[\"是不一样的\",{\"1\":{\"477\":1}}],[\"是不允许直接操作\",{\"1\":{\"178\":1}}],[\"是指同一行为\",{\"1\":{\"477\":1}}],[\"是根据参数去确定调用父类哪个构造方法的\",{\"1\":{\"461\":1,\"464\":1}}],[\"是属于对象\",{\"1\":{\"424\":1}}],[\"是随着类的加载而加载的\",{\"1\":{\"424\":1}}],[\"是用1个参数的\",{\"1\":{\"377\":1}}],[\"是用于java语言开发的集成环境\",{\"1\":{\"132\":1}}],[\"是在创建对象的时候由虚拟机调用\",{\"1\":{\"343\":1}}],[\"是能够看得到摸的着的真实存在的实体\",{\"1\":{\"325\":1}}],[\"是否可以继承所有成分呢\",{\"1\":{\"436\":1}}],[\"是否需要继续使用方法的结果\",{\"1\":{\"311\":1}}],[\"是否导入一些设置\",{\"1\":{\"135\":1}}],[\"是程序中最小的执行单元\",{\"1\":{\"299\":1}}],[\"是程序自动帮我们完成的\",{\"1\":{\"168\":1}}],[\"是一套被反复使用\",{\"1\":{\"554\":1}}],[\"是一个质数\",{\"1\":{\"266\":3}}],[\"是一模一样的\",{\"1\":{\"197\":1}}],[\"是先判断\",{\"1\":{\"251\":1}}],[\"是4个字节占32位\",{\"1\":{\"212\":1,\"213\":1}}],[\"是1个字节占8位\",{\"1\":{\"212\":1,\"213\":1}}],[\"是没有任何问题的\",{\"1\":{\"209\":1}}],[\"是符合业务逻辑的\",{\"1\":{\"200\":1}}],[\"是取反\",{\"1\":{\"197\":1}}],[\"是以+为例进行的讲解\",{\"1\":{\"182\":1}}],[\"是可以直接赋值\",{\"1\":{\"173\":1}}],[\"是因为导入模块跟jdk没有关联导致\",{\"1\":{\"157\":1}}],[\"是其他两个版本的基础\",{\"1\":{\"92\":1}}],[\"是严格区分大小写的\",{\"1\":{\"78\":1}}],[\"是\",{\"1\":{\"14\":1}}],[\"配置到path当中\",{\"1\":{\"63\":1}}],[\"配置到path当中就可以了\",{\"1\":{\"63\":1}}],[\"配置\",{\"0\":{\"14\":1}}],[\"演示取舍模式up\",{\"1\":{\"576\":1}}],[\"演示取舍模式floor\",{\"1\":{\"576\":1}}],[\"演示取舍模式half\",{\"1\":{\"576\":1}}],[\"演示除法的特殊情况\",{\"1\":{\"576\":1}}],[\"演示基本的四则运算\",{\"1\":{\"576\":1}}],[\"演示requirenonnull\",{\"1\":{\"569\":1}}],[\"演示requirenonnullelse\",{\"1\":{\"569\":1}}],[\"演示requirenonnullelseget\",{\"1\":{\"569\":1}}],[\"演示需要了解的方法\",{\"1\":{\"569\":1}}],[\"演示重点学习方法\",{\"1\":{\"569\":1}}],[\"演示equals方法\",{\"1\":{\"567\":1}}],[\"演示exit方法\",{\"1\":{\"562\":1}}],[\"演示tostring方法\",{\"1\":{\"567\":1}}],[\"演示arraycopy方法\",{\"1\":{\"562\":1}}],[\"演示currenttimemillis方法\",{\"1\":{\"562\":1}}],[\"演示结果\",{\"1\":{\"441\":1,\"442\":1,\"443\":1}}],[\"演示代码\",{\"0\":{\"439\":1}}],[\"演示\",{\"1\":{\"13\":1}}],[\"和this\",{\"0\":{\"458\":1},\"1\":{\"464\":1}}],[\"和前面的方法相比去掉static关键字即可\",{\"1\":{\"326\":1}}],[\"和存储的数据类型保持一致\",{\"1\":{\"269\":1}}],[\"和case依次比较\",{\"1\":{\"235\":1}}],[\"和右移基本一致\",{\"1\":{\"218\":1}}],[\"和取值范围大的进行运算\",{\"1\":{\"170\":1,\"171\":1}}],[\"和\",{\"0\":{\"194\":1},\"1\":{\"13\":1,\"32\":1,\"182\":1,\"201\":1,\"461\":1,\"464\":1,\"493\":1}}],[\"介绍\",{\"0\":{\"13\":1},\"1\":{\"13\":1,\"14\":1}}],[\"介绍页\",{\"0\":{\"1\":1}}],[\"你还是有一点自知之明的\",{\"1\":{\"565\":1}}],[\"你还是太自信了\",{\"1\":{\"565\":1}}],[\"你的好基友点击了不帅\",{\"1\":{\"565\":1}}],[\"你的好基友点击了一般般吧\",{\"1\":{\"565\":1}}],[\"你太自信了\",{\"1\":{\"565\":1}}],[\"你觉得自己帅吗\",{\"1\":{\"565\":1}}],[\"你给的年龄有误\",{\"1\":{\"336\":1}}],[\"你就给什么类型的\",{\"1\":{\"306\":1}}],[\"你就给几个\",{\"1\":{\"306\":1}}],[\"你要能看懂即可\",{\"1\":{\"227\":1}}],[\"你要么买个房子\",{\"1\":{\"195\":1}}],[\"你也可以创建并引入你自己的组件\",{\"1\":{\"34\":1}}],[\"你需要阅读\",{\"1\":{\"14\":1}}],[\"你应该创建和编写\",{\"1\":{\"12\":1}}],[\"你可以将图片和\",{\"1\":{\"33\":1}}],[\"你可以自由在这里书写你的\",{\"1\":{\"33\":1}}],[\"你可以在\",{\"1\":{\"31\":1,\"32\":1}}],[\"你可以在主题选项和页面的\",{\"1\":{\"9\":1}}],[\"你可以标记\",{\"1\":{\"24\":1}}],[\"你可以使用它轻松生成文档或博客站点\",{\"1\":{\"12\":1}}],[\"你可以通过设置页面的\",{\"1\":{\"6\":1}}],[\"文档注释\",{\"1\":{\"99\":1,\"101\":1}}],[\"文件名和类名均已修改成功\",{\"1\":{\"150\":1}}],[\"文件名\",{\"1\":{\"72\":2}}],[\"文件名或者文件夹名是忽略大小写的\",{\"1\":{\"62\":1}}],[\"文件夹的图片\",{\"1\":{\"33\":1}}],[\"文件放置在一起使用相对路径进行引用\",{\"1\":{\"33\":1}}],[\"文件\",{\"1\":{\"12\":1}}],[\"文件生成页面\",{\"1\":{\"12\":1}}],[\"文章标题列表\",{\"1\":{\"9\":1}}],[\"夜间模式按钮\",{\"1\":{\"9\":1}}],[\"主演\",{\"1\":{\"122\":1}}],[\"主入口\",{\"1\":{\"113\":1}}],[\"主题扩展了更多\",{\"1\":{\"17\":1}}],[\"主题扩展\",{\"0\":{\"17\":1}}],[\"主题也带有以下元素\",{\"1\":{\"9\":1}}],[\"主要是完成对象数据的初始化\",{\"1\":{\"340\":1}}],[\"主要是明确参数的类型和数量\",{\"1\":{\"314\":1}}],[\"主要是明确方法操作完毕之后是否有数据返回\",{\"1\":{\"314\":1}}],[\"主要包含以下三个部分\",{\"1\":{\"97\":2}}],[\"主要从事后台服务器的开发\",{\"1\":{\"94\":1}}],[\"主要从\",{\"1\":{\"12\":1}}],[\"主要功能与配置演示\",{\"0\":{\"4\":1}}],[\"禁用\",{\"2\":{\"8\":1}}],[\"禁用了如下功能\",{\"1\":{\"6\":1}}],[\"页面都会被转换为一个\",{\"1\":{\"34\":1}}],[\"页面内容\",{\"0\":{\"33\":1}}],[\"页面标题\",{\"0\":{\"31\":1},\"1\":{\"31\":1}}],[\"页面配置\",{\"0\":{\"30\":1},\"1\":{\"32\":1},\"2\":{\"36\":1}}],[\"页面引入配置\",{\"1\":{\"14\":1}}],[\"页面信息\",{\"0\":{\"32\":1},\"1\":{\"6\":1}}],[\"页脚\",{\"1\":{\"6\":1,\"9\":1}}],[\"贡献者\",{\"1\":{\"6\":1,\"9\":1}}],[\"侧边栏\",{\"1\":{\"6\":1,\"9\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
